// The MIT License
//
// Copyright (c) 2022 Temporal Technologies Inc.  All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-go. DO NOT EDIT.
// plugins:
// 	protoc-gen-go
// 	protoc
// source: temporal/api/cloud/namespace/v1/message.proto

package namespace

import (
	reflect "reflect"
	"strconv"
	sync "sync"
	unsafe "unsafe"

	v1 "go.temporal.io/api/cloud/resource/v1"
	v11 "go.temporal.io/api/cloud/sink/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NamespaceSpec_SearchAttributeType int32

const (
	NamespaceSpec_SEARCH_ATTRIBUTE_TYPE_UNSPECIFIED  NamespaceSpec_SearchAttributeType = 0
	NamespaceSpec_SEARCH_ATTRIBUTE_TYPE_TEXT         NamespaceSpec_SearchAttributeType = 1
	NamespaceSpec_SEARCH_ATTRIBUTE_TYPE_KEYWORD      NamespaceSpec_SearchAttributeType = 2
	NamespaceSpec_SEARCH_ATTRIBUTE_TYPE_INT          NamespaceSpec_SearchAttributeType = 3
	NamespaceSpec_SEARCH_ATTRIBUTE_TYPE_DOUBLE       NamespaceSpec_SearchAttributeType = 4
	NamespaceSpec_SEARCH_ATTRIBUTE_TYPE_BOOL         NamespaceSpec_SearchAttributeType = 5
	NamespaceSpec_SEARCH_ATTRIBUTE_TYPE_DATETIME     NamespaceSpec_SearchAttributeType = 6
	NamespaceSpec_SEARCH_ATTRIBUTE_TYPE_KEYWORD_LIST NamespaceSpec_SearchAttributeType = 7
)

// Enum value maps for NamespaceSpec_SearchAttributeType.
var (
	NamespaceSpec_SearchAttributeType_name = map[int32]string{
		0: "SEARCH_ATTRIBUTE_TYPE_UNSPECIFIED",
		1: "SEARCH_ATTRIBUTE_TYPE_TEXT",
		2: "SEARCH_ATTRIBUTE_TYPE_KEYWORD",
		3: "SEARCH_ATTRIBUTE_TYPE_INT",
		4: "SEARCH_ATTRIBUTE_TYPE_DOUBLE",
		5: "SEARCH_ATTRIBUTE_TYPE_BOOL",
		6: "SEARCH_ATTRIBUTE_TYPE_DATETIME",
		7: "SEARCH_ATTRIBUTE_TYPE_KEYWORD_LIST",
	}
	NamespaceSpec_SearchAttributeType_value = map[string]int32{
		"SEARCH_ATTRIBUTE_TYPE_UNSPECIFIED":  0,
		"SEARCH_ATTRIBUTE_TYPE_TEXT":         1,
		"SEARCH_ATTRIBUTE_TYPE_KEYWORD":      2,
		"SEARCH_ATTRIBUTE_TYPE_INT":          3,
		"SEARCH_ATTRIBUTE_TYPE_DOUBLE":       4,
		"SEARCH_ATTRIBUTE_TYPE_BOOL":         5,
		"SEARCH_ATTRIBUTE_TYPE_DATETIME":     6,
		"SEARCH_ATTRIBUTE_TYPE_KEYWORD_LIST": 7,
	}
)

func (x NamespaceSpec_SearchAttributeType) Enum() *NamespaceSpec_SearchAttributeType {
	p := new(NamespaceSpec_SearchAttributeType)
	*p = x
	return p
}

func (x NamespaceSpec_SearchAttributeType) String() string {
	switch x {
	case NamespaceSpec_SEARCH_ATTRIBUTE_TYPE_UNSPECIFIED:
		return "NamespaceSpecSearchAttributeTypeUnspecified"
	case NamespaceSpec_SEARCH_ATTRIBUTE_TYPE_TEXT:
		return "NamespaceSpecSearchAttributeTypeText"
	case NamespaceSpec_SEARCH_ATTRIBUTE_TYPE_KEYWORD:
		return "NamespaceSpecSearchAttributeTypeKeyword"
	case NamespaceSpec_SEARCH_ATTRIBUTE_TYPE_INT:
		return "NamespaceSpecSearchAttributeTypeInt"
	case NamespaceSpec_SEARCH_ATTRIBUTE_TYPE_DOUBLE:
		return "NamespaceSpecSearchAttributeTypeDouble"
	case NamespaceSpec_SEARCH_ATTRIBUTE_TYPE_BOOL:

		// Deprecated: Use NamespaceSpec_SearchAttributeType.Descriptor instead.
		return "NamespaceSpecSearchAttributeTypeBool"
	case NamespaceSpec_SEARCH_ATTRIBUTE_TYPE_DATETIME:
		return "NamespaceSpecSearchAttributeTypeDatetime"
	case NamespaceSpec_SEARCH_ATTRIBUTE_TYPE_KEYWORD_LIST:
		return "NamespaceSpecSearchAttributeTypeKeywordList"
	default:
		return strconv.Itoa(int(x))
	}

}

func (NamespaceSpec_SearchAttributeType) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_api_cloud_namespace_v1_message_proto_enumTypes[0].Descriptor()
}

func (NamespaceSpec_SearchAttributeType) Type() protoreflect.EnumType {
	return &file_temporal_api_cloud_namespace_v1_message_proto_enumTypes[0]
}

func (x NamespaceSpec_SearchAttributeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

func (NamespaceSpec_SearchAttributeType) EnumDescriptor() ([]byte, []int) {
	return file_temporal_api_cloud_namespace_v1_message_proto_rawDescGZIP(), []int{4, 0}
}

type NamespaceRegionStatus_State int32

const (
	NamespaceRegionStatus_STATE_UNSPECIFIED NamespaceRegionStatus_State = 0
	NamespaceRegionStatus_STATE_ADDING      NamespaceRegionStatus_State = 1
	NamespaceRegionStatus_STATE_ACTIVE      NamespaceRegionStatus_State = // The region is being added to the namespace.
	2
	NamespaceRegionStatus_STATE_PASSIVE NamespaceRegionStatus_State = // The namespace is active in this region.
	3
	NamespaceRegionStatus_STATE_REMOVING NamespaceRegionStatus_State = // The namespace is passive in this region.
	4
	NamespaceRegionStatus_STATE_FAILED NamespaceRegionStatus_State = // The region is being removed from the namespace.
	5                                  // The region failed to be added/removed, check failure_reason in the last async_operation status for more details.
)

// Enum value maps for NamespaceRegionStatus_State.
var (
	NamespaceRegionStatus_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "STATE_ADDING",
		2: "STATE_ACTIVE",
		3: "STATE_PASSIVE",
		4: "STATE_REMOVING",
		5: "STATE_FAILED",
	}
	NamespaceRegionStatus_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"STATE_ADDING":      1,
		"STATE_ACTIVE":      2,
		"STATE_PASSIVE":     3,
		"STATE_REMOVING":    4,
		"STATE_FAILED":      5,
	}
)

func (x NamespaceRegionStatus_State) Enum() *NamespaceRegionStatus_State {
	p := new(NamespaceRegionStatus_State)
	*p = x
	return p
}

func (x NamespaceRegionStatus_State) String() string {
	switch x {
	case NamespaceRegionStatus_STATE_UNSPECIFIED:
		return "NamespaceRegionStatusStateUnspecified"
	case NamespaceRegionStatus_STATE_ADDING:
		return "NamespaceRegionStatusStateAdding"
	case NamespaceRegionStatus_STATE_ACTIVE:
		return "NamespaceRegionStatusStateActive"
	case NamespaceRegionStatus_STATE_PASSIVE:
		return "NamespaceRegionStatusStatePassive"
	case NamespaceRegionStatus_STATE_REMOVING:
		return "NamespaceRegionStatusStateRemoving"
	case NamespaceRegionStatus_STATE_FAILED:
		return "NamespaceRegionStatusStateFailed"
	default

	// Deprecated: Use NamespaceRegionStatus_State.Descriptor instead.
	:
		return strconv.Itoa(int(x))
	}

}

func (NamespaceRegionStatus_State) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_api_cloud_namespace_v1_message_proto_enumTypes[1].Descriptor()
}

func (NamespaceRegionStatus_State) Type() protoreflect.EnumType {
	return &file_temporal_api_cloud_namespace_v1_message_proto_enumTypes[1]
}

func (x NamespaceRegionStatus_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

func (NamespaceRegionStatus_State) EnumDescriptor() ([]byte, []int) {
	return file_temporal_api_cloud_namespace_v1_message_proto_rawDescGZIP(), []int{10, 0}
}

type ExportSink_Health int32

const (
	ExportSink_HEALTH_UNSPECIFIED              ExportSink_Health = 0
	ExportSink_HEALTH_OK                       ExportSink_Health = 1
	ExportSink_HEALTH_ERROR_INTERNAL           ExportSink_Health = 2
	ExportSink_HEALTH_ERROR_USER_CONFIGURATION ExportSink_Health = 3
)

// Enum value maps for ExportSink_Health.
var (
	ExportSink_Health_name = map[int32]string{
		0: "HEALTH_UNSPECIFIED",
		1: "HEALTH_OK",
		2: "HEALTH_ERROR_INTERNAL",
		3: "HEALTH_ERROR_USER_CONFIGURATION",
	}
	ExportSink_Health_value = map[string]int32{
		"HEALTH_UNSPECIFIED":              0,
		"HEALTH_OK":                       1,
		"HEALTH_ERROR_INTERNAL":           2,
		"HEALTH_ERROR_USER_CONFIGURATION": 3,
	}
)

func (x ExportSink_Health) Enum() *ExportSink_Health {
	p := new(ExportSink_Health)
	*p = x
	return p
}

func (x ExportSink_Health) String() string {
	switch x {
	case ExportSink_HEALTH_UNSPECIFIED:
		return "ExportSinkHealthUnspecified"
	case ExportSink_HEALTH_OK:
		return "ExportSinkHealthOk"
	case ExportSink_HEALTH_ERROR_INTERNAL:
		return "ExportSinkHealthErrorInternal"
	case ExportSink_HEALTH_ERROR_USER_CONFIGURATION:
		return "ExportSinkHealthErrorUserConfiguration"
	default:
		return strconv.Itoa(int(x))
	}

}

func (ExportSink_Health) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_api_cloud_namespace_v1_message_proto_enumTypes[2].Descriptor()
}

func (ExportSink_Health) Type() protoreflect.EnumType {
	return &file_temporal_api_cloud_namespace_v1_message_proto_enumTypes[2]
}

func (x ExportSink_Health) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExportSink_Health.Descriptor instead.
func (ExportSink_Health) EnumDescriptor() ([]byte, []int) {
	return file_temporal_api_cloud_namespace_v1_message_proto_rawDescGZIP(), []int{12, 0}
}

type CertificateFilterSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The common_name in the certificate.
	// Optional, default is empty.
	CommonName string `protobuf:"bytes,1,opt,name=common_name,json=commonName,proto3" json:"common_name,omitempty"`
	// The organization in the certificate.
	// Optional, default is empty.
	Organization string `protobuf:"bytes,2,opt,name=organization,proto3" json:"organization,omitempty"`
	// The organizational_unit in the certificate.
	// Optional, default is empty.
	OrganizationalUnit string `protobuf:"bytes,3,opt,name=organizational_unit,json=organizationalUnit,proto3" json:"organizational_unit,omitempty"`
	// The subject_alternative_name in the certificate.
	// Optional, default is empty.
	SubjectAlternativeName string `protobuf:"bytes,4,opt,name=subject_alternative_name,json=subjectAlternativeName,proto3" json:"subject_alternative_name,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CertificateFilterSpec) Reset() {
	*x = CertificateFilterSpec{}
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertificateFilterSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateFilterSpec) ProtoMessage() {}

func (x *CertificateFilterSpec) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateFilterSpec.ProtoReflect.Descriptor instead.
func (*CertificateFilterSpec) Descriptor() ([]byte, []int) {
	return file_temporal_api_cloud_namespace_v1_message_proto_rawDescGZIP(), []int{0}
}

func (x *CertificateFilterSpec) GetCommonName() string {
	if x != nil {
		return x.CommonName
	}
	return ""
}

func (x *CertificateFilterSpec) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

func (x *CertificateFilterSpec) GetOrganizationalUnit() string {
	if x != nil {
		return x.OrganizationalUnit
	}
	return ""
}

func (x *CertificateFilterSpec) GetSubjectAlternativeName() string {
	if x != nil {
		return x.SubjectAlternativeName
	}
	return ""
}

type MtlsAuthSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The base64 encoded ca cert(s) in PEM format that the clients can use for authentication and authorization.
	// This must only be one value, but the CA can have a chain.
	//
	// (-- api-linter: core::0140::base64=disabled --)
	// Deprecated: Not supported after 2024-05-13-00 api version. Use accepted_client_ca instead.
	// temporal:versioning:max_version=2024-05-13-00
	AcceptedClientCaDeprecated string `protobuf:"bytes,1,opt,name=accepted_client_ca_deprecated,json=acceptedClientCaDeprecated,proto3" json:"accepted_client_ca_deprecated,omitempty"`
	// The ca cert(s) in PEM format that the clients can use for authentication and authorization.
	// This must only be one value, but the CA can have a chain.
	// temporal:versioning:min_version=2024-05-13-00
	AcceptedClientCa []byte `protobuf:"bytes,4,opt,name=accepted_client_ca,json=acceptedClientCa,proto3" json:"accepted_client_ca,omitempty"`
	// Certificate filters which, if specified, only allow connections from client certificates whose distinguished name properties match at least one of the filters.
	// This allows limiting access to specific end-entity certificates.
	// Optional, default is empty.
	CertificateFilters []*CertificateFilterSpec `protobuf:"bytes,2,rep,name=certificate_filters,json=certificateFilters,proto3" json:"certificate_filters,omitempty"`
	// Flag to enable mTLS auth (default: disabled).
	// Note: disabling mTLS auth will cause existing mTLS connections to fail.
	// temporal:versioning:min_version=2024-05-13-00
	Enabled       bool `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MtlsAuthSpec) Reset() {
	*x = MtlsAuthSpec{}
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MtlsAuthSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MtlsAuthSpec) ProtoMessage() {}

func (x *MtlsAuthSpec) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MtlsAuthSpec.ProtoReflect.Descriptor instead.
func (*MtlsAuthSpec) Descriptor() ([]byte, []int) {
	return file_temporal_api_cloud_namespace_v1_message_proto_rawDescGZIP(), []int{1}
}

func (x *MtlsAuthSpec) GetAcceptedClientCaDeprecated() string {
	if x != nil {
		return x.AcceptedClientCaDeprecated
	}
	return ""
}

func (x *MtlsAuthSpec) GetAcceptedClientCa() []byte {
	if x != nil {
		return x.AcceptedClientCa
	}
	return nil
}

func (x *MtlsAuthSpec) GetCertificateFilters() []*CertificateFilterSpec {
	if x != nil {
		return x.CertificateFilters
	}
	return nil
}

func (x *MtlsAuthSpec) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type ApiKeyAuthSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Flag to enable API key auth (default: disabled).
	// Note: disabling API key auth will cause existing API key connections to fail.
	Enabled       bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiKeyAuthSpec) Reset() {
	*x = ApiKeyAuthSpec{}
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiKeyAuthSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiKeyAuthSpec) ProtoMessage() {}

func (x *ApiKeyAuthSpec) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiKeyAuthSpec.ProtoReflect.Descriptor instead.
func (*ApiKeyAuthSpec) Descriptor() ([]byte, []int) {
	return file_temporal_api_cloud_namespace_v1_message_proto_rawDescGZIP(), []int{2}
}

func (x *ApiKeyAuthSpec) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type CodecServerSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The codec server endpoint.
	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Whether to pass the user access token with your endpoint.
	PassAccessToken bool `protobuf:"varint,2,opt,name=pass_access_token,json=passAccessToken,proto3" json:"pass_access_token,omitempty"`
	// Whether to include cross-origin credentials.
	IncludeCrossOriginCredentials bool `protobuf:"varint,3,opt,name=include_cross_origin_credentials,json=includeCrossOriginCredentials,proto3" json:"include_cross_origin_credentials,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *CodecServerSpec) Reset() {
	*x = CodecServerSpec{}
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CodecServerSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodecServerSpec) ProtoMessage() {}

func (x *CodecServerSpec) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodecServerSpec.ProtoReflect.Descriptor instead.
func (*CodecServerSpec) Descriptor() ([]byte, []int) {
	return file_temporal_api_cloud_namespace_v1_message_proto_rawDescGZIP(), []int{3}
}

func (x *CodecServerSpec) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *CodecServerSpec) GetPassAccessToken() bool {
	if x != nil {
		return x.PassAccessToken
	}
	return false
}

func (x *CodecServerSpec) GetIncludeCrossOriginCredentials() bool {
	if x != nil {
		return x.IncludeCrossOriginCredentials
	}
	return false
}

type NamespaceSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name to use for the namespace.
	// This will create a namespace that's available at '<name>.<account>.tmprl.cloud:7233'.
	// The name is immutable. Once set, it cannot be changed.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The ids of the regions where the namespace should be available.
	// The GetRegions API can be used to get the list of valid region ids.
	// Specifying more than one region makes the namespace "global", which is currently a preview only feature with restricted access.
	// Please reach out to Temporal support for more information on global namespaces.
	// When provisioned the global namespace will be active on the first region in the list and passive on the rest.
	// Number of supported regions is 2.
	// The regions is immutable. Once set, it cannot be changed.
	// Example: ["aws-us-west-2"].
	Regions []string `protobuf:"bytes,2,rep,name=regions,proto3" json:"regions,omitempty"`
	// The number of days the workflows data will be retained for.
	// Changes to the retention period may impact your storage costs.
	// Any changes to the retention period will be applied to all new running workflows.
	RetentionDays int32 `protobuf:"varint,3,opt,name=retention_days,json=retentionDays,proto3" json:"retention_days,omitempty"`
	// The mTLS auth configuration for the namespace.
	// If unspecified, mTLS will be disabled.
	MtlsAuth *MtlsAuthSpec `protobuf:"bytes,4,opt,name=mtls_auth,json=mtlsAuth,proto3" json:"mtls_auth,omitempty"`
	// The API key auth configuration for the namespace.
	// If unspecified, API keys will be disabled.
	// temporal:versioning:min_version=2024-05-13-00
	ApiKeyAuth *ApiKeyAuthSpec `protobuf:"bytes,7,opt,name=api_key_auth,json=apiKeyAuth,proto3" json:"api_key_auth,omitempty"`
	// The custom search attributes to use for the namespace.
	// The name of the attribute is the key and the type is the value.
	// Supported attribute types: text, keyword, int, double, bool, datetime, keyword_list.
	// NOTE: currently deleting a search attribute is not supported.
	// Optional, default is empty.
	// Deprecated: Not supported after 2024-10-01-00 api version. Use search_attributes instead.
	// temporal:versioning:max_version=2024-10-01-00
	//
	// Deprecated: Marked as deprecated in temporal/api/cloud/namespace/v1/message.proto.
	CustomSearchAttributes map[string]string `protobuf:"bytes,5,rep,name=custom_search_attributes,json=customSearchAttributes,proto3" json:"custom_search_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The custom search attributes to use for the namespace.
	// The name of the attribute is the key and the type is the value.
	// Note: currently deleting a search attribute is not supported.
	// Optional, default is empty.
	// temporal:versioning:min_version=2024-10-01-00
	// temporal:enums:replaces=custom_search_attributes
	SearchAttributes map[string]NamespaceSpec_SearchAttributeType `protobuf:"bytes,8,rep,name=search_attributes,json=searchAttributes,proto3" json:"search_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=temporal.api.cloud.namespace.v1.NamespaceSpec_SearchAttributeType"`
	// Codec server spec used by UI to decode payloads for all users interacting with this namespace.
	// Optional, default is unset.
	CodecServer   *CodecServerSpec `protobuf:"bytes,6,opt,name=codec_server,json=codecServer,proto3" json:"codec_server,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NamespaceSpec) Reset() {
	*x = NamespaceSpec{}
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NamespaceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceSpec) ProtoMessage() {}

func (x *NamespaceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceSpec.ProtoReflect.Descriptor instead.
func (*NamespaceSpec) Descriptor() ([]byte, []int) {
	return file_temporal_api_cloud_namespace_v1_message_proto_rawDescGZIP(), []int{4}
}

func (x *NamespaceSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NamespaceSpec) GetRegions() []string {
	if x != nil {
		return x.Regions
	}
	return nil
}

func (x *NamespaceSpec) GetRetentionDays() int32 {
	if x != nil {
		return x.RetentionDays
	}
	return 0
}

func (x *NamespaceSpec) GetMtlsAuth() *MtlsAuthSpec {
	if x != nil {
		return x.MtlsAuth
	}
	return nil
}

func (x *NamespaceSpec) GetApiKeyAuth() *ApiKeyAuthSpec {
	if x != nil {
		return x.ApiKeyAuth
	}
	return nil
}

// Deprecated: Marked as deprecated in temporal/api/cloud/namespace/v1/message.proto.
func (x *NamespaceSpec) GetCustomSearchAttributes() map[string]string {
	if x != nil {
		return x.CustomSearchAttributes
	}
	return nil
}

func (x *NamespaceSpec) GetSearchAttributes() map[string]NamespaceSpec_SearchAttributeType {
	if x != nil {
		return x.SearchAttributes
	}
	return nil
}

func (x *NamespaceSpec) GetCodecServer() *CodecServerSpec {
	if x != nil {
		return x.CodecServer
	}
	return nil
}

type Endpoints struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The web UI address.
	WebAddress string `protobuf:"bytes,1,opt,name=web_address,json=webAddress,proto3" json:"web_address,omitempty"`
	// The gRPC address for mTLS client connections (may be empty if mTLS is disabled).
	MtlsGrpcAddress string `protobuf:"bytes,2,opt,name=mtls_grpc_address,json=mtlsGrpcAddress,proto3" json:"mtls_grpc_address,omitempty"`
	// The gRPC address for API key client connections (may be empty if API keys are disabled).
	GrpcAddress   string `protobuf:"bytes,3,opt,name=grpc_address,json=grpcAddress,proto3" json:"grpc_address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Endpoints) Reset() {
	*x = Endpoints{}
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Endpoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Endpoints) ProtoMessage() {}

func (x *Endpoints) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Endpoints.ProtoReflect.Descriptor instead.
func (*Endpoints) Descriptor() ([]byte, []int) {
	return file_temporal_api_cloud_namespace_v1_message_proto_rawDescGZIP(), []int{5}
}

func (x *Endpoints) GetWebAddress() string {
	if x != nil {
		return x.WebAddress
	}
	return ""
}

func (x *Endpoints) GetMtlsGrpcAddress() string {
	if x != nil {
		return x.MtlsGrpcAddress
	}
	return ""
}

func (x *Endpoints) GetGrpcAddress() string {
	if x != nil {
		return x.GrpcAddress
	}
	return ""
}

type Limits struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The number of actions per second (APS) that is currently allowed for the namespace.
	// The namespace may be throttled if its APS exceeds the limit.
	ActionsPerSecondLimit int32 `protobuf:"varint,1,opt,name=actions_per_second_limit,json=actionsPerSecondLimit,proto3" json:"actions_per_second_limit,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Limits) Reset() {
	*x = Limits{}
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Limits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Limits) ProtoMessage() {}

func (x *Limits) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Limits.ProtoReflect.Descriptor instead.
func (*Limits) Descriptor() ([]byte, []int) {
	return file_temporal_api_cloud_namespace_v1_message_proto_rawDescGZIP(), []int{6}
}

func (x *Limits) GetActionsPerSecondLimit() int32 {
	if x != nil {
		return x.ActionsPerSecondLimit
	}
	return 0
}

type AWSPrivateLinkInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The list of principal arns that are allowed to access the namespace on the private link.
	AllowedPrincipalArns []string `protobuf:"bytes,1,rep,name=allowed_principal_arns,json=allowedPrincipalArns,proto3" json:"allowed_principal_arns,omitempty"`
	// The list of vpc endpoint service names that are associated with the namespace.
	VpcEndpointServiceNames []string `protobuf:"bytes,2,rep,name=vpc_endpoint_service_names,json=vpcEndpointServiceNames,proto3" json:"vpc_endpoint_service_names,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *AWSPrivateLinkInfo) Reset() {
	*x = AWSPrivateLinkInfo{}
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSPrivateLinkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSPrivateLinkInfo) ProtoMessage() {}

func (x *AWSPrivateLinkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSPrivateLinkInfo.ProtoReflect.Descriptor instead.
func (*AWSPrivateLinkInfo) Descriptor() ([]byte, []int) {
	return file_temporal_api_cloud_namespace_v1_message_proto_rawDescGZIP(), []int{7}
}

func (x *AWSPrivateLinkInfo) GetAllowedPrincipalArns() []string {
	if x != nil {
		return x.AllowedPrincipalArns
	}
	return nil
}

func (x *AWSPrivateLinkInfo) GetVpcEndpointServiceNames() []string {
	if x != nil {
		return x.VpcEndpointServiceNames
	}
	return nil
}

type PrivateConnectivity struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The id of the region where the private connectivity applies.
	Region string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	// The AWS PrivateLink info.
	// This will only be set for an aws region.
	AwsPrivateLink *AWSPrivateLinkInfo `protobuf:"bytes,2,opt,name=aws_private_link,json=awsPrivateLink,proto3" json:"aws_private_link,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PrivateConnectivity) Reset() {
	*x = PrivateConnectivity{}
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrivateConnectivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateConnectivity) ProtoMessage() {}

func (x *PrivateConnectivity) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateConnectivity.ProtoReflect.Descriptor instead.
func (*PrivateConnectivity) Descriptor() ([]byte, []int) {
	return file_temporal_api_cloud_namespace_v1_message_proto_rawDescGZIP(), []int{8}
}

func (x *PrivateConnectivity) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *PrivateConnectivity) GetAwsPrivateLink() *AWSPrivateLinkInfo {
	if x != nil {
		return x.AwsPrivateLink
	}
	return nil
}

type Namespace struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The namespace identifier.
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The current version of the namespace specification.
	// The next update operation will have to include this version.
	ResourceVersion string `protobuf:"bytes,2,opt,name=resource_version,json=resourceVersion,proto3" json:"resource_version,omitempty"`
	// The namespace specification.
	Spec *NamespaceSpec `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
	// The current state of the namespace.
	// Deprecated: Not supported after 2024-10-01-00 api version. Use state instead.
	// temporal:versioning:max_version=2024-10-01-00
	//
	// Deprecated: Marked as deprecated in temporal/api/cloud/namespace/v1/message.proto.
	StateDeprecated string `protobuf:"bytes,4,opt,name=state_deprecated,json=stateDeprecated,proto3" json:"state_deprecated,omitempty"`
	// The current state of the namespace.
	// For any failed state, reach out to Temporal Cloud support for remediation.
	// temporal:versioning:min_version=2024-10-01-00
	// temporal:enums:replaces=state_deprecated
	State v1.ResourceState `protobuf:"varint,13,opt,name=state,proto3,enum=temporal.api.cloud.resource.v1.ResourceState" json:"state,omitempty"`
	// The id of the async operation that is creating/updating/deleting the namespace, if any.
	AsyncOperationId string `protobuf:"bytes,5,opt,name=async_operation_id,json=asyncOperationId,proto3" json:"async_operation_id,omitempty"`
	// The endpoints for the namespace.
	Endpoints *Endpoints `protobuf:"bytes,6,opt,name=endpoints,proto3" json:"endpoints,omitempty"`
	// The currently active region for the namespace.
	ActiveRegion string `protobuf:"bytes,7,opt,name=active_region,json=activeRegion,proto3" json:"active_region,omitempty"`
	// The limits set on the namespace currently.
	Limits *Limits `protobuf:"bytes,8,opt,name=limits,proto3" json:"limits,omitempty"`
	// The private connectivities for the namespace, if any.
	PrivateConnectivities []*PrivateConnectivity `protobuf:"bytes,9,rep,name=private_connectivities,json=privateConnectivities,proto3" json:"private_connectivities,omitempty"`
	// The date and time when the namespace was created.
	CreatedTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	// The date and time when the namespace was last modified.
	// Will not be set if the namespace has never been modified.
	LastModifiedTime *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=last_modified_time,json=lastModifiedTime,proto3" json:"last_modified_time,omitempty"`
	// The status of each region where the namespace is available.
	// The id of the region is the key and the status is the value of the map.
	RegionStatus  map[string]*NamespaceRegionStatus `protobuf:"bytes,12,rep,name=region_status,json=regionStatus,proto3" json:"region_status,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Namespace) Reset() {
	*x = Namespace{}
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Namespace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Namespace) ProtoMessage() {}

func (x *Namespace) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Namespace.ProtoReflect.Descriptor instead.
func (*Namespace) Descriptor() ([]byte, []int) {
	return file_temporal_api_cloud_namespace_v1_message_proto_rawDescGZIP(), []int{9}
}

func (x *Namespace) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Namespace) GetResourceVersion() string {
	if x != nil {
		return x.ResourceVersion
	}
	return ""
}

func (x *Namespace) GetSpec() *NamespaceSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// Deprecated: Marked as deprecated in temporal/api/cloud/namespace/v1/message.proto.
func (x *Namespace) GetStateDeprecated() string {
	if x != nil {
		return x.StateDeprecated
	}
	return ""
}

func (x *Namespace) GetState() v1.ResourceState {
	if x != nil {
		return x.State
	}
	return v1.ResourceState(0)
}

func (x *Namespace) GetAsyncOperationId() string {
	if x != nil {
		return x.AsyncOperationId
	}
	return ""
}

func (x *Namespace) GetEndpoints() *Endpoints {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *Namespace) GetActiveRegion() string {
	if x != nil {
		return x.ActiveRegion
	}
	return ""
}

func (x *Namespace) GetLimits() *Limits {
	if x != nil {
		return x.Limits
	}
	return nil
}

func (x *Namespace) GetPrivateConnectivities() []*PrivateConnectivity {
	if x != nil {
		return x.PrivateConnectivities
	}
	return nil
}

func (x *Namespace) GetCreatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedTime
	}
	return nil
}

func (x *Namespace) GetLastModifiedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastModifiedTime
	}
	return nil
}

func (x *Namespace) GetRegionStatus() map[string]*NamespaceRegionStatus {
	if x != nil {
		return x.RegionStatus
	}
	return nil
}

type NamespaceRegionStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The current state of the namespace region.
	// Possible values: adding, active, passive, removing, failed.
	// For any failed state, reach out to Temporal Cloud support for remediation.
	// Deprecated: Not supported after 2024-10-01-00 api version. Use state instead.
	// temporal:versioning:max_version=2024-10-01-00
	//
	// Deprecated: Marked as deprecated in temporal/api/cloud/namespace/v1/message.proto.
	StateDeprecated string `protobuf:"bytes,1,opt,name=state_deprecated,json=stateDeprecated,proto3" json:"state_deprecated,omitempty"`
	// The current state of the namespace region.
	// temporal:versioning:min_version=2024-10-01-00
	// temporal:enums:replaces=state_deprecated
	State NamespaceRegionStatus_State `protobuf:"varint,3,opt,name=state,proto3,enum=temporal.api.cloud.namespace.v1.NamespaceRegionStatus_State" json:"state,omitempty"`
	// The id of the async operation that is making changes to where the namespace is available, if any.
	AsyncOperationId string `protobuf:"bytes,2,opt,name=async_operation_id,json=asyncOperationId,proto3" json:"async_operation_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *NamespaceRegionStatus) Reset() {
	*x = NamespaceRegionStatus{}
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NamespaceRegionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceRegionStatus) ProtoMessage() {}

func (x *NamespaceRegionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceRegionStatus.ProtoReflect.Descriptor instead.
func (*NamespaceRegionStatus) Descriptor() ([]byte, []int) {
	return file_temporal_api_cloud_namespace_v1_message_proto_rawDescGZIP(), []int{10}
}

// Deprecated: Marked as deprecated in temporal/api/cloud/namespace/v1/message.proto.
func (x *NamespaceRegionStatus) GetStateDeprecated() string {
	if x != nil {
		return x.StateDeprecated
	}
	return ""
}

func (x *NamespaceRegionStatus) GetState() NamespaceRegionStatus_State {
	if x != nil {
		return x.State
	}
	return NamespaceRegionStatus_STATE_UNSPECIFIED
}

func (x *NamespaceRegionStatus) GetAsyncOperationId() string {
	if x != nil {
		return x.AsyncOperationId
	}
	return ""
}

type ExportSinkSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique name of the export sink, it can't be changed once set.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// A flag indicating whether the export sink is enabled or not.
	Enabled bool `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// The S3 configuration details when destination_type is S3.
	S3 *v11.S3Spec `protobuf:"bytes,3,opt,name=s3,proto3" json:"s3,omitempty"`
	// This is a feature under development. We will allow GCS sink support for GCP Namespaces.
	// The GCS configuration details when destination_type is GCS.
	Gcs           *v11.GCSSpec `protobuf:"bytes,4,opt,name=gcs,proto3" json:"gcs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExportSinkSpec) Reset() {
	*x = ExportSinkSpec{}
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportSinkSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportSinkSpec) ProtoMessage() {}

func (x *ExportSinkSpec) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportSinkSpec.ProtoReflect.Descriptor instead.
func (*ExportSinkSpec) Descriptor() ([]byte, []int) {
	return file_temporal_api_cloud_namespace_v1_message_proto_rawDescGZIP(), []int{11}
}

func (x *ExportSinkSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExportSinkSpec) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ExportSinkSpec) GetS3() *v11.S3Spec {
	if x != nil {
		return x.S3
	}
	return nil
}

func (x *ExportSinkSpec) GetGcs() *v11.GCSSpec {
	if x != nil {
		return x.Gcs
	}
	return nil
}

type ExportSink struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique name of the export sink.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The version of the export sink resource.
	ResourceVersion string `protobuf:"bytes,2,opt,name=resource_version,json=resourceVersion,proto3" json:"resource_version,omitempty"`
	// The current state of the export sink.
	State v1.ResourceState `protobuf:"varint,3,opt,name=state,proto3,enum=temporal.api.cloud.resource.v1.ResourceState" json:"state,omitempty"`
	// The specification details of the export sink.
	Spec *ExportSinkSpec `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	// The health status of the export sink.
	Health ExportSink_Health `protobuf:"varint,5,opt,name=health,proto3,enum=temporal.api.cloud.namespace.v1.ExportSink_Health" json:"health,omitempty"`
	// An error message describing any issues with the export sink, if applicable.
	ErrorMessage string `protobuf:"bytes,6,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// The timestamp of the latest successful data export.
	LatestDataExportTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=latest_data_export_time,json=latestDataExportTime,proto3" json:"latest_data_export_time,omitempty"`
	// The timestamp of the last health check performed on the export sink.
	LastHealthCheckTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=last_health_check_time,json=lastHealthCheckTime,proto3" json:"last_health_check_time,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ExportSink) Reset() {
	*x = ExportSink{}
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportSink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportSink) ProtoMessage() {}

func (x *ExportSink) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportSink.ProtoReflect.Descriptor instead.
func (*ExportSink) Descriptor() ([]byte, []int) {
	return file_temporal_api_cloud_namespace_v1_message_proto_rawDescGZIP(), []int{12}
}

func (x *ExportSink) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExportSink) GetResourceVersion() string {
	if x != nil {
		return x.ResourceVersion
	}
	return ""
}

func (x *ExportSink) GetState() v1.ResourceState {
	if x != nil {
		return x.State
	}
	return v1.ResourceState(0)
}

func (x *ExportSink) GetSpec() *ExportSinkSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *ExportSink) GetHealth() ExportSink_Health {
	if x != nil {
		return x.Health
	}
	return ExportSink_HEALTH_UNSPECIFIED
}

func (x *ExportSink) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *ExportSink) GetLatestDataExportTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LatestDataExportTime
	}
	return nil
}

func (x *ExportSink) GetLastHealthCheckTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastHealthCheckTime
	}
	return nil
}

var File_temporal_api_cloud_namespace_v1_message_proto protoreflect.FileDescriptor

const file_temporal_api_cloud_namespace_v1_message_proto_rawDesc = "" +
	"\n" +
	"-temporal/api/cloud/namespace/v1/message.proto\x12\x1ftemporal.api.cloud.namespace.v1\x1a,temporal/api/cloud/resource/v1/message.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a(temporal/api/cloud/sink/v1/message.proto\"\xc7\x01\n" +
	"\x15CertificateFilterSpec\x12\x1f\n" +
	"\vcommon_name\x18\x01 \x01(\tR\n" +
	"commonName\x12\"\n" +
	"\forganization\x18\x02 \x01(\tR\forganization\x12/\n" +
	"\x13organizational_unit\x18\x03 \x01(\tR\x12organizationalUnit\x128\n" +
	"\x18subject_alternative_name\x18\x04 \x01(\tR\x16subjectAlternativeName\"\x82\x02\n" +
	"\fMtlsAuthSpec\x12A\n" +
	"\x1daccepted_client_ca_deprecated\x18\x01 \x01(\tR\x1aacceptedClientCaDeprecated\x12,\n" +
	"\x12accepted_client_ca\x18\x04 \x01(\fR\x10acceptedClientCa\x12g\n" +
	"\x13certificate_filters\x18\x02 \x03(\v26.temporal.api.cloud.namespace.v1.CertificateFilterSpecR\x12certificateFilters\x12\x18\n" +
	"\aenabled\x18\x03 \x01(\bR\aenabled\"*\n" +
	"\x0eApiKeyAuthSpec\x12\x18\n" +
	"\aenabled\x18\x01 \x01(\bR\aenabled\"\xa2\x01\n" +
	"\x0fCodecServerSpec\x12\x1a\n" +
	"\bendpoint\x18\x01 \x01(\tR\bendpoint\x12*\n" +
	"\x11pass_access_token\x18\x02 \x01(\bR\x0fpassAccessToken\x12G\n" +
	" include_cross_origin_credentials\x18\x03 \x01(\bR\x1dincludeCrossOriginCredentials\"\xda\b\n" +
	"\rNamespaceSpec\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x18\n" +
	"\aregions\x18\x02 \x03(\tR\aregions\x12%\n" +
	"\x0eretention_days\x18\x03 \x01(\x05R\rretentionDays\x12J\n" +
	"\tmtls_auth\x18\x04 \x01(\v2-.temporal.api.cloud.namespace.v1.MtlsAuthSpecR\bmtlsAuth\x12Q\n" +
	"\fapi_key_auth\x18\a \x01(\v2/.temporal.api.cloud.namespace.v1.ApiKeyAuthSpecR\n" +
	"apiKeyAuth\x12\x88\x01\n" +
	"\x18custom_search_attributes\x18\x05 \x03(\v2J.temporal.api.cloud.namespace.v1.NamespaceSpec.CustomSearchAttributesEntryB\x02\x18\x01R\x16customSearchAttributes\x12q\n" +
	"\x11search_attributes\x18\b \x03(\v2D.temporal.api.cloud.namespace.v1.NamespaceSpec.SearchAttributesEntryR\x10searchAttributes\x12S\n" +
	"\fcodec_server\x18\x06 \x01(\v20.temporal.api.cloud.namespace.v1.CodecServerSpecR\vcodecServer\x1aI\n" +
	"\x1bCustomSearchAttributesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a\x87\x01\n" +
	"\x15SearchAttributesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12X\n" +
	"\x05value\x18\x02 \x01(\x0e2B.temporal.api.cloud.namespace.v1.NamespaceSpec.SearchAttributeTypeR\x05value:\x028\x01\"\xac\x02\n" +
	"\x13SearchAttributeType\x12%\n" +
	"!SEARCH_ATTRIBUTE_TYPE_UNSPECIFIED\x10\x00\x12\x1e\n" +
	"\x1aSEARCH_ATTRIBUTE_TYPE_TEXT\x10\x01\x12!\n" +
	"\x1dSEARCH_ATTRIBUTE_TYPE_KEYWORD\x10\x02\x12\x1d\n" +
	"\x19SEARCH_ATTRIBUTE_TYPE_INT\x10\x03\x12 \n" +
	"\x1cSEARCH_ATTRIBUTE_TYPE_DOUBLE\x10\x04\x12\x1e\n" +
	"\x1aSEARCH_ATTRIBUTE_TYPE_BOOL\x10\x05\x12\"\n" +
	"\x1eSEARCH_ATTRIBUTE_TYPE_DATETIME\x10\x06\x12&\n" +
	"\"SEARCH_ATTRIBUTE_TYPE_KEYWORD_LIST\x10\a\"{\n" +
	"\tEndpoints\x12\x1f\n" +
	"\vweb_address\x18\x01 \x01(\tR\n" +
	"webAddress\x12*\n" +
	"\x11mtls_grpc_address\x18\x02 \x01(\tR\x0fmtlsGrpcAddress\x12!\n" +
	"\fgrpc_address\x18\x03 \x01(\tR\vgrpcAddress\"A\n" +
	"\x06Limits\x127\n" +
	"\x18actions_per_second_limit\x18\x01 \x01(\x05R\x15actionsPerSecondLimit\"\x87\x01\n" +
	"\x12AWSPrivateLinkInfo\x124\n" +
	"\x16allowed_principal_arns\x18\x01 \x03(\tR\x14allowedPrincipalArns\x12;\n" +
	"\x1avpc_endpoint_service_names\x18\x02 \x03(\tR\x17vpcEndpointServiceNames\"\x8c\x01\n" +
	"\x13PrivateConnectivity\x12\x16\n" +
	"\x06region\x18\x01 \x01(\tR\x06region\x12]\n" +
	"\x10aws_private_link\x18\x02 \x01(\v23.temporal.api.cloud.namespace.v1.AWSPrivateLinkInfoR\x0eawsPrivateLink\"\xbc\a\n" +
	"\tNamespace\x12\x1c\n" +
	"\tnamespace\x18\x01 \x01(\tR\tnamespace\x12)\n" +
	"\x10resource_version\x18\x02 \x01(\tR\x0fresourceVersion\x12B\n" +
	"\x04spec\x18\x03 \x01(\v2..temporal.api.cloud.namespace.v1.NamespaceSpecR\x04spec\x12-\n" +
	"\x10state_deprecated\x18\x04 \x01(\tB\x02\x18\x01R\x0fstateDeprecated\x12C\n" +
	"\x05state\x18\r \x01(\x0e2-.temporal.api.cloud.resource.v1.ResourceStateR\x05state\x12,\n" +
	"\x12async_operation_id\x18\x05 \x01(\tR\x10asyncOperationId\x12H\n" +
	"\tendpoints\x18\x06 \x01(\v2*.temporal.api.cloud.namespace.v1.EndpointsR\tendpoints\x12#\n" +
	"\ractive_region\x18\a \x01(\tR\factiveRegion\x12?\n" +
	"\x06limits\x18\b \x01(\v2'.temporal.api.cloud.namespace.v1.LimitsR\x06limits\x12k\n" +
	"\x16private_connectivities\x18\t \x03(\v24.temporal.api.cloud.namespace.v1.PrivateConnectivityR\x15privateConnectivities\x12=\n" +
	"\fcreated_time\x18\n" +
	" \x01(\v2\x1a.google.protobuf.TimestampR\vcreatedTime\x12H\n" +
	"\x12last_modified_time\x18\v \x01(\v2\x1a.google.protobuf.TimestampR\x10lastModifiedTime\x12a\n" +
	"\rregion_status\x18\f \x03(\v2<.temporal.api.cloud.namespace.v1.Namespace.RegionStatusEntryR\fregionStatus\x1aw\n" +
	"\x11RegionStatusEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12L\n" +
	"\x05value\x18\x02 \x01(\v26.temporal.api.cloud.namespace.v1.NamespaceRegionStatusR\x05value:\x028\x01\"\xc5\x02\n" +
	"\x15NamespaceRegionStatus\x12-\n" +
	"\x10state_deprecated\x18\x01 \x01(\tB\x02\x18\x01R\x0fstateDeprecated\x12R\n" +
	"\x05state\x18\x03 \x01(\x0e2<.temporal.api.cloud.namespace.v1.NamespaceRegionStatus.StateR\x05state\x12,\n" +
	"\x12async_operation_id\x18\x02 \x01(\tR\x10asyncOperationId\"{\n" +
	"\x05State\x12\x15\n" +
	"\x11STATE_UNSPECIFIED\x10\x00\x12\x10\n" +
	"\fSTATE_ADDING\x10\x01\x12\x10\n" +
	"\fSTATE_ACTIVE\x10\x02\x12\x11\n" +
	"\rSTATE_PASSIVE\x10\x03\x12\x12\n" +
	"\x0eSTATE_REMOVING\x10\x04\x12\x10\n" +
	"\fSTATE_FAILED\x10\x05\"\xa9\x01\n" +
	"\x0eExportSinkSpec\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x18\n" +
	"\aenabled\x18\x02 \x01(\bR\aenabled\x122\n" +
	"\x02s3\x18\x03 \x01(\v2\".temporal.api.cloud.sink.v1.S3SpecR\x02s3\x125\n" +
	"\x03gcs\x18\x04 \x01(\v2#.temporal.api.cloud.sink.v1.GCSSpecR\x03gcs\"\xdb\x04\n" +
	"\n" +
	"ExportSink\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12)\n" +
	"\x10resource_version\x18\x02 \x01(\tR\x0fresourceVersion\x12C\n" +
	"\x05state\x18\x03 \x01(\x0e2-.temporal.api.cloud.resource.v1.ResourceStateR\x05state\x12C\n" +
	"\x04spec\x18\x04 \x01(\v2/.temporal.api.cloud.namespace.v1.ExportSinkSpecR\x04spec\x12J\n" +
	"\x06health\x18\x05 \x01(\x0e22.temporal.api.cloud.namespace.v1.ExportSink.HealthR\x06health\x12#\n" +
	"\rerror_message\x18\x06 \x01(\tR\ferrorMessage\x12Q\n" +
	"\x17latest_data_export_time\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\x14latestDataExportTime\x12O\n" +
	"\x16last_health_check_time\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\x13lastHealthCheckTime\"o\n" +
	"\x06Health\x12\x16\n" +
	"\x12HEALTH_UNSPECIFIED\x10\x00\x12\r\n" +
	"\tHEALTH_OK\x10\x01\x12\x19\n" +
	"\x15HEALTH_ERROR_INTERNAL\x10\x02\x12#\n" +
	"\x1fHEALTH_ERROR_USER_CONFIGURATION\x10\x03B\xb1\x01\n" +
	"\"io.temporal.api.cloud.namespace.v1B\fMessageProtoP\x01Z/go.temporal.io/api/cloud/namespace/v1;namespace\xaa\x02!Temporalio.Api.Cloud.Namespace.V1\xea\x02%Temporalio::Api::Cloud::Namespace::V1b\x06proto3"

var (
	file_temporal_api_cloud_namespace_v1_message_proto_rawDescOnce sync.Once
	file_temporal_api_cloud_namespace_v1_message_proto_rawDescData []byte
)

func file_temporal_api_cloud_namespace_v1_message_proto_rawDescGZIP() []byte {
	file_temporal_api_cloud_namespace_v1_message_proto_rawDescOnce.Do(func() {
		file_temporal_api_cloud_namespace_v1_message_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_temporal_api_cloud_namespace_v1_message_proto_rawDesc), len(file_temporal_api_cloud_namespace_v1_message_proto_rawDesc)))
	})
	return file_temporal_api_cloud_namespace_v1_message_proto_rawDescData
}

var file_temporal_api_cloud_namespace_v1_message_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_temporal_api_cloud_namespace_v1_message_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_temporal_api_cloud_namespace_v1_message_proto_goTypes = []any{
	(NamespaceSpec_SearchAttributeType)(0), // 0: temporal.api.cloud.namespace.v1.NamespaceSpec.SearchAttributeType
	(NamespaceRegionStatus_State)(0),       // 1: temporal.api.cloud.namespace.v1.NamespaceRegionStatus.State
	(ExportSink_Health)(0),                 // 2: temporal.api.cloud.namespace.v1.ExportSink.Health
	(*CertificateFilterSpec)(nil),          // 3: temporal.api.cloud.namespace.v1.CertificateFilterSpec
	(*MtlsAuthSpec)(nil),                   // 4: temporal.api.cloud.namespace.v1.MtlsAuthSpec
	(*ApiKeyAuthSpec)(nil),                 // 5: temporal.api.cloud.namespace.v1.ApiKeyAuthSpec
	(*CodecServerSpec)(nil),                // 6: temporal.api.cloud.namespace.v1.CodecServerSpec
	(*NamespaceSpec)(nil),                  // 7: temporal.api.cloud.namespace.v1.NamespaceSpec
	(*Endpoints)(nil),                      // 8: temporal.api.cloud.namespace.v1.Endpoints
	(*Limits)(nil),                         // 9: temporal.api.cloud.namespace.v1.Limits
	(*AWSPrivateLinkInfo)(nil),             // 10: temporal.api.cloud.namespace.v1.AWSPrivateLinkInfo
	(*PrivateConnectivity)(nil),            // 11: temporal.api.cloud.namespace.v1.PrivateConnectivity
	(*Namespace)(nil),                      // 12: temporal.api.cloud.namespace.v1.Namespace
	(*NamespaceRegionStatus)(nil),          // 13: temporal.api.cloud.namespace.v1.NamespaceRegionStatus
	(*ExportSinkSpec)(nil),                 // 14: temporal.api.cloud.namespace.v1.ExportSinkSpec
	(*ExportSink)(nil),                     // 15: temporal.api.cloud.namespace.v1.ExportSink
	nil,                                    // 16: temporal.api.cloud.namespace.v1.NamespaceSpec.CustomSearchAttributesEntry
	nil,                                    // 17: temporal.api.cloud.namespace.v1.NamespaceSpec.SearchAttributesEntry
	nil,                                    // 18: temporal.api.cloud.namespace.v1.Namespace.RegionStatusEntry
	(v1.ResourceState)(0),                  // 19: temporal.api.cloud.resource.v1.ResourceState
	(*timestamppb.Timestamp)(nil),          // 20: google.protobuf.Timestamp
	(*v11.S3Spec)(nil),                     // 21: temporal.api.cloud.sink.v1.S3Spec
	(*v11.GCSSpec)(nil),                    // 22: temporal.api.cloud.sink.v1.GCSSpec
}
var file_temporal_api_cloud_namespace_v1_message_proto_depIdxs = []int32{
	3,  // 0: temporal.api.cloud.namespace.v1.MtlsAuthSpec.certificate_filters:type_name -> temporal.api.cloud.namespace.v1.CertificateFilterSpec
	4,  // 1: temporal.api.cloud.namespace.v1.NamespaceSpec.mtls_auth:type_name -> temporal.api.cloud.namespace.v1.MtlsAuthSpec
	5,  // 2: temporal.api.cloud.namespace.v1.NamespaceSpec.api_key_auth:type_name -> temporal.api.cloud.namespace.v1.ApiKeyAuthSpec
	16, // 3: temporal.api.cloud.namespace.v1.NamespaceSpec.custom_search_attributes:type_name -> temporal.api.cloud.namespace.v1.NamespaceSpec.CustomSearchAttributesEntry
	17, // 4: temporal.api.cloud.namespace.v1.NamespaceSpec.search_attributes:type_name -> temporal.api.cloud.namespace.v1.NamespaceSpec.SearchAttributesEntry
	6,  // 5: temporal.api.cloud.namespace.v1.NamespaceSpec.codec_server:type_name -> temporal.api.cloud.namespace.v1.CodecServerSpec
	10, // 6: temporal.api.cloud.namespace.v1.PrivateConnectivity.aws_private_link:type_name -> temporal.api.cloud.namespace.v1.AWSPrivateLinkInfo
	7,  // 7: temporal.api.cloud.namespace.v1.Namespace.spec:type_name -> temporal.api.cloud.namespace.v1.NamespaceSpec
	19, // 8: temporal.api.cloud.namespace.v1.Namespace.state:type_name -> temporal.api.cloud.resource.v1.ResourceState
	8,  // 9: temporal.api.cloud.namespace.v1.Namespace.endpoints:type_name -> temporal.api.cloud.namespace.v1.Endpoints
	9,  // 10: temporal.api.cloud.namespace.v1.Namespace.limits:type_name -> temporal.api.cloud.namespace.v1.Limits
	11, // 11: temporal.api.cloud.namespace.v1.Namespace.private_connectivities:type_name -> temporal.api.cloud.namespace.v1.PrivateConnectivity
	20, // 12: temporal.api.cloud.namespace.v1.Namespace.created_time:type_name -> google.protobuf.Timestamp
	20, // 13: temporal.api.cloud.namespace.v1.Namespace.last_modified_time:type_name -> google.protobuf.Timestamp
	18, // 14: temporal.api.cloud.namespace.v1.Namespace.region_status:type_name -> temporal.api.cloud.namespace.v1.Namespace.RegionStatusEntry
	1,  // 15: temporal.api.cloud.namespace.v1.NamespaceRegionStatus.state:type_name -> temporal.api.cloud.namespace.v1.NamespaceRegionStatus.State
	21, // 16: temporal.api.cloud.namespace.v1.ExportSinkSpec.s3:type_name -> temporal.api.cloud.sink.v1.S3Spec
	22, // 17: temporal.api.cloud.namespace.v1.ExportSinkSpec.gcs:type_name -> temporal.api.cloud.sink.v1.GCSSpec
	19, // 18: temporal.api.cloud.namespace.v1.ExportSink.state:type_name -> temporal.api.cloud.resource.v1.ResourceState
	14, // 19: temporal.api.cloud.namespace.v1.ExportSink.spec:type_name -> temporal.api.cloud.namespace.v1.ExportSinkSpec
	2,  // 20: temporal.api.cloud.namespace.v1.ExportSink.health:type_name -> temporal.api.cloud.namespace.v1.ExportSink.Health
	20, // 21: temporal.api.cloud.namespace.v1.ExportSink.latest_data_export_time:type_name -> google.protobuf.Timestamp
	20, // 22: temporal.api.cloud.namespace.v1.ExportSink.last_health_check_time:type_name -> google.protobuf.Timestamp
	0,  // 23: temporal.api.cloud.namespace.v1.NamespaceSpec.SearchAttributesEntry.value:type_name -> temporal.api.cloud.namespace.v1.NamespaceSpec.SearchAttributeType
	13, // 24: temporal.api.cloud.namespace.v1.Namespace.RegionStatusEntry.value:type_name -> temporal.api.cloud.namespace.v1.NamespaceRegionStatus
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_temporal_api_cloud_namespace_v1_message_proto_init() }
func file_temporal_api_cloud_namespace_v1_message_proto_init() {
	if File_temporal_api_cloud_namespace_v1_message_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_temporal_api_cloud_namespace_v1_message_proto_rawDesc), len(file_temporal_api_cloud_namespace_v1_message_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_temporal_api_cloud_namespace_v1_message_proto_goTypes,
		DependencyIndexes: file_temporal_api_cloud_namespace_v1_message_proto_depIdxs,
		EnumInfos:         file_temporal_api_cloud_namespace_v1_message_proto_enumTypes,
		MessageInfos:      file_temporal_api_cloud_namespace_v1_message_proto_msgTypes,
	}.Build()
	File_temporal_api_cloud_namespace_v1_message_proto = out.File
	file_temporal_api_cloud_namespace_v1_message_proto_goTypes = nil
	file_temporal_api_cloud_namespace_v1_message_proto_depIdxs = nil
}

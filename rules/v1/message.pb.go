// Code generated by protoc-gen-go. DO NOT EDIT.
// plugins:
// 	protoc-gen-go
// 	protoc
// source: temporal/api/rules/v1/message.proto

package rules

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WorkflowRuleAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Supported actions.
	//
	// Types that are assignable to Variant:
	//
	//	*WorkflowRuleAction_ActivityPause
	Variant isWorkflowRuleAction_Variant `protobuf_oneof:"variant"`
}

func (x *WorkflowRuleAction) Reset() {
	*x = WorkflowRuleAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_temporal_api_rules_v1_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowRuleAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowRuleAction) ProtoMessage() {}

func (x *WorkflowRuleAction) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_rules_v1_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowRuleAction.ProtoReflect.Descriptor instead.
func (*WorkflowRuleAction) Descriptor() ([]byte, []int) {
	return file_temporal_api_rules_v1_message_proto_rawDescGZIP(), []int{0}
}

func (m *WorkflowRuleAction) GetVariant() isWorkflowRuleAction_Variant {
	if m != nil {
		return m.Variant
	}
	return nil
}

func (x *WorkflowRuleAction) GetActivityPause() *WorkflowRuleAction_ActionActivityPause {
	if x, ok := x.GetVariant().(*WorkflowRuleAction_ActivityPause); ok {
		return x.ActivityPause
	}
	return nil
}

type isWorkflowRuleAction_Variant interface {
	isWorkflowRuleAction_Variant()
}

type WorkflowRuleAction_ActivityPause struct {
	ActivityPause *WorkflowRuleAction_ActionActivityPause `protobuf:"bytes,1,opt,name=activity_pause,json=activityPause,proto3,oneof"`
}

func (*WorkflowRuleAction_ActivityPause) isWorkflowRuleAction_Variant() {}

type WorkflowRuleSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the new workflow rule. Must be unique within the namespace.
	// Can be set by the user, and can have business meaning.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Specifies how the rule should be triggered and evaluated.
	// Currently, only "activity start" type is supported.
	//
	// Types that are assignable to Trigger:
	//
	//	*WorkflowRuleSpec_ActivityStart
	Trigger isWorkflowRuleSpec_Trigger `protobuf_oneof:"trigger"`
	// Restricted Visibility query.
	// This query is used to filter workflows in this namespace to which this rule should apply.
	// It is applied to any running workflow each time a triggering event occurs, before the trigger predicate is evaluated.
	// The following workflow attributes are supported:
	// - WorkflowType
	// - WorkflowId
	// - StartTime
	// - ExecutionStatus
	VisibilityQuery string `protobuf:"bytes,3,opt,name=visibility_query,json=visibilityQuery,proto3" json:"visibility_query,omitempty"`
	// WorkflowRuleAction to be taken when the rule is triggered and predicate is matched.
	Actions []*WorkflowRuleAction `protobuf:"bytes,4,rep,name=actions,proto3" json:"actions,omitempty"`
	// Expiration time of the rule. After this time, the rule will be deleted.
	// Can be empty if the rule should never expire.
	ExpirationTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=expiration_time,json=expirationTime,proto3" json:"expiration_time,omitempty"`
}

func (x *WorkflowRuleSpec) Reset() {
	*x = WorkflowRuleSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_temporal_api_rules_v1_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowRuleSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowRuleSpec) ProtoMessage() {}

func (x *WorkflowRuleSpec) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_rules_v1_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowRuleSpec.ProtoReflect.Descriptor instead.
func (*WorkflowRuleSpec) Descriptor() ([]byte, []int) {
	return file_temporal_api_rules_v1_message_proto_rawDescGZIP(), []int{1}
}

func (x *WorkflowRuleSpec) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (m *WorkflowRuleSpec) GetTrigger() isWorkflowRuleSpec_Trigger {
	if m != nil {
		return m.Trigger
	}
	return nil
}

func (x *WorkflowRuleSpec) GetActivityStart() *WorkflowRuleSpec_ActivityStartingTrigger {
	if x, ok := x.GetTrigger().(*WorkflowRuleSpec_ActivityStart); ok {
		return x.ActivityStart
	}
	return nil
}

func (x *WorkflowRuleSpec) GetVisibilityQuery() string {
	if x != nil {
		return x.VisibilityQuery
	}
	return ""
}

func (x *WorkflowRuleSpec) GetActions() []*WorkflowRuleAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *WorkflowRuleSpec) GetExpirationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationTime
	}
	return nil
}

type isWorkflowRuleSpec_Trigger interface {
	isWorkflowRuleSpec_Trigger()
}

type WorkflowRuleSpec_ActivityStart struct {
	ActivityStart *WorkflowRuleSpec_ActivityStartingTrigger `protobuf:"bytes,2,opt,name=activity_start,json=activityStart,proto3,oneof"`
}

func (*WorkflowRuleSpec_ActivityStart) isWorkflowRuleSpec_Trigger() {}

// WorkflowRule describes a rule that can be applied to any workflow in this namespace.
type WorkflowRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Rule creation time.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Rule specification
	Spec *WorkflowRuleSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	// Identity of the actor that created the rule
	// (-- api-linter: core::0140::prepositions=disabled
	//
	//	aip.dev/not-precedent: It is better reflect the intent this way, we will also have updated_by. --)
	//
	// (-- api-linter: core::0142::time-field-names=disabled
	//
	//	aip.dev/not-precedent: Same as above. All other options sounds clumsy --)
	CreatedByIdentity string `protobuf:"bytes,3,opt,name=created_by_identity,json=createdByIdentity,proto3" json:"created_by_identity,omitempty"`
	// Rule description.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *WorkflowRule) Reset() {
	*x = WorkflowRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_temporal_api_rules_v1_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowRule) ProtoMessage() {}

func (x *WorkflowRule) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_rules_v1_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowRule.ProtoReflect.Descriptor instead.
func (*WorkflowRule) Descriptor() ([]byte, []int) {
	return file_temporal_api_rules_v1_message_proto_rawDescGZIP(), []int{2}
}

func (x *WorkflowRule) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *WorkflowRule) GetSpec() *WorkflowRuleSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *WorkflowRule) GetCreatedByIdentity() string {
	if x != nil {
		return x.CreatedByIdentity
	}
	return ""
}

func (x *WorkflowRule) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type WorkflowRuleAction_ActionActivityPause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WorkflowRuleAction_ActionActivityPause) Reset() {
	*x = WorkflowRuleAction_ActionActivityPause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_temporal_api_rules_v1_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowRuleAction_ActionActivityPause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowRuleAction_ActionActivityPause) ProtoMessage() {}

func (x *WorkflowRuleAction_ActionActivityPause) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_rules_v1_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowRuleAction_ActionActivityPause.ProtoReflect.Descriptor instead.
func (*WorkflowRuleAction_ActionActivityPause) Descriptor() ([]byte, []int) {
	return file_temporal_api_rules_v1_message_proto_rawDescGZIP(), []int{0, 0}
}

// Activity trigger will be triggered when an activity is about to start.
type WorkflowRuleSpec_ActivityStartingTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Activity predicate is a SQL-like string filter parameter.
	// It is used to match against workflow data.
	// The following activity attributes are supported as part of the predicate:
	// - ActivityType: An Activity Type is the mapping of a name to an Activity Definition..
	// - ActivityId: The ID of the activity.
	// - ActivityAttempt: The number attempts of the activity.
	// - BackoffInterval: The current amount of time between scheduled attempts of the activity.
	// - ActivityStatus: The status of the activity. Can be one of "Scheduled", "Started", "Paused".
	// - TaskQueue: The name of the task queue the workflow specified that the activity should run on.
	// Activity predicate support the following operators:
	//   - =, !=, >, >=, <, <=
	//   - AND, OR, ()
	//   - BETWEEN ... AND
	//     STARTS_WITH
	Predicate string `protobuf:"bytes,1,opt,name=predicate,proto3" json:"predicate,omitempty"`
}

func (x *WorkflowRuleSpec_ActivityStartingTrigger) Reset() {
	*x = WorkflowRuleSpec_ActivityStartingTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_temporal_api_rules_v1_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowRuleSpec_ActivityStartingTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowRuleSpec_ActivityStartingTrigger) ProtoMessage() {}

func (x *WorkflowRuleSpec_ActivityStartingTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_rules_v1_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowRuleSpec_ActivityStartingTrigger.ProtoReflect.Descriptor instead.
func (*WorkflowRuleSpec_ActivityStartingTrigger) Descriptor() ([]byte, []int) {
	return file_temporal_api_rules_v1_message_proto_rawDescGZIP(), []int{1, 0}
}

func (x *WorkflowRuleSpec_ActivityStartingTrigger) GetPredicate() string {
	if x != nil {
		return x.Predicate
	}
	return ""
}

var File_temporal_api_rules_v1_message_proto protoreflect.FileDescriptor

var file_temporal_api_rules_v1_message_proto_rawDesc = []byte{
	0x0a, 0x23, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9e, 0x01,
	0x0a, 0x12, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x66, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x74,
	0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x61, 0x75, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x61, 0x75, 0x73, 0x65, 0x1a, 0x15, 0x0a, 0x13,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x61,
	0x75, 0x73, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x22, 0x85,
	0x03, 0x0a, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x68, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x74, 0x65,
	0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0d,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x29, 0x0a,
	0x10, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x65, 0x6d, 0x70,
	0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a,
	0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x1a, 0x37, 0x0a, 0x17, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x22, 0xda, 0x01, 0x0a, 0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x84, 0x01, 0x0a, 0x18, 0x69, 0x6f, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f,
	0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x42, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x21, 0x67, 0x6f, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6f,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0xaa, 0x02, 0x17, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x69, 0x6f,
	0x2e, 0x41, 0x70, 0x69, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x56, 0x31, 0xea, 0x02, 0x1a,
	0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x69, 0x6f, 0x3a, 0x3a, 0x41, 0x70, 0x69, 0x3a,
	0x3a, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_temporal_api_rules_v1_message_proto_rawDescOnce sync.Once
	file_temporal_api_rules_v1_message_proto_rawDescData = file_temporal_api_rules_v1_message_proto_rawDesc
)

func file_temporal_api_rules_v1_message_proto_rawDescGZIP() []byte {
	file_temporal_api_rules_v1_message_proto_rawDescOnce.Do(func() {
		file_temporal_api_rules_v1_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_temporal_api_rules_v1_message_proto_rawDescData)
	})
	return file_temporal_api_rules_v1_message_proto_rawDescData
}

var file_temporal_api_rules_v1_message_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_temporal_api_rules_v1_message_proto_goTypes = []interface{}{
	(*WorkflowRuleAction)(nil),                       // 0: temporal.api.rules.v1.WorkflowRuleAction
	(*WorkflowRuleSpec)(nil),                         // 1: temporal.api.rules.v1.WorkflowRuleSpec
	(*WorkflowRule)(nil),                             // 2: temporal.api.rules.v1.WorkflowRule
	(*WorkflowRuleAction_ActionActivityPause)(nil),   // 3: temporal.api.rules.v1.WorkflowRuleAction.ActionActivityPause
	(*WorkflowRuleSpec_ActivityStartingTrigger)(nil), // 4: temporal.api.rules.v1.WorkflowRuleSpec.ActivityStartingTrigger
	(*timestamppb.Timestamp)(nil),                    // 5: google.protobuf.Timestamp
}
var file_temporal_api_rules_v1_message_proto_depIdxs = []int32{
	3, // 0: temporal.api.rules.v1.WorkflowRuleAction.activity_pause:type_name -> temporal.api.rules.v1.WorkflowRuleAction.ActionActivityPause
	4, // 1: temporal.api.rules.v1.WorkflowRuleSpec.activity_start:type_name -> temporal.api.rules.v1.WorkflowRuleSpec.ActivityStartingTrigger
	0, // 2: temporal.api.rules.v1.WorkflowRuleSpec.actions:type_name -> temporal.api.rules.v1.WorkflowRuleAction
	5, // 3: temporal.api.rules.v1.WorkflowRuleSpec.expiration_time:type_name -> google.protobuf.Timestamp
	5, // 4: temporal.api.rules.v1.WorkflowRule.create_time:type_name -> google.protobuf.Timestamp
	1, // 5: temporal.api.rules.v1.WorkflowRule.spec:type_name -> temporal.api.rules.v1.WorkflowRuleSpec
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_temporal_api_rules_v1_message_proto_init() }
func file_temporal_api_rules_v1_message_proto_init() {
	if File_temporal_api_rules_v1_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_temporal_api_rules_v1_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowRuleAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_temporal_api_rules_v1_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowRuleSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_temporal_api_rules_v1_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_temporal_api_rules_v1_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowRuleAction_ActionActivityPause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_temporal_api_rules_v1_message_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowRuleSpec_ActivityStartingTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_temporal_api_rules_v1_message_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*WorkflowRuleAction_ActivityPause)(nil),
	}
	file_temporal_api_rules_v1_message_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*WorkflowRuleSpec_ActivityStart)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_temporal_api_rules_v1_message_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_temporal_api_rules_v1_message_proto_goTypes,
		DependencyIndexes: file_temporal_api_rules_v1_message_proto_depIdxs,
		MessageInfos:      file_temporal_api_rules_v1_message_proto_msgTypes,
	}.Build()
	File_temporal_api_rules_v1_message_proto = out.File
	file_temporal_api_rules_v1_message_proto_rawDesc = nil
	file_temporal_api_rules_v1_message_proto_goTypes = nil
	file_temporal_api_rules_v1_message_proto_depIdxs = nil
}

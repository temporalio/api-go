name: "Create a release"

on:
  workflow_call:
    inputs:
      ref:
        description: "Ref to be tagged"
        required: true
        type: string
        default: master
      tag:
        description: "Tag for new version (v1.23.4)"
        required: true
        type: string
      base_tag:
        description: "Base tag to generate commit list for release notes"
        required: false
        type: string
    secrets:
      TEMPORAL_CICD_APP_ID:
        required: true
      TEMPORAL_CICD_PRIVATE_KEY:
        required: true

jobs:
  create-release:
    name: "Create a release"
    runs-on: ubuntu-latest

    steps:
      - name: Generate token
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.TEMPORAL_CICD_APP_ID }}
          private-key: ${{ secrets.TEMPORAL_CICD_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: temporalio/api-go
          ref: ${{ github.event.inputs.ref }}
          token: ${{ steps.generate_token.outputs.token }}
          persist-credentials: true
          fetch-depth: 0
          fetch-tags: true
          submodules: true

      - name: Validate input
        env:
          REF: ${{ github.event.inputs.ref }}
          TAG: ${{ github.event.inputs.tag }}
          BASE_TAG: ${{ github.event.inputs.base_tag }}
        run: |
          if ! [[ "${TAG}" =~ ^v.* ]]; then
            echo "::error::Tag is not prefixed with 'v'"
            exit 1
          fi

          if [[ -n "$(git tag -l "$TAG")" && "$(git rev-parse "$TAG")" != "$(git rev-parse HEAD)" ]]; then
            echo "::error::Tag already exists and it doesn't reference $REF"
            exit 1
          fi

          if [[ -z "$BASE_TAG" || -z "$(git tag -l "$BASE_TAG")" ]]; then
            echo "::error::Base tag not specified or does not exist"
            exit 1
          fi

      - name: Set up Github credentials
        run: |
          git config --local user.name 'Temporal Data'
          git config --local user.email 'commander-data@temporal.io'

      - name: Create release
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
          REF: ${{ github.event.inputs.ref }}
          TAG: ${{ github.event.inputs.tag }}
          BASE_TAG: ${{ github.event.inputs.base_tag }}
        run: |
          gh repo set-default ${{ github.repository }}
          gh release create "$TAG" --target "$REF" --latest --generate-notes --notes-start-tag "$BASE_TAG"

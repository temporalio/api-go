// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: version/v1/message.proto

package version

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TODO: Rename to SupportedSDKVersions
// SupportedClientVersions contains the support versions for SDK.
type SupportedClientVersions struct {
	GoSdk   string `protobuf:"bytes,1,opt,name=go_sdk,json=goSdk,proto3" json:"go_sdk,omitempty"`
	JavaSdk string `protobuf:"bytes,2,opt,name=java_sdk,json=javaSdk,proto3" json:"java_sdk,omitempty"`
}

func (m *SupportedClientVersions) Reset()      { *m = SupportedClientVersions{} }
func (*SupportedClientVersions) ProtoMessage() {}
func (*SupportedClientVersions) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dd9903e0572e875, []int{0}
}
func (m *SupportedClientVersions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SupportedClientVersions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SupportedClientVersions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SupportedClientVersions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SupportedClientVersions.Merge(m, src)
}
func (m *SupportedClientVersions) XXX_Size() int {
	return m.Size()
}
func (m *SupportedClientVersions) XXX_DiscardUnknown() {
	xxx_messageInfo_SupportedClientVersions.DiscardUnknown(m)
}

var xxx_messageInfo_SupportedClientVersions proto.InternalMessageInfo

func (m *SupportedClientVersions) GetGoSdk() string {
	if m != nil {
		return m.GoSdk
	}
	return ""
}

func (m *SupportedClientVersions) GetJavaSdk() string {
	if m != nil {
		return m.JavaSdk
	}
	return ""
}

type WorkerVersionInfo struct {
	// TODO: implementation
	Impl           string `protobuf:"bytes,1,opt,name=impl,proto3" json:"impl,omitempty"`
	FeatureVersion string `protobuf:"bytes,2,opt,name=feature_version,json=featureVersion,proto3" json:"feature_version,omitempty"`
}

func (m *WorkerVersionInfo) Reset()      { *m = WorkerVersionInfo{} }
func (*WorkerVersionInfo) ProtoMessage() {}
func (*WorkerVersionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dd9903e0572e875, []int{1}
}
func (m *WorkerVersionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkerVersionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkerVersionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkerVersionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkerVersionInfo.Merge(m, src)
}
func (m *WorkerVersionInfo) XXX_Size() int {
	return m.Size()
}
func (m *WorkerVersionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkerVersionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_WorkerVersionInfo proto.InternalMessageInfo

func (m *WorkerVersionInfo) GetImpl() string {
	if m != nil {
		return m.Impl
	}
	return ""
}

func (m *WorkerVersionInfo) GetFeatureVersion() string {
	if m != nil {
		return m.FeatureVersion
	}
	return ""
}

func init() {
	proto.RegisterType((*SupportedClientVersions)(nil), "version.v1.SupportedClientVersions")
	proto.RegisterType((*WorkerVersionInfo)(nil), "version.v1.WorkerVersionInfo")
}

func init() { proto.RegisterFile("version/v1/message.proto", fileDescriptor_6dd9903e0572e875) }

var fileDescriptor_6dd9903e0572e875 = []byte{
	// 282 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x28, 0x4b, 0x2d, 0x2a,
	0xce, 0xcc, 0xcf, 0xd3, 0x2f, 0x33, 0xd4, 0xcf, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0xd5, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x82, 0xca, 0xe8, 0x95, 0x19, 0x2a, 0x79, 0x73, 0x89, 0x07,
	0x97, 0x16, 0x14, 0xe4, 0x17, 0x95, 0xa4, 0xa6, 0x38, 0xe7, 0x64, 0xa6, 0xe6, 0x95, 0x84, 0x41,
	0x24, 0x8b, 0x85, 0x44, 0xb9, 0xd8, 0xd2, 0xf3, 0xe3, 0x8b, 0x53, 0xb2, 0x25, 0x18, 0x15, 0x18,
	0x35, 0x38, 0x83, 0x58, 0xd3, 0xf3, 0x83, 0x53, 0xb2, 0x85, 0x24, 0xb9, 0x38, 0xb2, 0x12, 0xcb,
	0x12, 0xc1, 0x12, 0x4c, 0x60, 0x09, 0x76, 0x10, 0x3f, 0x38, 0x25, 0x5b, 0x29, 0x80, 0x4b, 0x30,
	0x3c, 0xbf, 0x28, 0x3b, 0xb5, 0x08, 0x6a, 0x86, 0x67, 0x5e, 0x5a, 0xbe, 0x90, 0x10, 0x17, 0x4b,
	0x66, 0x6e, 0x41, 0x0e, 0xd4, 0x10, 0x30, 0x5b, 0x48, 0x9d, 0x8b, 0x3f, 0x2d, 0x35, 0xb1, 0xa4,
	0xb4, 0x28, 0x35, 0x1e, 0xea, 0x16, 0xa8, 0x51, 0x7c, 0x50, 0x61, 0xa8, 0x01, 0x4e, 0x53, 0x18,
	0x2f, 0x3c, 0x94, 0x63, 0xb8, 0xf1, 0x50, 0x8e, 0xe1, 0xc3, 0x43, 0x39, 0xc6, 0x86, 0x47, 0x72,
	0x8c, 0x2b, 0x1e, 0xc9, 0x31, 0x9e, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47,
	0x72, 0x8c, 0x2f, 0x1e, 0xc9, 0x31, 0x7c, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85,
	0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31, 0x70, 0xc9, 0x64, 0xe6, 0xeb, 0x95, 0xa4, 0xe6, 0x16,
	0xe4, 0x17, 0x25, 0xe6, 0x40, 0x3c, 0xad, 0x87, 0xf0, 0xb3, 0x13, 0x8f, 0x2f, 0x24, 0x38, 0x02,
	0x40, 0x12, 0x01, 0x8c, 0x51, 0x06, 0xe9, 0x48, 0xaa, 0x33, 0xf3, 0xf5, 0x61, 0x6c, 0x5d, 0xb0,
	0x4e, 0x7d, 0x44, 0x38, 0x5a, 0x43, 0x99, 0x49, 0x6c, 0x60, 0x19, 0x63, 0x40, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x5c, 0x5f, 0xbc, 0x20, 0x64, 0x01, 0x00, 0x00,
}

func (this *SupportedClientVersions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SupportedClientVersions)
	if !ok {
		that2, ok := that.(SupportedClientVersions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GoSdk != that1.GoSdk {
		return false
	}
	if this.JavaSdk != that1.JavaSdk {
		return false
	}
	return true
}
func (this *WorkerVersionInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkerVersionInfo)
	if !ok {
		that2, ok := that.(WorkerVersionInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Impl != that1.Impl {
		return false
	}
	if this.FeatureVersion != that1.FeatureVersion {
		return false
	}
	return true
}
func (this *SupportedClientVersions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&version.SupportedClientVersions{")
	s = append(s, "GoSdk: "+fmt.Sprintf("%#v", this.GoSdk)+",\n")
	s = append(s, "JavaSdk: "+fmt.Sprintf("%#v", this.JavaSdk)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WorkerVersionInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&version.WorkerVersionInfo{")
	s = append(s, "Impl: "+fmt.Sprintf("%#v", this.Impl)+",\n")
	s = append(s, "FeatureVersion: "+fmt.Sprintf("%#v", this.FeatureVersion)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMessage(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *SupportedClientVersions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SupportedClientVersions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SupportedClientVersions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.JavaSdk) > 0 {
		i -= len(m.JavaSdk)
		copy(dAtA[i:], m.JavaSdk)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.JavaSdk)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GoSdk) > 0 {
		i -= len(m.GoSdk)
		copy(dAtA[i:], m.GoSdk)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.GoSdk)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkerVersionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkerVersionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkerVersionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeatureVersion) > 0 {
		i -= len(m.FeatureVersion)
		copy(dAtA[i:], m.FeatureVersion)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.FeatureVersion)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Impl) > 0 {
		i -= len(m.Impl)
		copy(dAtA[i:], m.Impl)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Impl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SupportedClientVersions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GoSdk)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.JavaSdk)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *WorkerVersionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Impl)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.FeatureVersion)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SupportedClientVersions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SupportedClientVersions{`,
		`GoSdk:` + fmt.Sprintf("%v", this.GoSdk) + `,`,
		`JavaSdk:` + fmt.Sprintf("%v", this.JavaSdk) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkerVersionInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkerVersionInfo{`,
		`Impl:` + fmt.Sprintf("%v", this.Impl) + `,`,
		`FeatureVersion:` + fmt.Sprintf("%v", this.FeatureVersion) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SupportedClientVersions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SupportedClientVersions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SupportedClientVersions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoSdk", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoSdk = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JavaSdk", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JavaSdk = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkerVersionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkerVersionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkerVersionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Impl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Impl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeatureVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)

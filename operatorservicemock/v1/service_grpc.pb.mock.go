// The MIT License
//
// Copyright (c) 2022 Temporal Technologies Inc.  All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: operatorservice/v1/service_grpc.pb.go

// Package operatorservicemock is a generated GoMock package.
package operatorservicemock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	operatorservice "go.temporal.io/api/operatorservice/v1"
	grpc "google.golang.org/grpc"
)

// MockOperatorServiceClient is a mock of OperatorServiceClient interface.
type MockOperatorServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockOperatorServiceClientMockRecorder
}

// MockOperatorServiceClientMockRecorder is the mock recorder for MockOperatorServiceClient.
type MockOperatorServiceClientMockRecorder struct {
	mock *MockOperatorServiceClient
}

// NewMockOperatorServiceClient creates a new mock instance.
func NewMockOperatorServiceClient(ctrl *gomock.Controller) *MockOperatorServiceClient {
	mock := &MockOperatorServiceClient{ctrl: ctrl}
	mock.recorder = &MockOperatorServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperatorServiceClient) EXPECT() *MockOperatorServiceClientMockRecorder {
	return m.recorder
}

// AddOrUpdateRemoteCluster mocks base method.
func (m *MockOperatorServiceClient) AddOrUpdateRemoteCluster(ctx context.Context, in *operatorservice.AddOrUpdateRemoteClusterRequest, opts ...grpc.CallOption) (*operatorservice.AddOrUpdateRemoteClusterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddOrUpdateRemoteCluster", varargs...)
	ret0, _ := ret[0].(*operatorservice.AddOrUpdateRemoteClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOrUpdateRemoteCluster indicates an expected call of AddOrUpdateRemoteCluster.
func (mr *MockOperatorServiceClientMockRecorder) AddOrUpdateRemoteCluster(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrUpdateRemoteCluster", reflect.TypeOf((*MockOperatorServiceClient)(nil).AddOrUpdateRemoteCluster), varargs...)
}

// AddSearchAttributes mocks base method.
func (m *MockOperatorServiceClient) AddSearchAttributes(ctx context.Context, in *operatorservice.AddSearchAttributesRequest, opts ...grpc.CallOption) (*operatorservice.AddSearchAttributesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddSearchAttributes", varargs...)
	ret0, _ := ret[0].(*operatorservice.AddSearchAttributesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSearchAttributes indicates an expected call of AddSearchAttributes.
func (mr *MockOperatorServiceClientMockRecorder) AddSearchAttributes(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSearchAttributes", reflect.TypeOf((*MockOperatorServiceClient)(nil).AddSearchAttributes), varargs...)
}

// CreateNexusIncomingService mocks base method.
func (m *MockOperatorServiceClient) CreateNexusIncomingService(ctx context.Context, in *operatorservice.CreateNexusIncomingServiceRequest, opts ...grpc.CallOption) (*operatorservice.CreateNexusIncomingServiceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateNexusIncomingService", varargs...)
	ret0, _ := ret[0].(*operatorservice.CreateNexusIncomingServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNexusIncomingService indicates an expected call of CreateNexusIncomingService.
func (mr *MockOperatorServiceClientMockRecorder) CreateNexusIncomingService(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNexusIncomingService", reflect.TypeOf((*MockOperatorServiceClient)(nil).CreateNexusIncomingService), varargs...)
}

// CreateNexusOutgoingService mocks base method.
func (m *MockOperatorServiceClient) CreateNexusOutgoingService(ctx context.Context, in *operatorservice.CreateNexusOutgoingServiceRequest, opts ...grpc.CallOption) (*operatorservice.CreateNexusOutgoingServiceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateNexusOutgoingService", varargs...)
	ret0, _ := ret[0].(*operatorservice.CreateNexusOutgoingServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNexusOutgoingService indicates an expected call of CreateNexusOutgoingService.
func (mr *MockOperatorServiceClientMockRecorder) CreateNexusOutgoingService(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNexusOutgoingService", reflect.TypeOf((*MockOperatorServiceClient)(nil).CreateNexusOutgoingService), varargs...)
}

// DeleteNamespace mocks base method.
func (m *MockOperatorServiceClient) DeleteNamespace(ctx context.Context, in *operatorservice.DeleteNamespaceRequest, opts ...grpc.CallOption) (*operatorservice.DeleteNamespaceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteNamespace", varargs...)
	ret0, _ := ret[0].(*operatorservice.DeleteNamespaceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNamespace indicates an expected call of DeleteNamespace.
func (mr *MockOperatorServiceClientMockRecorder) DeleteNamespace(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNamespace", reflect.TypeOf((*MockOperatorServiceClient)(nil).DeleteNamespace), varargs...)
}

// DeleteNexusIncomingService mocks base method.
func (m *MockOperatorServiceClient) DeleteNexusIncomingService(ctx context.Context, in *operatorservice.DeleteNexusIncomingServiceRequest, opts ...grpc.CallOption) (*operatorservice.DeleteNexusIncomingServiceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteNexusIncomingService", varargs...)
	ret0, _ := ret[0].(*operatorservice.DeleteNexusIncomingServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNexusIncomingService indicates an expected call of DeleteNexusIncomingService.
func (mr *MockOperatorServiceClientMockRecorder) DeleteNexusIncomingService(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNexusIncomingService", reflect.TypeOf((*MockOperatorServiceClient)(nil).DeleteNexusIncomingService), varargs...)
}

// DeleteNexusOutgoingService mocks base method.
func (m *MockOperatorServiceClient) DeleteNexusOutgoingService(ctx context.Context, in *operatorservice.DeleteNexusOutgoingServiceRequest, opts ...grpc.CallOption) (*operatorservice.DeleteNexusOutgoingServiceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteNexusOutgoingService", varargs...)
	ret0, _ := ret[0].(*operatorservice.DeleteNexusOutgoingServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNexusOutgoingService indicates an expected call of DeleteNexusOutgoingService.
func (mr *MockOperatorServiceClientMockRecorder) DeleteNexusOutgoingService(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNexusOutgoingService", reflect.TypeOf((*MockOperatorServiceClient)(nil).DeleteNexusOutgoingService), varargs...)
}

// GetNexusIncomingService mocks base method.
func (m *MockOperatorServiceClient) GetNexusIncomingService(ctx context.Context, in *operatorservice.GetNexusIncomingServiceRequest, opts ...grpc.CallOption) (*operatorservice.GetNexusIncomingServiceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNexusIncomingService", varargs...)
	ret0, _ := ret[0].(*operatorservice.GetNexusIncomingServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNexusIncomingService indicates an expected call of GetNexusIncomingService.
func (mr *MockOperatorServiceClientMockRecorder) GetNexusIncomingService(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNexusIncomingService", reflect.TypeOf((*MockOperatorServiceClient)(nil).GetNexusIncomingService), varargs...)
}

// GetNexusOutgoingService mocks base method.
func (m *MockOperatorServiceClient) GetNexusOutgoingService(ctx context.Context, in *operatorservice.GetNexusOutgoingServiceRequest, opts ...grpc.CallOption) (*operatorservice.GetNexusOutgoingServiceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNexusOutgoingService", varargs...)
	ret0, _ := ret[0].(*operatorservice.GetNexusOutgoingServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNexusOutgoingService indicates an expected call of GetNexusOutgoingService.
func (mr *MockOperatorServiceClientMockRecorder) GetNexusOutgoingService(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNexusOutgoingService", reflect.TypeOf((*MockOperatorServiceClient)(nil).GetNexusOutgoingService), varargs...)
}

// ListClusters mocks base method.
func (m *MockOperatorServiceClient) ListClusters(ctx context.Context, in *operatorservice.ListClustersRequest, opts ...grpc.CallOption) (*operatorservice.ListClustersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClusters", varargs...)
	ret0, _ := ret[0].(*operatorservice.ListClustersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusters indicates an expected call of ListClusters.
func (mr *MockOperatorServiceClientMockRecorder) ListClusters(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusters", reflect.TypeOf((*MockOperatorServiceClient)(nil).ListClusters), varargs...)
}

// ListNexusIncomingServices mocks base method.
func (m *MockOperatorServiceClient) ListNexusIncomingServices(ctx context.Context, in *operatorservice.ListNexusIncomingServicesRequest, opts ...grpc.CallOption) (*operatorservice.ListNexusIncomingServicesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNexusIncomingServices", varargs...)
	ret0, _ := ret[0].(*operatorservice.ListNexusIncomingServicesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNexusIncomingServices indicates an expected call of ListNexusIncomingServices.
func (mr *MockOperatorServiceClientMockRecorder) ListNexusIncomingServices(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNexusIncomingServices", reflect.TypeOf((*MockOperatorServiceClient)(nil).ListNexusIncomingServices), varargs...)
}

// ListNexusOutgoingServices mocks base method.
func (m *MockOperatorServiceClient) ListNexusOutgoingServices(ctx context.Context, in *operatorservice.ListNexusOutgoingServicesRequest, opts ...grpc.CallOption) (*operatorservice.ListNexusOutgoingServicesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNexusOutgoingServices", varargs...)
	ret0, _ := ret[0].(*operatorservice.ListNexusOutgoingServicesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNexusOutgoingServices indicates an expected call of ListNexusOutgoingServices.
func (mr *MockOperatorServiceClientMockRecorder) ListNexusOutgoingServices(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNexusOutgoingServices", reflect.TypeOf((*MockOperatorServiceClient)(nil).ListNexusOutgoingServices), varargs...)
}

// ListSearchAttributes mocks base method.
func (m *MockOperatorServiceClient) ListSearchAttributes(ctx context.Context, in *operatorservice.ListSearchAttributesRequest, opts ...grpc.CallOption) (*operatorservice.ListSearchAttributesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSearchAttributes", varargs...)
	ret0, _ := ret[0].(*operatorservice.ListSearchAttributesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSearchAttributes indicates an expected call of ListSearchAttributes.
func (mr *MockOperatorServiceClientMockRecorder) ListSearchAttributes(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSearchAttributes", reflect.TypeOf((*MockOperatorServiceClient)(nil).ListSearchAttributes), varargs...)
}

// RemoveRemoteCluster mocks base method.
func (m *MockOperatorServiceClient) RemoveRemoteCluster(ctx context.Context, in *operatorservice.RemoveRemoteClusterRequest, opts ...grpc.CallOption) (*operatorservice.RemoveRemoteClusterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveRemoteCluster", varargs...)
	ret0, _ := ret[0].(*operatorservice.RemoveRemoteClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveRemoteCluster indicates an expected call of RemoveRemoteCluster.
func (mr *MockOperatorServiceClientMockRecorder) RemoveRemoteCluster(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRemoteCluster", reflect.TypeOf((*MockOperatorServiceClient)(nil).RemoveRemoteCluster), varargs...)
}

// RemoveSearchAttributes mocks base method.
func (m *MockOperatorServiceClient) RemoveSearchAttributes(ctx context.Context, in *operatorservice.RemoveSearchAttributesRequest, opts ...grpc.CallOption) (*operatorservice.RemoveSearchAttributesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveSearchAttributes", varargs...)
	ret0, _ := ret[0].(*operatorservice.RemoveSearchAttributesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveSearchAttributes indicates an expected call of RemoveSearchAttributes.
func (mr *MockOperatorServiceClientMockRecorder) RemoveSearchAttributes(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSearchAttributes", reflect.TypeOf((*MockOperatorServiceClient)(nil).RemoveSearchAttributes), varargs...)
}

// UpdateNexusIncomingService mocks base method.
func (m *MockOperatorServiceClient) UpdateNexusIncomingService(ctx context.Context, in *operatorservice.UpdateNexusIncomingServiceRequest, opts ...grpc.CallOption) (*operatorservice.UpdateNexusIncomingServiceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateNexusIncomingService", varargs...)
	ret0, _ := ret[0].(*operatorservice.UpdateNexusIncomingServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNexusIncomingService indicates an expected call of UpdateNexusIncomingService.
func (mr *MockOperatorServiceClientMockRecorder) UpdateNexusIncomingService(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNexusIncomingService", reflect.TypeOf((*MockOperatorServiceClient)(nil).UpdateNexusIncomingService), varargs...)
}

// UpdateNexusOutgoingService mocks base method.
func (m *MockOperatorServiceClient) UpdateNexusOutgoingService(ctx context.Context, in *operatorservice.UpdateNexusOutgoingServiceRequest, opts ...grpc.CallOption) (*operatorservice.UpdateNexusOutgoingServiceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateNexusOutgoingService", varargs...)
	ret0, _ := ret[0].(*operatorservice.UpdateNexusOutgoingServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNexusOutgoingService indicates an expected call of UpdateNexusOutgoingService.
func (mr *MockOperatorServiceClientMockRecorder) UpdateNexusOutgoingService(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNexusOutgoingService", reflect.TypeOf((*MockOperatorServiceClient)(nil).UpdateNexusOutgoingService), varargs...)
}

// MockOperatorServiceServer is a mock of OperatorServiceServer interface.
type MockOperatorServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockOperatorServiceServerMockRecorder
}

// MockOperatorServiceServerMockRecorder is the mock recorder for MockOperatorServiceServer.
type MockOperatorServiceServerMockRecorder struct {
	mock *MockOperatorServiceServer
}

// NewMockOperatorServiceServer creates a new mock instance.
func NewMockOperatorServiceServer(ctrl *gomock.Controller) *MockOperatorServiceServer {
	mock := &MockOperatorServiceServer{ctrl: ctrl}
	mock.recorder = &MockOperatorServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperatorServiceServer) EXPECT() *MockOperatorServiceServerMockRecorder {
	return m.recorder
}

// AddOrUpdateRemoteCluster mocks base method.
func (m *MockOperatorServiceServer) AddOrUpdateRemoteCluster(arg0 context.Context, arg1 *operatorservice.AddOrUpdateRemoteClusterRequest) (*operatorservice.AddOrUpdateRemoteClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrUpdateRemoteCluster", arg0, arg1)
	ret0, _ := ret[0].(*operatorservice.AddOrUpdateRemoteClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOrUpdateRemoteCluster indicates an expected call of AddOrUpdateRemoteCluster.
func (mr *MockOperatorServiceServerMockRecorder) AddOrUpdateRemoteCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrUpdateRemoteCluster", reflect.TypeOf((*MockOperatorServiceServer)(nil).AddOrUpdateRemoteCluster), arg0, arg1)
}

// AddSearchAttributes mocks base method.
func (m *MockOperatorServiceServer) AddSearchAttributes(arg0 context.Context, arg1 *operatorservice.AddSearchAttributesRequest) (*operatorservice.AddSearchAttributesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSearchAttributes", arg0, arg1)
	ret0, _ := ret[0].(*operatorservice.AddSearchAttributesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSearchAttributes indicates an expected call of AddSearchAttributes.
func (mr *MockOperatorServiceServerMockRecorder) AddSearchAttributes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSearchAttributes", reflect.TypeOf((*MockOperatorServiceServer)(nil).AddSearchAttributes), arg0, arg1)
}

// CreateNexusIncomingService mocks base method.
func (m *MockOperatorServiceServer) CreateNexusIncomingService(arg0 context.Context, arg1 *operatorservice.CreateNexusIncomingServiceRequest) (*operatorservice.CreateNexusIncomingServiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNexusIncomingService", arg0, arg1)
	ret0, _ := ret[0].(*operatorservice.CreateNexusIncomingServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNexusIncomingService indicates an expected call of CreateNexusIncomingService.
func (mr *MockOperatorServiceServerMockRecorder) CreateNexusIncomingService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNexusIncomingService", reflect.TypeOf((*MockOperatorServiceServer)(nil).CreateNexusIncomingService), arg0, arg1)
}

// CreateNexusOutgoingService mocks base method.
func (m *MockOperatorServiceServer) CreateNexusOutgoingService(arg0 context.Context, arg1 *operatorservice.CreateNexusOutgoingServiceRequest) (*operatorservice.CreateNexusOutgoingServiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNexusOutgoingService", arg0, arg1)
	ret0, _ := ret[0].(*operatorservice.CreateNexusOutgoingServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNexusOutgoingService indicates an expected call of CreateNexusOutgoingService.
func (mr *MockOperatorServiceServerMockRecorder) CreateNexusOutgoingService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNexusOutgoingService", reflect.TypeOf((*MockOperatorServiceServer)(nil).CreateNexusOutgoingService), arg0, arg1)
}

// DeleteNamespace mocks base method.
func (m *MockOperatorServiceServer) DeleteNamespace(arg0 context.Context, arg1 *operatorservice.DeleteNamespaceRequest) (*operatorservice.DeleteNamespaceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNamespace", arg0, arg1)
	ret0, _ := ret[0].(*operatorservice.DeleteNamespaceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNamespace indicates an expected call of DeleteNamespace.
func (mr *MockOperatorServiceServerMockRecorder) DeleteNamespace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNamespace", reflect.TypeOf((*MockOperatorServiceServer)(nil).DeleteNamespace), arg0, arg1)
}

// DeleteNexusIncomingService mocks base method.
func (m *MockOperatorServiceServer) DeleteNexusIncomingService(arg0 context.Context, arg1 *operatorservice.DeleteNexusIncomingServiceRequest) (*operatorservice.DeleteNexusIncomingServiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNexusIncomingService", arg0, arg1)
	ret0, _ := ret[0].(*operatorservice.DeleteNexusIncomingServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNexusIncomingService indicates an expected call of DeleteNexusIncomingService.
func (mr *MockOperatorServiceServerMockRecorder) DeleteNexusIncomingService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNexusIncomingService", reflect.TypeOf((*MockOperatorServiceServer)(nil).DeleteNexusIncomingService), arg0, arg1)
}

// DeleteNexusOutgoingService mocks base method.
func (m *MockOperatorServiceServer) DeleteNexusOutgoingService(arg0 context.Context, arg1 *operatorservice.DeleteNexusOutgoingServiceRequest) (*operatorservice.DeleteNexusOutgoingServiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNexusOutgoingService", arg0, arg1)
	ret0, _ := ret[0].(*operatorservice.DeleteNexusOutgoingServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNexusOutgoingService indicates an expected call of DeleteNexusOutgoingService.
func (mr *MockOperatorServiceServerMockRecorder) DeleteNexusOutgoingService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNexusOutgoingService", reflect.TypeOf((*MockOperatorServiceServer)(nil).DeleteNexusOutgoingService), arg0, arg1)
}

// GetNexusIncomingService mocks base method.
func (m *MockOperatorServiceServer) GetNexusIncomingService(arg0 context.Context, arg1 *operatorservice.GetNexusIncomingServiceRequest) (*operatorservice.GetNexusIncomingServiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNexusIncomingService", arg0, arg1)
	ret0, _ := ret[0].(*operatorservice.GetNexusIncomingServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNexusIncomingService indicates an expected call of GetNexusIncomingService.
func (mr *MockOperatorServiceServerMockRecorder) GetNexusIncomingService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNexusIncomingService", reflect.TypeOf((*MockOperatorServiceServer)(nil).GetNexusIncomingService), arg0, arg1)
}

// GetNexusOutgoingService mocks base method.
func (m *MockOperatorServiceServer) GetNexusOutgoingService(arg0 context.Context, arg1 *operatorservice.GetNexusOutgoingServiceRequest) (*operatorservice.GetNexusOutgoingServiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNexusOutgoingService", arg0, arg1)
	ret0, _ := ret[0].(*operatorservice.GetNexusOutgoingServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNexusOutgoingService indicates an expected call of GetNexusOutgoingService.
func (mr *MockOperatorServiceServerMockRecorder) GetNexusOutgoingService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNexusOutgoingService", reflect.TypeOf((*MockOperatorServiceServer)(nil).GetNexusOutgoingService), arg0, arg1)
}

// ListClusters mocks base method.
func (m *MockOperatorServiceServer) ListClusters(arg0 context.Context, arg1 *operatorservice.ListClustersRequest) (*operatorservice.ListClustersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusters", arg0, arg1)
	ret0, _ := ret[0].(*operatorservice.ListClustersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusters indicates an expected call of ListClusters.
func (mr *MockOperatorServiceServerMockRecorder) ListClusters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusters", reflect.TypeOf((*MockOperatorServiceServer)(nil).ListClusters), arg0, arg1)
}

// ListNexusIncomingServices mocks base method.
func (m *MockOperatorServiceServer) ListNexusIncomingServices(arg0 context.Context, arg1 *operatorservice.ListNexusIncomingServicesRequest) (*operatorservice.ListNexusIncomingServicesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNexusIncomingServices", arg0, arg1)
	ret0, _ := ret[0].(*operatorservice.ListNexusIncomingServicesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNexusIncomingServices indicates an expected call of ListNexusIncomingServices.
func (mr *MockOperatorServiceServerMockRecorder) ListNexusIncomingServices(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNexusIncomingServices", reflect.TypeOf((*MockOperatorServiceServer)(nil).ListNexusIncomingServices), arg0, arg1)
}

// ListNexusOutgoingServices mocks base method.
func (m *MockOperatorServiceServer) ListNexusOutgoingServices(arg0 context.Context, arg1 *operatorservice.ListNexusOutgoingServicesRequest) (*operatorservice.ListNexusOutgoingServicesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNexusOutgoingServices", arg0, arg1)
	ret0, _ := ret[0].(*operatorservice.ListNexusOutgoingServicesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNexusOutgoingServices indicates an expected call of ListNexusOutgoingServices.
func (mr *MockOperatorServiceServerMockRecorder) ListNexusOutgoingServices(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNexusOutgoingServices", reflect.TypeOf((*MockOperatorServiceServer)(nil).ListNexusOutgoingServices), arg0, arg1)
}

// ListSearchAttributes mocks base method.
func (m *MockOperatorServiceServer) ListSearchAttributes(arg0 context.Context, arg1 *operatorservice.ListSearchAttributesRequest) (*operatorservice.ListSearchAttributesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSearchAttributes", arg0, arg1)
	ret0, _ := ret[0].(*operatorservice.ListSearchAttributesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSearchAttributes indicates an expected call of ListSearchAttributes.
func (mr *MockOperatorServiceServerMockRecorder) ListSearchAttributes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSearchAttributes", reflect.TypeOf((*MockOperatorServiceServer)(nil).ListSearchAttributes), arg0, arg1)
}

// RemoveRemoteCluster mocks base method.
func (m *MockOperatorServiceServer) RemoveRemoteCluster(arg0 context.Context, arg1 *operatorservice.RemoveRemoteClusterRequest) (*operatorservice.RemoveRemoteClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRemoteCluster", arg0, arg1)
	ret0, _ := ret[0].(*operatorservice.RemoveRemoteClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveRemoteCluster indicates an expected call of RemoveRemoteCluster.
func (mr *MockOperatorServiceServerMockRecorder) RemoveRemoteCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRemoteCluster", reflect.TypeOf((*MockOperatorServiceServer)(nil).RemoveRemoteCluster), arg0, arg1)
}

// RemoveSearchAttributes mocks base method.
func (m *MockOperatorServiceServer) RemoveSearchAttributes(arg0 context.Context, arg1 *operatorservice.RemoveSearchAttributesRequest) (*operatorservice.RemoveSearchAttributesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSearchAttributes", arg0, arg1)
	ret0, _ := ret[0].(*operatorservice.RemoveSearchAttributesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveSearchAttributes indicates an expected call of RemoveSearchAttributes.
func (mr *MockOperatorServiceServerMockRecorder) RemoveSearchAttributes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSearchAttributes", reflect.TypeOf((*MockOperatorServiceServer)(nil).RemoveSearchAttributes), arg0, arg1)
}

// UpdateNexusIncomingService mocks base method.
func (m *MockOperatorServiceServer) UpdateNexusIncomingService(arg0 context.Context, arg1 *operatorservice.UpdateNexusIncomingServiceRequest) (*operatorservice.UpdateNexusIncomingServiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNexusIncomingService", arg0, arg1)
	ret0, _ := ret[0].(*operatorservice.UpdateNexusIncomingServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNexusIncomingService indicates an expected call of UpdateNexusIncomingService.
func (mr *MockOperatorServiceServerMockRecorder) UpdateNexusIncomingService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNexusIncomingService", reflect.TypeOf((*MockOperatorServiceServer)(nil).UpdateNexusIncomingService), arg0, arg1)
}

// UpdateNexusOutgoingService mocks base method.
func (m *MockOperatorServiceServer) UpdateNexusOutgoingService(arg0 context.Context, arg1 *operatorservice.UpdateNexusOutgoingServiceRequest) (*operatorservice.UpdateNexusOutgoingServiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNexusOutgoingService", arg0, arg1)
	ret0, _ := ret[0].(*operatorservice.UpdateNexusOutgoingServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNexusOutgoingService indicates an expected call of UpdateNexusOutgoingService.
func (mr *MockOperatorServiceServerMockRecorder) UpdateNexusOutgoingService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNexusOutgoingService", reflect.TypeOf((*MockOperatorServiceServer)(nil).UpdateNexusOutgoingService), arg0, arg1)
}

// mustEmbedUnimplementedOperatorServiceServer mocks base method.
func (m *MockOperatorServiceServer) mustEmbedUnimplementedOperatorServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedOperatorServiceServer")
}

// mustEmbedUnimplementedOperatorServiceServer indicates an expected call of mustEmbedUnimplementedOperatorServiceServer.
func (mr *MockOperatorServiceServerMockRecorder) mustEmbedUnimplementedOperatorServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedOperatorServiceServer", reflect.TypeOf((*MockOperatorServiceServer)(nil).mustEmbedUnimplementedOperatorServiceServer))
}

// MockUnsafeOperatorServiceServer is a mock of UnsafeOperatorServiceServer interface.
type MockUnsafeOperatorServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeOperatorServiceServerMockRecorder
}

// MockUnsafeOperatorServiceServerMockRecorder is the mock recorder for MockUnsafeOperatorServiceServer.
type MockUnsafeOperatorServiceServerMockRecorder struct {
	mock *MockUnsafeOperatorServiceServer
}

// NewMockUnsafeOperatorServiceServer creates a new mock instance.
func NewMockUnsafeOperatorServiceServer(ctrl *gomock.Controller) *MockUnsafeOperatorServiceServer {
	mock := &MockUnsafeOperatorServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeOperatorServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeOperatorServiceServer) EXPECT() *MockUnsafeOperatorServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedOperatorServiceServer mocks base method.
func (m *MockUnsafeOperatorServiceServer) mustEmbedUnimplementedOperatorServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedOperatorServiceServer")
}

// mustEmbedUnimplementedOperatorServiceServer indicates an expected call of mustEmbedUnimplementedOperatorServiceServer.
func (mr *MockUnsafeOperatorServiceServerMockRecorder) mustEmbedUnimplementedOperatorServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedOperatorServiceServer", reflect.TypeOf((*MockUnsafeOperatorServiceServer)(nil).mustEmbedUnimplementedOperatorServiceServer))
}

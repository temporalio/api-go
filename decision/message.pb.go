// The MIT License (MIT)
//
// Copyright (c) 2020 Temporal Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: decision/message.proto

package decision

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	common "go.temporal.io/temporal-proto/common"
	execution "go.temporal.io/temporal-proto/execution"
	tasklist "go.temporal.io/temporal-proto/tasklist"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ScheduleActivityTaskDecisionAttributes struct {
	ActivityId   string               `protobuf:"bytes,1,opt,name=activityId,proto3" json:"activityId,omitempty"`
	ActivityType *common.ActivityType `protobuf:"bytes,2,opt,name=activityType,proto3" json:"activityType,omitempty"`
	Namespace    string               `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	TaskList     *tasklist.TaskList   `protobuf:"bytes,4,opt,name=taskList,proto3" json:"taskList,omitempty"`
	Header       *common.Header       `protobuf:"bytes,5,opt,name=header,proto3" json:"header,omitempty"`
	Input        []byte               `protobuf:"bytes,6,opt,name=input,proto3" json:"input,omitempty"`
	// Indicates how long the caller is willing to wait for an activity completion.
	// Limits for how long retries are happening. Either this or startToCloseTimeoutSeconds is required.
	// When not specified defaults to the workflow execution timeout.
	ScheduleToCloseTimeoutSeconds int32 `protobuf:"varint,7,opt,name=scheduleToCloseTimeoutSeconds,proto3" json:"scheduleToCloseTimeoutSeconds,omitempty"`
	// Limits time an activity task can stay in a task queue before a worker picks it up.
	// This timeout is always non retriable as all a retry would achieve is to put it back into the same queue.
	// Defaults to scheduleToCloseTimeoutSeconds or workflow execution timeout if not specified.
	ScheduleToStartTimeoutSeconds int32 `protobuf:"varint,8,opt,name=scheduleToStartTimeoutSeconds,proto3" json:"scheduleToStartTimeoutSeconds,omitempty"`
	// Maximum time an activity is allowed to execute after a pick up by a worker.
	// This timeout is always retriable. Either this or scheduleToCloseTimeoutSeconds is required.
	StartToCloseTimeoutSeconds int32 `protobuf:"varint,9,opt,name=startToCloseTimeoutSeconds,proto3" json:"startToCloseTimeoutSeconds,omitempty"`
	// Maximum time between successful worker heartbeats.
	HeartbeatTimeoutSeconds int32 `protobuf:"varint,10,opt,name=heartbeatTimeoutSeconds,proto3" json:"heartbeatTimeoutSeconds,omitempty"`
	// Retry parameters. Note that activity is retried by default according to a default retry policy.
	// To disable retries provide a retry policy with maximumAttempts equals to 1.
	// The retries happen up to scheduleToCloseTimeout.
	RetryPolicy *common.RetryPolicy `protobuf:"bytes,11,opt,name=retryPolicy,proto3" json:"retryPolicy,omitempty"`
}

func (m *ScheduleActivityTaskDecisionAttributes) Reset() {
	*m = ScheduleActivityTaskDecisionAttributes{}
}
func (m *ScheduleActivityTaskDecisionAttributes) String() string { return proto.CompactTextString(m) }
func (*ScheduleActivityTaskDecisionAttributes) ProtoMessage()    {}
func (*ScheduleActivityTaskDecisionAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec8a6bcee89103f4, []int{0}
}
func (m *ScheduleActivityTaskDecisionAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScheduleActivityTaskDecisionAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScheduleActivityTaskDecisionAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScheduleActivityTaskDecisionAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScheduleActivityTaskDecisionAttributes.Merge(m, src)
}
func (m *ScheduleActivityTaskDecisionAttributes) XXX_Size() int {
	return m.Size()
}
func (m *ScheduleActivityTaskDecisionAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_ScheduleActivityTaskDecisionAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_ScheduleActivityTaskDecisionAttributes proto.InternalMessageInfo

func (m *ScheduleActivityTaskDecisionAttributes) GetActivityId() string {
	if m != nil {
		return m.ActivityId
	}
	return ""
}

func (m *ScheduleActivityTaskDecisionAttributes) GetActivityType() *common.ActivityType {
	if m != nil {
		return m.ActivityType
	}
	return nil
}

func (m *ScheduleActivityTaskDecisionAttributes) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ScheduleActivityTaskDecisionAttributes) GetTaskList() *tasklist.TaskList {
	if m != nil {
		return m.TaskList
	}
	return nil
}

func (m *ScheduleActivityTaskDecisionAttributes) GetHeader() *common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ScheduleActivityTaskDecisionAttributes) GetInput() []byte {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *ScheduleActivityTaskDecisionAttributes) GetScheduleToCloseTimeoutSeconds() int32 {
	if m != nil {
		return m.ScheduleToCloseTimeoutSeconds
	}
	return 0
}

func (m *ScheduleActivityTaskDecisionAttributes) GetScheduleToStartTimeoutSeconds() int32 {
	if m != nil {
		return m.ScheduleToStartTimeoutSeconds
	}
	return 0
}

func (m *ScheduleActivityTaskDecisionAttributes) GetStartToCloseTimeoutSeconds() int32 {
	if m != nil {
		return m.StartToCloseTimeoutSeconds
	}
	return 0
}

func (m *ScheduleActivityTaskDecisionAttributes) GetHeartbeatTimeoutSeconds() int32 {
	if m != nil {
		return m.HeartbeatTimeoutSeconds
	}
	return 0
}

func (m *ScheduleActivityTaskDecisionAttributes) GetRetryPolicy() *common.RetryPolicy {
	if m != nil {
		return m.RetryPolicy
	}
	return nil
}

type RequestCancelActivityTaskDecisionAttributes struct {
	ActivityId string `protobuf:"bytes,1,opt,name=activityId,proto3" json:"activityId,omitempty"`
}

func (m *RequestCancelActivityTaskDecisionAttributes) Reset() {
	*m = RequestCancelActivityTaskDecisionAttributes{}
}
func (m *RequestCancelActivityTaskDecisionAttributes) String() string {
	return proto.CompactTextString(m)
}
func (*RequestCancelActivityTaskDecisionAttributes) ProtoMessage() {}
func (*RequestCancelActivityTaskDecisionAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec8a6bcee89103f4, []int{1}
}
func (m *RequestCancelActivityTaskDecisionAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestCancelActivityTaskDecisionAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestCancelActivityTaskDecisionAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestCancelActivityTaskDecisionAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestCancelActivityTaskDecisionAttributes.Merge(m, src)
}
func (m *RequestCancelActivityTaskDecisionAttributes) XXX_Size() int {
	return m.Size()
}
func (m *RequestCancelActivityTaskDecisionAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestCancelActivityTaskDecisionAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_RequestCancelActivityTaskDecisionAttributes proto.InternalMessageInfo

func (m *RequestCancelActivityTaskDecisionAttributes) GetActivityId() string {
	if m != nil {
		return m.ActivityId
	}
	return ""
}

type StartTimerDecisionAttributes struct {
	TimerId                   string `protobuf:"bytes,1,opt,name=timerId,proto3" json:"timerId,omitempty"`
	StartToFireTimeoutSeconds int64  `protobuf:"varint,2,opt,name=startToFireTimeoutSeconds,proto3" json:"startToFireTimeoutSeconds,omitempty"`
}

func (m *StartTimerDecisionAttributes) Reset()         { *m = StartTimerDecisionAttributes{} }
func (m *StartTimerDecisionAttributes) String() string { return proto.CompactTextString(m) }
func (*StartTimerDecisionAttributes) ProtoMessage()    {}
func (*StartTimerDecisionAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec8a6bcee89103f4, []int{2}
}
func (m *StartTimerDecisionAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartTimerDecisionAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartTimerDecisionAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartTimerDecisionAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartTimerDecisionAttributes.Merge(m, src)
}
func (m *StartTimerDecisionAttributes) XXX_Size() int {
	return m.Size()
}
func (m *StartTimerDecisionAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_StartTimerDecisionAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_StartTimerDecisionAttributes proto.InternalMessageInfo

func (m *StartTimerDecisionAttributes) GetTimerId() string {
	if m != nil {
		return m.TimerId
	}
	return ""
}

func (m *StartTimerDecisionAttributes) GetStartToFireTimeoutSeconds() int64 {
	if m != nil {
		return m.StartToFireTimeoutSeconds
	}
	return 0
}

type CompleteWorkflowExecutionDecisionAttributes struct {
	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *CompleteWorkflowExecutionDecisionAttributes) Reset() {
	*m = CompleteWorkflowExecutionDecisionAttributes{}
}
func (m *CompleteWorkflowExecutionDecisionAttributes) String() string {
	return proto.CompactTextString(m)
}
func (*CompleteWorkflowExecutionDecisionAttributes) ProtoMessage() {}
func (*CompleteWorkflowExecutionDecisionAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec8a6bcee89103f4, []int{3}
}
func (m *CompleteWorkflowExecutionDecisionAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompleteWorkflowExecutionDecisionAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompleteWorkflowExecutionDecisionAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompleteWorkflowExecutionDecisionAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompleteWorkflowExecutionDecisionAttributes.Merge(m, src)
}
func (m *CompleteWorkflowExecutionDecisionAttributes) XXX_Size() int {
	return m.Size()
}
func (m *CompleteWorkflowExecutionDecisionAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_CompleteWorkflowExecutionDecisionAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_CompleteWorkflowExecutionDecisionAttributes proto.InternalMessageInfo

func (m *CompleteWorkflowExecutionDecisionAttributes) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

type FailWorkflowExecutionDecisionAttributes struct {
	Reason  string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	Details []byte `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
}

func (m *FailWorkflowExecutionDecisionAttributes) Reset() {
	*m = FailWorkflowExecutionDecisionAttributes{}
}
func (m *FailWorkflowExecutionDecisionAttributes) String() string { return proto.CompactTextString(m) }
func (*FailWorkflowExecutionDecisionAttributes) ProtoMessage()    {}
func (*FailWorkflowExecutionDecisionAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec8a6bcee89103f4, []int{4}
}
func (m *FailWorkflowExecutionDecisionAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FailWorkflowExecutionDecisionAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FailWorkflowExecutionDecisionAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FailWorkflowExecutionDecisionAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FailWorkflowExecutionDecisionAttributes.Merge(m, src)
}
func (m *FailWorkflowExecutionDecisionAttributes) XXX_Size() int {
	return m.Size()
}
func (m *FailWorkflowExecutionDecisionAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_FailWorkflowExecutionDecisionAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_FailWorkflowExecutionDecisionAttributes proto.InternalMessageInfo

func (m *FailWorkflowExecutionDecisionAttributes) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *FailWorkflowExecutionDecisionAttributes) GetDetails() []byte {
	if m != nil {
		return m.Details
	}
	return nil
}

type CancelTimerDecisionAttributes struct {
	TimerId string `protobuf:"bytes,1,opt,name=timerId,proto3" json:"timerId,omitempty"`
}

func (m *CancelTimerDecisionAttributes) Reset()         { *m = CancelTimerDecisionAttributes{} }
func (m *CancelTimerDecisionAttributes) String() string { return proto.CompactTextString(m) }
func (*CancelTimerDecisionAttributes) ProtoMessage()    {}
func (*CancelTimerDecisionAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec8a6bcee89103f4, []int{5}
}
func (m *CancelTimerDecisionAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancelTimerDecisionAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancelTimerDecisionAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancelTimerDecisionAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelTimerDecisionAttributes.Merge(m, src)
}
func (m *CancelTimerDecisionAttributes) XXX_Size() int {
	return m.Size()
}
func (m *CancelTimerDecisionAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelTimerDecisionAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_CancelTimerDecisionAttributes proto.InternalMessageInfo

func (m *CancelTimerDecisionAttributes) GetTimerId() string {
	if m != nil {
		return m.TimerId
	}
	return ""
}

type CancelWorkflowExecutionDecisionAttributes struct {
	Details []byte `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (m *CancelWorkflowExecutionDecisionAttributes) Reset() {
	*m = CancelWorkflowExecutionDecisionAttributes{}
}
func (m *CancelWorkflowExecutionDecisionAttributes) String() string {
	return proto.CompactTextString(m)
}
func (*CancelWorkflowExecutionDecisionAttributes) ProtoMessage() {}
func (*CancelWorkflowExecutionDecisionAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec8a6bcee89103f4, []int{6}
}
func (m *CancelWorkflowExecutionDecisionAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancelWorkflowExecutionDecisionAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancelWorkflowExecutionDecisionAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancelWorkflowExecutionDecisionAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelWorkflowExecutionDecisionAttributes.Merge(m, src)
}
func (m *CancelWorkflowExecutionDecisionAttributes) XXX_Size() int {
	return m.Size()
}
func (m *CancelWorkflowExecutionDecisionAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelWorkflowExecutionDecisionAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_CancelWorkflowExecutionDecisionAttributes proto.InternalMessageInfo

func (m *CancelWorkflowExecutionDecisionAttributes) GetDetails() []byte {
	if m != nil {
		return m.Details
	}
	return nil
}

type RequestCancelExternalWorkflowExecutionDecisionAttributes struct {
	Namespace         string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkflowId        string `protobuf:"bytes,2,opt,name=workflowId,proto3" json:"workflowId,omitempty"`
	RunId             string `protobuf:"bytes,3,opt,name=runId,proto3" json:"runId,omitempty"`
	Control           []byte `protobuf:"bytes,4,opt,name=control,proto3" json:"control,omitempty"`
	ChildWorkflowOnly bool   `protobuf:"varint,5,opt,name=childWorkflowOnly,proto3" json:"childWorkflowOnly,omitempty"`
}

func (m *RequestCancelExternalWorkflowExecutionDecisionAttributes) Reset() {
	*m = RequestCancelExternalWorkflowExecutionDecisionAttributes{}
}
func (m *RequestCancelExternalWorkflowExecutionDecisionAttributes) String() string {
	return proto.CompactTextString(m)
}
func (*RequestCancelExternalWorkflowExecutionDecisionAttributes) ProtoMessage() {}
func (*RequestCancelExternalWorkflowExecutionDecisionAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec8a6bcee89103f4, []int{7}
}
func (m *RequestCancelExternalWorkflowExecutionDecisionAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestCancelExternalWorkflowExecutionDecisionAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestCancelExternalWorkflowExecutionDecisionAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestCancelExternalWorkflowExecutionDecisionAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestCancelExternalWorkflowExecutionDecisionAttributes.Merge(m, src)
}
func (m *RequestCancelExternalWorkflowExecutionDecisionAttributes) XXX_Size() int {
	return m.Size()
}
func (m *RequestCancelExternalWorkflowExecutionDecisionAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestCancelExternalWorkflowExecutionDecisionAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_RequestCancelExternalWorkflowExecutionDecisionAttributes proto.InternalMessageInfo

func (m *RequestCancelExternalWorkflowExecutionDecisionAttributes) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *RequestCancelExternalWorkflowExecutionDecisionAttributes) GetWorkflowId() string {
	if m != nil {
		return m.WorkflowId
	}
	return ""
}

func (m *RequestCancelExternalWorkflowExecutionDecisionAttributes) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

func (m *RequestCancelExternalWorkflowExecutionDecisionAttributes) GetControl() []byte {
	if m != nil {
		return m.Control
	}
	return nil
}

func (m *RequestCancelExternalWorkflowExecutionDecisionAttributes) GetChildWorkflowOnly() bool {
	if m != nil {
		return m.ChildWorkflowOnly
	}
	return false
}

type SignalExternalWorkflowExecutionDecisionAttributes struct {
	Namespace         string                       `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Execution         *execution.WorkflowExecution `protobuf:"bytes,2,opt,name=execution,proto3" json:"execution,omitempty"`
	SignalName        string                       `protobuf:"bytes,3,opt,name=signalName,proto3" json:"signalName,omitempty"`
	Input             []byte                       `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`
	Control           []byte                       `protobuf:"bytes,5,opt,name=control,proto3" json:"control,omitempty"`
	ChildWorkflowOnly bool                         `protobuf:"varint,6,opt,name=childWorkflowOnly,proto3" json:"childWorkflowOnly,omitempty"`
}

func (m *SignalExternalWorkflowExecutionDecisionAttributes) Reset() {
	*m = SignalExternalWorkflowExecutionDecisionAttributes{}
}
func (m *SignalExternalWorkflowExecutionDecisionAttributes) String() string {
	return proto.CompactTextString(m)
}
func (*SignalExternalWorkflowExecutionDecisionAttributes) ProtoMessage() {}
func (*SignalExternalWorkflowExecutionDecisionAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec8a6bcee89103f4, []int{8}
}
func (m *SignalExternalWorkflowExecutionDecisionAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignalExternalWorkflowExecutionDecisionAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignalExternalWorkflowExecutionDecisionAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignalExternalWorkflowExecutionDecisionAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignalExternalWorkflowExecutionDecisionAttributes.Merge(m, src)
}
func (m *SignalExternalWorkflowExecutionDecisionAttributes) XXX_Size() int {
	return m.Size()
}
func (m *SignalExternalWorkflowExecutionDecisionAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_SignalExternalWorkflowExecutionDecisionAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_SignalExternalWorkflowExecutionDecisionAttributes proto.InternalMessageInfo

func (m *SignalExternalWorkflowExecutionDecisionAttributes) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *SignalExternalWorkflowExecutionDecisionAttributes) GetExecution() *execution.WorkflowExecution {
	if m != nil {
		return m.Execution
	}
	return nil
}

func (m *SignalExternalWorkflowExecutionDecisionAttributes) GetSignalName() string {
	if m != nil {
		return m.SignalName
	}
	return ""
}

func (m *SignalExternalWorkflowExecutionDecisionAttributes) GetInput() []byte {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *SignalExternalWorkflowExecutionDecisionAttributes) GetControl() []byte {
	if m != nil {
		return m.Control
	}
	return nil
}

func (m *SignalExternalWorkflowExecutionDecisionAttributes) GetChildWorkflowOnly() bool {
	if m != nil {
		return m.ChildWorkflowOnly
	}
	return false
}

type UpsertWorkflowSearchAttributesDecisionAttributes struct {
	SearchAttributes *common.SearchAttributes `protobuf:"bytes,1,opt,name=searchAttributes,proto3" json:"searchAttributes,omitempty"`
}

func (m *UpsertWorkflowSearchAttributesDecisionAttributes) Reset() {
	*m = UpsertWorkflowSearchAttributesDecisionAttributes{}
}
func (m *UpsertWorkflowSearchAttributesDecisionAttributes) String() string {
	return proto.CompactTextString(m)
}
func (*UpsertWorkflowSearchAttributesDecisionAttributes) ProtoMessage() {}
func (*UpsertWorkflowSearchAttributesDecisionAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec8a6bcee89103f4, []int{9}
}
func (m *UpsertWorkflowSearchAttributesDecisionAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsertWorkflowSearchAttributesDecisionAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsertWorkflowSearchAttributesDecisionAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpsertWorkflowSearchAttributesDecisionAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertWorkflowSearchAttributesDecisionAttributes.Merge(m, src)
}
func (m *UpsertWorkflowSearchAttributesDecisionAttributes) XXX_Size() int {
	return m.Size()
}
func (m *UpsertWorkflowSearchAttributesDecisionAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertWorkflowSearchAttributesDecisionAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertWorkflowSearchAttributesDecisionAttributes proto.InternalMessageInfo

func (m *UpsertWorkflowSearchAttributesDecisionAttributes) GetSearchAttributes() *common.SearchAttributes {
	if m != nil {
		return m.SearchAttributes
	}
	return nil
}

type RecordMarkerDecisionAttributes struct {
	MarkerName string         `protobuf:"bytes,1,opt,name=markerName,proto3" json:"markerName,omitempty"`
	Details    []byte         `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	Header     *common.Header `protobuf:"bytes,3,opt,name=header,proto3" json:"header,omitempty"`
}

func (m *RecordMarkerDecisionAttributes) Reset()         { *m = RecordMarkerDecisionAttributes{} }
func (m *RecordMarkerDecisionAttributes) String() string { return proto.CompactTextString(m) }
func (*RecordMarkerDecisionAttributes) ProtoMessage()    {}
func (*RecordMarkerDecisionAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec8a6bcee89103f4, []int{10}
}
func (m *RecordMarkerDecisionAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordMarkerDecisionAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordMarkerDecisionAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordMarkerDecisionAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordMarkerDecisionAttributes.Merge(m, src)
}
func (m *RecordMarkerDecisionAttributes) XXX_Size() int {
	return m.Size()
}
func (m *RecordMarkerDecisionAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordMarkerDecisionAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_RecordMarkerDecisionAttributes proto.InternalMessageInfo

func (m *RecordMarkerDecisionAttributes) GetMarkerName() string {
	if m != nil {
		return m.MarkerName
	}
	return ""
}

func (m *RecordMarkerDecisionAttributes) GetDetails() []byte {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *RecordMarkerDecisionAttributes) GetHeader() *common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

type ContinueAsNewWorkflowExecutionDecisionAttributes struct {
	WorkflowType *common.WorkflowType `protobuf:"bytes,1,opt,name=workflowType,proto3" json:"workflowType,omitempty"`
	TaskList     *tasklist.TaskList   `protobuf:"bytes,2,opt,name=taskList,proto3" json:"taskList,omitempty"`
	Input        []byte               `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
	// Total workflow execution timeout including retries and continue as new
	WorkflowExecutionTimeoutSeconds int32 `protobuf:"varint,4,opt,name=workflowExecutionTimeoutSeconds,proto3" json:"workflowExecutionTimeoutSeconds,omitempty"`
	// Timeout of a single workflow run
	WorkflowRunTimeoutSeconds int32 `protobuf:"varint,5,opt,name=workflowRunTimeoutSeconds,proto3" json:"workflowRunTimeoutSeconds,omitempty"`
	// Timeout of a single workflow task
	WorkflowTaskTimeoutSeconds    int32                         `protobuf:"varint,6,opt,name=workflowTaskTimeoutSeconds,proto3" json:"workflowTaskTimeoutSeconds,omitempty"`
	BackoffStartIntervalInSeconds int32                         `protobuf:"varint,7,opt,name=backoffStartIntervalInSeconds,proto3" json:"backoffStartIntervalInSeconds,omitempty"`
	RetryPolicy                   *common.RetryPolicy           `protobuf:"bytes,8,opt,name=retryPolicy,proto3" json:"retryPolicy,omitempty"`
	Initiator                     common.ContinueAsNewInitiator `protobuf:"varint,9,opt,name=initiator,proto3,enum=common.ContinueAsNewInitiator" json:"initiator,omitempty"`
	FailureReason                 string                        `protobuf:"bytes,10,opt,name=failureReason,proto3" json:"failureReason,omitempty"`
	FailureDetails                []byte                        `protobuf:"bytes,11,opt,name=failureDetails,proto3" json:"failureDetails,omitempty"`
	LastCompletionResult          []byte                        `protobuf:"bytes,12,opt,name=lastCompletionResult,proto3" json:"lastCompletionResult,omitempty"`
	CronSchedule                  string                        `protobuf:"bytes,13,opt,name=cronSchedule,proto3" json:"cronSchedule,omitempty"`
	Header                        *common.Header                `protobuf:"bytes,14,opt,name=header,proto3" json:"header,omitempty"`
	Memo                          *common.Memo                  `protobuf:"bytes,15,opt,name=memo,proto3" json:"memo,omitempty"`
	SearchAttributes              *common.SearchAttributes      `protobuf:"bytes,16,opt,name=searchAttributes,proto3" json:"searchAttributes,omitempty"`
}

func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) Reset() {
	*m = ContinueAsNewWorkflowExecutionDecisionAttributes{}
}
func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) String() string {
	return proto.CompactTextString(m)
}
func (*ContinueAsNewWorkflowExecutionDecisionAttributes) ProtoMessage() {}
func (*ContinueAsNewWorkflowExecutionDecisionAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec8a6bcee89103f4, []int{11}
}
func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContinueAsNewWorkflowExecutionDecisionAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContinueAsNewWorkflowExecutionDecisionAttributes.Merge(m, src)
}
func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) XXX_Size() int {
	return m.Size()
}
func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_ContinueAsNewWorkflowExecutionDecisionAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_ContinueAsNewWorkflowExecutionDecisionAttributes proto.InternalMessageInfo

func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) GetWorkflowType() *common.WorkflowType {
	if m != nil {
		return m.WorkflowType
	}
	return nil
}

func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) GetTaskList() *tasklist.TaskList {
	if m != nil {
		return m.TaskList
	}
	return nil
}

func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) GetInput() []byte {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) GetWorkflowExecutionTimeoutSeconds() int32 {
	if m != nil {
		return m.WorkflowExecutionTimeoutSeconds
	}
	return 0
}

func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) GetWorkflowRunTimeoutSeconds() int32 {
	if m != nil {
		return m.WorkflowRunTimeoutSeconds
	}
	return 0
}

func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) GetWorkflowTaskTimeoutSeconds() int32 {
	if m != nil {
		return m.WorkflowTaskTimeoutSeconds
	}
	return 0
}

func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) GetBackoffStartIntervalInSeconds() int32 {
	if m != nil {
		return m.BackoffStartIntervalInSeconds
	}
	return 0
}

func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) GetRetryPolicy() *common.RetryPolicy {
	if m != nil {
		return m.RetryPolicy
	}
	return nil
}

func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) GetInitiator() common.ContinueAsNewInitiator {
	if m != nil {
		return m.Initiator
	}
	return common.ContinueAsNewInitiator_Decider
}

func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) GetFailureReason() string {
	if m != nil {
		return m.FailureReason
	}
	return ""
}

func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) GetFailureDetails() []byte {
	if m != nil {
		return m.FailureDetails
	}
	return nil
}

func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) GetLastCompletionResult() []byte {
	if m != nil {
		return m.LastCompletionResult
	}
	return nil
}

func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) GetCronSchedule() string {
	if m != nil {
		return m.CronSchedule
	}
	return ""
}

func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) GetHeader() *common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) GetMemo() *common.Memo {
	if m != nil {
		return m.Memo
	}
	return nil
}

func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) GetSearchAttributes() *common.SearchAttributes {
	if m != nil {
		return m.SearchAttributes
	}
	return nil
}

type StartChildWorkflowExecutionDecisionAttributes struct {
	Namespace    string               `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkflowId   string               `protobuf:"bytes,2,opt,name=workflowId,proto3" json:"workflowId,omitempty"`
	WorkflowType *common.WorkflowType `protobuf:"bytes,3,opt,name=workflowType,proto3" json:"workflowType,omitempty"`
	TaskList     *tasklist.TaskList   `protobuf:"bytes,4,opt,name=taskList,proto3" json:"taskList,omitempty"`
	Input        []byte               `protobuf:"bytes,5,opt,name=input,proto3" json:"input,omitempty"`
	// Total workflow execution timeout including retries and continue as new
	WorkflowExecutionTimeoutSeconds int32 `protobuf:"varint,6,opt,name=workflowExecutionTimeoutSeconds,proto3" json:"workflowExecutionTimeoutSeconds,omitempty"`
	// Timeout of a single workflow run
	WorkflowRunTimeoutSeconds int32 `protobuf:"varint,7,opt,name=workflowRunTimeoutSeconds,proto3" json:"workflowRunTimeoutSeconds,omitempty"`
	// Timeout of a single workflow task
	WorkflowTaskTimeoutSeconds int32                        `protobuf:"varint,8,opt,name=workflowTaskTimeoutSeconds,proto3" json:"workflowTaskTimeoutSeconds,omitempty"`
	ParentClosePolicy          common.ParentClosePolicy     `protobuf:"varint,9,opt,name=parentClosePolicy,proto3,enum=common.ParentClosePolicy" json:"parentClosePolicy,omitempty"`
	Control                    []byte                       `protobuf:"bytes,10,opt,name=control,proto3" json:"control,omitempty"`
	WorkflowIdReusePolicy      common.WorkflowIdReusePolicy `protobuf:"varint,11,opt,name=workflowIdReusePolicy,proto3,enum=common.WorkflowIdReusePolicy" json:"workflowIdReusePolicy,omitempty"`
	RetryPolicy                *common.RetryPolicy          `protobuf:"bytes,12,opt,name=retryPolicy,proto3" json:"retryPolicy,omitempty"`
	CronSchedule               string                       `protobuf:"bytes,13,opt,name=cronSchedule,proto3" json:"cronSchedule,omitempty"`
	Header                     *common.Header               `protobuf:"bytes,14,opt,name=header,proto3" json:"header,omitempty"`
	Memo                       *common.Memo                 `protobuf:"bytes,15,opt,name=memo,proto3" json:"memo,omitempty"`
	SearchAttributes           *common.SearchAttributes     `protobuf:"bytes,16,opt,name=searchAttributes,proto3" json:"searchAttributes,omitempty"`
}

func (m *StartChildWorkflowExecutionDecisionAttributes) Reset() {
	*m = StartChildWorkflowExecutionDecisionAttributes{}
}
func (m *StartChildWorkflowExecutionDecisionAttributes) String() string {
	return proto.CompactTextString(m)
}
func (*StartChildWorkflowExecutionDecisionAttributes) ProtoMessage() {}
func (*StartChildWorkflowExecutionDecisionAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec8a6bcee89103f4, []int{12}
}
func (m *StartChildWorkflowExecutionDecisionAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartChildWorkflowExecutionDecisionAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartChildWorkflowExecutionDecisionAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartChildWorkflowExecutionDecisionAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartChildWorkflowExecutionDecisionAttributes.Merge(m, src)
}
func (m *StartChildWorkflowExecutionDecisionAttributes) XXX_Size() int {
	return m.Size()
}
func (m *StartChildWorkflowExecutionDecisionAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_StartChildWorkflowExecutionDecisionAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_StartChildWorkflowExecutionDecisionAttributes proto.InternalMessageInfo

func (m *StartChildWorkflowExecutionDecisionAttributes) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *StartChildWorkflowExecutionDecisionAttributes) GetWorkflowId() string {
	if m != nil {
		return m.WorkflowId
	}
	return ""
}

func (m *StartChildWorkflowExecutionDecisionAttributes) GetWorkflowType() *common.WorkflowType {
	if m != nil {
		return m.WorkflowType
	}
	return nil
}

func (m *StartChildWorkflowExecutionDecisionAttributes) GetTaskList() *tasklist.TaskList {
	if m != nil {
		return m.TaskList
	}
	return nil
}

func (m *StartChildWorkflowExecutionDecisionAttributes) GetInput() []byte {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *StartChildWorkflowExecutionDecisionAttributes) GetWorkflowExecutionTimeoutSeconds() int32 {
	if m != nil {
		return m.WorkflowExecutionTimeoutSeconds
	}
	return 0
}

func (m *StartChildWorkflowExecutionDecisionAttributes) GetWorkflowRunTimeoutSeconds() int32 {
	if m != nil {
		return m.WorkflowRunTimeoutSeconds
	}
	return 0
}

func (m *StartChildWorkflowExecutionDecisionAttributes) GetWorkflowTaskTimeoutSeconds() int32 {
	if m != nil {
		return m.WorkflowTaskTimeoutSeconds
	}
	return 0
}

func (m *StartChildWorkflowExecutionDecisionAttributes) GetParentClosePolicy() common.ParentClosePolicy {
	if m != nil {
		return m.ParentClosePolicy
	}
	return common.ParentClosePolicy_Abandon
}

func (m *StartChildWorkflowExecutionDecisionAttributes) GetControl() []byte {
	if m != nil {
		return m.Control
	}
	return nil
}

func (m *StartChildWorkflowExecutionDecisionAttributes) GetWorkflowIdReusePolicy() common.WorkflowIdReusePolicy {
	if m != nil {
		return m.WorkflowIdReusePolicy
	}
	return common.WorkflowIdReusePolicy_AllowDuplicate
}

func (m *StartChildWorkflowExecutionDecisionAttributes) GetRetryPolicy() *common.RetryPolicy {
	if m != nil {
		return m.RetryPolicy
	}
	return nil
}

func (m *StartChildWorkflowExecutionDecisionAttributes) GetCronSchedule() string {
	if m != nil {
		return m.CronSchedule
	}
	return ""
}

func (m *StartChildWorkflowExecutionDecisionAttributes) GetHeader() *common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *StartChildWorkflowExecutionDecisionAttributes) GetMemo() *common.Memo {
	if m != nil {
		return m.Memo
	}
	return nil
}

func (m *StartChildWorkflowExecutionDecisionAttributes) GetSearchAttributes() *common.SearchAttributes {
	if m != nil {
		return m.SearchAttributes
	}
	return nil
}

type Decision struct {
	DecisionType DecisionType `protobuf:"varint,1,opt,name=decisionType,proto3,enum=decision.DecisionType" json:"decisionType,omitempty"`
	// Types that are valid to be assigned to Attributes:
	//	*Decision_ScheduleActivityTaskDecisionAttributes
	//	*Decision_StartTimerDecisionAttributes
	//	*Decision_CompleteWorkflowExecutionDecisionAttributes
	//	*Decision_FailWorkflowExecutionDecisionAttributes
	//	*Decision_RequestCancelActivityTaskDecisionAttributes
	//	*Decision_CancelTimerDecisionAttributes
	//	*Decision_CancelWorkflowExecutionDecisionAttributes
	//	*Decision_RequestCancelExternalWorkflowExecutionDecisionAttributes
	//	*Decision_RecordMarkerDecisionAttributes
	//	*Decision_ContinueAsNewWorkflowExecutionDecisionAttributes
	//	*Decision_StartChildWorkflowExecutionDecisionAttributes
	//	*Decision_SignalExternalWorkflowExecutionDecisionAttributes
	//	*Decision_UpsertWorkflowSearchAttributesDecisionAttributes
	Attributes isDecision_Attributes `protobuf_oneof:"attributes"`
}

func (m *Decision) Reset()         { *m = Decision{} }
func (m *Decision) String() string { return proto.CompactTextString(m) }
func (*Decision) ProtoMessage()    {}
func (*Decision) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec8a6bcee89103f4, []int{13}
}
func (m *Decision) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Decision) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Decision.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Decision) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Decision.Merge(m, src)
}
func (m *Decision) XXX_Size() int {
	return m.Size()
}
func (m *Decision) XXX_DiscardUnknown() {
	xxx_messageInfo_Decision.DiscardUnknown(m)
}

var xxx_messageInfo_Decision proto.InternalMessageInfo

type isDecision_Attributes interface {
	isDecision_Attributes()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Decision_ScheduleActivityTaskDecisionAttributes struct {
	ScheduleActivityTaskDecisionAttributes *ScheduleActivityTaskDecisionAttributes `protobuf:"bytes,2,opt,name=scheduleActivityTaskDecisionAttributes,proto3,oneof" json:"scheduleActivityTaskDecisionAttributes,omitempty"`
}
type Decision_StartTimerDecisionAttributes struct {
	StartTimerDecisionAttributes *StartTimerDecisionAttributes `protobuf:"bytes,3,opt,name=startTimerDecisionAttributes,proto3,oneof" json:"startTimerDecisionAttributes,omitempty"`
}
type Decision_CompleteWorkflowExecutionDecisionAttributes struct {
	CompleteWorkflowExecutionDecisionAttributes *CompleteWorkflowExecutionDecisionAttributes `protobuf:"bytes,4,opt,name=completeWorkflowExecutionDecisionAttributes,proto3,oneof" json:"completeWorkflowExecutionDecisionAttributes,omitempty"`
}
type Decision_FailWorkflowExecutionDecisionAttributes struct {
	FailWorkflowExecutionDecisionAttributes *FailWorkflowExecutionDecisionAttributes `protobuf:"bytes,5,opt,name=failWorkflowExecutionDecisionAttributes,proto3,oneof" json:"failWorkflowExecutionDecisionAttributes,omitempty"`
}
type Decision_RequestCancelActivityTaskDecisionAttributes struct {
	RequestCancelActivityTaskDecisionAttributes *RequestCancelActivityTaskDecisionAttributes `protobuf:"bytes,6,opt,name=requestCancelActivityTaskDecisionAttributes,proto3,oneof" json:"requestCancelActivityTaskDecisionAttributes,omitempty"`
}
type Decision_CancelTimerDecisionAttributes struct {
	CancelTimerDecisionAttributes *CancelTimerDecisionAttributes `protobuf:"bytes,7,opt,name=cancelTimerDecisionAttributes,proto3,oneof" json:"cancelTimerDecisionAttributes,omitempty"`
}
type Decision_CancelWorkflowExecutionDecisionAttributes struct {
	CancelWorkflowExecutionDecisionAttributes *CancelWorkflowExecutionDecisionAttributes `protobuf:"bytes,8,opt,name=cancelWorkflowExecutionDecisionAttributes,proto3,oneof" json:"cancelWorkflowExecutionDecisionAttributes,omitempty"`
}
type Decision_RequestCancelExternalWorkflowExecutionDecisionAttributes struct {
	RequestCancelExternalWorkflowExecutionDecisionAttributes *RequestCancelExternalWorkflowExecutionDecisionAttributes `protobuf:"bytes,9,opt,name=requestCancelExternalWorkflowExecutionDecisionAttributes,proto3,oneof" json:"requestCancelExternalWorkflowExecutionDecisionAttributes,omitempty"`
}
type Decision_RecordMarkerDecisionAttributes struct {
	RecordMarkerDecisionAttributes *RecordMarkerDecisionAttributes `protobuf:"bytes,10,opt,name=recordMarkerDecisionAttributes,proto3,oneof" json:"recordMarkerDecisionAttributes,omitempty"`
}
type Decision_ContinueAsNewWorkflowExecutionDecisionAttributes struct {
	ContinueAsNewWorkflowExecutionDecisionAttributes *ContinueAsNewWorkflowExecutionDecisionAttributes `protobuf:"bytes,11,opt,name=continueAsNewWorkflowExecutionDecisionAttributes,proto3,oneof" json:"continueAsNewWorkflowExecutionDecisionAttributes,omitempty"`
}
type Decision_StartChildWorkflowExecutionDecisionAttributes struct {
	StartChildWorkflowExecutionDecisionAttributes *StartChildWorkflowExecutionDecisionAttributes `protobuf:"bytes,12,opt,name=startChildWorkflowExecutionDecisionAttributes,proto3,oneof" json:"startChildWorkflowExecutionDecisionAttributes,omitempty"`
}
type Decision_SignalExternalWorkflowExecutionDecisionAttributes struct {
	SignalExternalWorkflowExecutionDecisionAttributes *SignalExternalWorkflowExecutionDecisionAttributes `protobuf:"bytes,13,opt,name=signalExternalWorkflowExecutionDecisionAttributes,proto3,oneof" json:"signalExternalWorkflowExecutionDecisionAttributes,omitempty"`
}
type Decision_UpsertWorkflowSearchAttributesDecisionAttributes struct {
	UpsertWorkflowSearchAttributesDecisionAttributes *UpsertWorkflowSearchAttributesDecisionAttributes `protobuf:"bytes,14,opt,name=upsertWorkflowSearchAttributesDecisionAttributes,proto3,oneof" json:"upsertWorkflowSearchAttributesDecisionAttributes,omitempty"`
}

func (*Decision_ScheduleActivityTaskDecisionAttributes) isDecision_Attributes()                   {}
func (*Decision_StartTimerDecisionAttributes) isDecision_Attributes()                             {}
func (*Decision_CompleteWorkflowExecutionDecisionAttributes) isDecision_Attributes()              {}
func (*Decision_FailWorkflowExecutionDecisionAttributes) isDecision_Attributes()                  {}
func (*Decision_RequestCancelActivityTaskDecisionAttributes) isDecision_Attributes()              {}
func (*Decision_CancelTimerDecisionAttributes) isDecision_Attributes()                            {}
func (*Decision_CancelWorkflowExecutionDecisionAttributes) isDecision_Attributes()                {}
func (*Decision_RequestCancelExternalWorkflowExecutionDecisionAttributes) isDecision_Attributes() {}
func (*Decision_RecordMarkerDecisionAttributes) isDecision_Attributes()                           {}
func (*Decision_ContinueAsNewWorkflowExecutionDecisionAttributes) isDecision_Attributes()         {}
func (*Decision_StartChildWorkflowExecutionDecisionAttributes) isDecision_Attributes()            {}
func (*Decision_SignalExternalWorkflowExecutionDecisionAttributes) isDecision_Attributes()        {}
func (*Decision_UpsertWorkflowSearchAttributesDecisionAttributes) isDecision_Attributes()         {}

func (m *Decision) GetAttributes() isDecision_Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Decision) GetDecisionType() DecisionType {
	if m != nil {
		return m.DecisionType
	}
	return DecisionType_ScheduleActivityTask
}

func (m *Decision) GetScheduleActivityTaskDecisionAttributes() *ScheduleActivityTaskDecisionAttributes {
	if x, ok := m.GetAttributes().(*Decision_ScheduleActivityTaskDecisionAttributes); ok {
		return x.ScheduleActivityTaskDecisionAttributes
	}
	return nil
}

func (m *Decision) GetStartTimerDecisionAttributes() *StartTimerDecisionAttributes {
	if x, ok := m.GetAttributes().(*Decision_StartTimerDecisionAttributes); ok {
		return x.StartTimerDecisionAttributes
	}
	return nil
}

func (m *Decision) GetCompleteWorkflowExecutionDecisionAttributes() *CompleteWorkflowExecutionDecisionAttributes {
	if x, ok := m.GetAttributes().(*Decision_CompleteWorkflowExecutionDecisionAttributes); ok {
		return x.CompleteWorkflowExecutionDecisionAttributes
	}
	return nil
}

func (m *Decision) GetFailWorkflowExecutionDecisionAttributes() *FailWorkflowExecutionDecisionAttributes {
	if x, ok := m.GetAttributes().(*Decision_FailWorkflowExecutionDecisionAttributes); ok {
		return x.FailWorkflowExecutionDecisionAttributes
	}
	return nil
}

func (m *Decision) GetRequestCancelActivityTaskDecisionAttributes() *RequestCancelActivityTaskDecisionAttributes {
	if x, ok := m.GetAttributes().(*Decision_RequestCancelActivityTaskDecisionAttributes); ok {
		return x.RequestCancelActivityTaskDecisionAttributes
	}
	return nil
}

func (m *Decision) GetCancelTimerDecisionAttributes() *CancelTimerDecisionAttributes {
	if x, ok := m.GetAttributes().(*Decision_CancelTimerDecisionAttributes); ok {
		return x.CancelTimerDecisionAttributes
	}
	return nil
}

func (m *Decision) GetCancelWorkflowExecutionDecisionAttributes() *CancelWorkflowExecutionDecisionAttributes {
	if x, ok := m.GetAttributes().(*Decision_CancelWorkflowExecutionDecisionAttributes); ok {
		return x.CancelWorkflowExecutionDecisionAttributes
	}
	return nil
}

func (m *Decision) GetRequestCancelExternalWorkflowExecutionDecisionAttributes() *RequestCancelExternalWorkflowExecutionDecisionAttributes {
	if x, ok := m.GetAttributes().(*Decision_RequestCancelExternalWorkflowExecutionDecisionAttributes); ok {
		return x.RequestCancelExternalWorkflowExecutionDecisionAttributes
	}
	return nil
}

func (m *Decision) GetRecordMarkerDecisionAttributes() *RecordMarkerDecisionAttributes {
	if x, ok := m.GetAttributes().(*Decision_RecordMarkerDecisionAttributes); ok {
		return x.RecordMarkerDecisionAttributes
	}
	return nil
}

func (m *Decision) GetContinueAsNewWorkflowExecutionDecisionAttributes() *ContinueAsNewWorkflowExecutionDecisionAttributes {
	if x, ok := m.GetAttributes().(*Decision_ContinueAsNewWorkflowExecutionDecisionAttributes); ok {
		return x.ContinueAsNewWorkflowExecutionDecisionAttributes
	}
	return nil
}

func (m *Decision) GetStartChildWorkflowExecutionDecisionAttributes() *StartChildWorkflowExecutionDecisionAttributes {
	if x, ok := m.GetAttributes().(*Decision_StartChildWorkflowExecutionDecisionAttributes); ok {
		return x.StartChildWorkflowExecutionDecisionAttributes
	}
	return nil
}

func (m *Decision) GetSignalExternalWorkflowExecutionDecisionAttributes() *SignalExternalWorkflowExecutionDecisionAttributes {
	if x, ok := m.GetAttributes().(*Decision_SignalExternalWorkflowExecutionDecisionAttributes); ok {
		return x.SignalExternalWorkflowExecutionDecisionAttributes
	}
	return nil
}

func (m *Decision) GetUpsertWorkflowSearchAttributesDecisionAttributes() *UpsertWorkflowSearchAttributesDecisionAttributes {
	if x, ok := m.GetAttributes().(*Decision_UpsertWorkflowSearchAttributesDecisionAttributes); ok {
		return x.UpsertWorkflowSearchAttributesDecisionAttributes
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Decision) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Decision_ScheduleActivityTaskDecisionAttributes)(nil),
		(*Decision_StartTimerDecisionAttributes)(nil),
		(*Decision_CompleteWorkflowExecutionDecisionAttributes)(nil),
		(*Decision_FailWorkflowExecutionDecisionAttributes)(nil),
		(*Decision_RequestCancelActivityTaskDecisionAttributes)(nil),
		(*Decision_CancelTimerDecisionAttributes)(nil),
		(*Decision_CancelWorkflowExecutionDecisionAttributes)(nil),
		(*Decision_RequestCancelExternalWorkflowExecutionDecisionAttributes)(nil),
		(*Decision_RecordMarkerDecisionAttributes)(nil),
		(*Decision_ContinueAsNewWorkflowExecutionDecisionAttributes)(nil),
		(*Decision_StartChildWorkflowExecutionDecisionAttributes)(nil),
		(*Decision_SignalExternalWorkflowExecutionDecisionAttributes)(nil),
		(*Decision_UpsertWorkflowSearchAttributesDecisionAttributes)(nil),
	}
}

type StickyExecutionAttributes struct {
	WorkerTaskList                *tasklist.TaskList `protobuf:"bytes,1,opt,name=workerTaskList,proto3" json:"workerTaskList,omitempty"`
	ScheduleToStartTimeoutSeconds int32              `protobuf:"varint,2,opt,name=scheduleToStartTimeoutSeconds,proto3" json:"scheduleToStartTimeoutSeconds,omitempty"`
}

func (m *StickyExecutionAttributes) Reset()         { *m = StickyExecutionAttributes{} }
func (m *StickyExecutionAttributes) String() string { return proto.CompactTextString(m) }
func (*StickyExecutionAttributes) ProtoMessage()    {}
func (*StickyExecutionAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec8a6bcee89103f4, []int{14}
}
func (m *StickyExecutionAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StickyExecutionAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StickyExecutionAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StickyExecutionAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StickyExecutionAttributes.Merge(m, src)
}
func (m *StickyExecutionAttributes) XXX_Size() int {
	return m.Size()
}
func (m *StickyExecutionAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_StickyExecutionAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_StickyExecutionAttributes proto.InternalMessageInfo

func (m *StickyExecutionAttributes) GetWorkerTaskList() *tasklist.TaskList {
	if m != nil {
		return m.WorkerTaskList
	}
	return nil
}

func (m *StickyExecutionAttributes) GetScheduleToStartTimeoutSeconds() int32 {
	if m != nil {
		return m.ScheduleToStartTimeoutSeconds
	}
	return 0
}

func init() {
	proto.RegisterType((*ScheduleActivityTaskDecisionAttributes)(nil), "decision.ScheduleActivityTaskDecisionAttributes")
	proto.RegisterType((*RequestCancelActivityTaskDecisionAttributes)(nil), "decision.RequestCancelActivityTaskDecisionAttributes")
	proto.RegisterType((*StartTimerDecisionAttributes)(nil), "decision.StartTimerDecisionAttributes")
	proto.RegisterType((*CompleteWorkflowExecutionDecisionAttributes)(nil), "decision.CompleteWorkflowExecutionDecisionAttributes")
	proto.RegisterType((*FailWorkflowExecutionDecisionAttributes)(nil), "decision.FailWorkflowExecutionDecisionAttributes")
	proto.RegisterType((*CancelTimerDecisionAttributes)(nil), "decision.CancelTimerDecisionAttributes")
	proto.RegisterType((*CancelWorkflowExecutionDecisionAttributes)(nil), "decision.CancelWorkflowExecutionDecisionAttributes")
	proto.RegisterType((*RequestCancelExternalWorkflowExecutionDecisionAttributes)(nil), "decision.RequestCancelExternalWorkflowExecutionDecisionAttributes")
	proto.RegisterType((*SignalExternalWorkflowExecutionDecisionAttributes)(nil), "decision.SignalExternalWorkflowExecutionDecisionAttributes")
	proto.RegisterType((*UpsertWorkflowSearchAttributesDecisionAttributes)(nil), "decision.UpsertWorkflowSearchAttributesDecisionAttributes")
	proto.RegisterType((*RecordMarkerDecisionAttributes)(nil), "decision.RecordMarkerDecisionAttributes")
	proto.RegisterType((*ContinueAsNewWorkflowExecutionDecisionAttributes)(nil), "decision.ContinueAsNewWorkflowExecutionDecisionAttributes")
	proto.RegisterType((*StartChildWorkflowExecutionDecisionAttributes)(nil), "decision.StartChildWorkflowExecutionDecisionAttributes")
	proto.RegisterType((*Decision)(nil), "decision.Decision")
	proto.RegisterType((*StickyExecutionAttributes)(nil), "decision.StickyExecutionAttributes")
}

func init() { proto.RegisterFile("decision/message.proto", fileDescriptor_ec8a6bcee89103f4) }

var fileDescriptor_ec8a6bcee89103f4 = []byte{
	// 1450 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x58, 0xcf, 0x6f, 0x1b, 0xc5,
	0x17, 0xf7, 0xe6, 0x87, 0xeb, 0x3c, 0xbb, 0x69, 0x3b, 0xcd, 0x37, 0x75, 0xa3, 0xc4, 0xdf, 0xc8,
	0x42, 0x69, 0xaa, 0x52, 0x27, 0x75, 0x55, 0x11, 0x42, 0x85, 0x94, 0x26, 0x29, 0x8e, 0x44, 0x4b,
	0x35, 0x0e, 0xaa, 0x04, 0x12, 0xd2, 0x64, 0x3d, 0x69, 0x56, 0xde, 0xdd, 0x31, 0x33, 0xb3, 0x4d,
	0x73, 0xe5, 0x08, 0x42, 0x42, 0xe2, 0xc4, 0x01, 0x71, 0x45, 0xe2, 0x9f, 0xe0, 0x88, 0xc4, 0xa5,
	0x27, 0xd4, 0x23, 0x6a, 0x8f, 0xfc, 0x09, 0x5c, 0xd0, 0x8e, 0x67, 0xec, 0xdd, 0x8d, 0xbd, 0xd9,
	0x6d, 0xcb, 0x81, 0x9b, 0xe7, 0xbd, 0xcf, 0xbc, 0xf7, 0xe6, 0xcd, 0xbe, 0xf7, 0x99, 0x67, 0x98,
	0xef, 0x50, 0xdb, 0x11, 0x0e, 0xf3, 0xd7, 0x3c, 0x2a, 0x04, 0x79, 0x42, 0x1b, 0x3d, 0xce, 0x24,
	0x43, 0x25, 0x23, 0x5f, 0xb8, 0x64, 0x33, 0xcf, 0x63, 0xfe, 0x1a, 0xf5, 0x03, 0xaf, 0xaf, 0x5c,
	0xb8, 0x3c, 0xd8, 0x14, 0x11, 0xce, 0x69, 0x5c, 0xcc, 0xce, 0xc2, 0xbc, 0x24, 0xa2, 0xeb, 0x3a,
	0x42, 0x26, 0xe4, 0x57, 0xe8, 0x33, 0x6a, 0x07, 0xf2, 0x94, 0xe3, 0xfa, 0xef, 0x53, 0xb0, 0xd2,
	0xb6, 0x8f, 0x68, 0x27, 0x70, 0xe9, 0x96, 0x2d, 0x9d, 0xa7, 0x8e, 0x3c, 0xd9, 0x27, 0xa2, 0xbb,
	0xa3, 0x5d, 0x6e, 0x49, 0xc9, 0x9d, 0x83, 0x40, 0x52, 0x81, 0x6a, 0x00, 0x44, 0x23, 0xf6, 0x3a,
	0x55, 0x6b, 0xd9, 0x5a, 0x9d, 0xc1, 0x11, 0x09, 0xda, 0x80, 0x8a, 0x59, 0xed, 0x9f, 0xf4, 0x68,
	0x75, 0x62, 0xd9, 0x5a, 0x2d, 0x37, 0xe7, 0x1a, 0xfd, 0x40, 0x1b, 0x5b, 0x11, 0x1d, 0x8e, 0x21,
	0xd1, 0x22, 0xcc, 0xf8, 0xc4, 0xa3, 0xa2, 0x47, 0x6c, 0x5a, 0x9d, 0x54, 0x86, 0x87, 0x02, 0xd4,
	0x80, 0x52, 0x78, 0xaa, 0x8f, 0x1d, 0x21, 0xab, 0x53, 0xca, 0x26, 0x6a, 0x98, 0x63, 0x36, 0xf6,
	0xb5, 0x06, 0x0f, 0x30, 0x68, 0x05, 0x8a, 0x47, 0x94, 0x74, 0x28, 0xaf, 0x4e, 0x2b, 0xf4, 0xac,
	0x89, 0xa0, 0xa5, 0xa4, 0x58, 0x6b, 0xd1, 0x1c, 0x4c, 0x3b, 0x7e, 0x2f, 0x90, 0xd5, 0xe2, 0xb2,
	0xb5, 0x5a, 0xc1, 0xfd, 0x05, 0xda, 0x81, 0x25, 0xa1, 0xf3, 0xb1, 0xcf, 0xb6, 0x5d, 0x26, 0xe8,
	0xbe, 0xe3, 0x51, 0x16, 0xc8, 0x36, 0xb5, 0x99, 0xdf, 0x11, 0xd5, 0x73, 0xcb, 0xd6, 0xea, 0x34,
	0x4e, 0x07, 0xc5, 0xad, 0xb4, 0x25, 0xe1, 0x32, 0x61, 0xa5, 0x94, 0xb4, 0x32, 0x02, 0x84, 0x3e,
	0x84, 0x05, 0xa1, 0xc4, 0x23, 0x03, 0x99, 0x51, 0x26, 0x52, 0x10, 0x68, 0x03, 0xae, 0x1c, 0x51,
	0xc2, 0xe5, 0x01, 0x25, 0x49, 0xff, 0xa0, 0x36, 0x8f, 0x53, 0xa3, 0x3b, 0x50, 0xe6, 0x54, 0xf2,
	0x93, 0x47, 0xcc, 0x75, 0xec, 0x93, 0x6a, 0x59, 0x25, 0xf2, 0xb2, 0x49, 0x24, 0x1e, 0xaa, 0x70,
	0x14, 0x57, 0x7f, 0x00, 0x37, 0x30, 0xfd, 0x32, 0xa0, 0x42, 0x6e, 0x13, 0xdf, 0xa6, 0xee, 0x9b,
	0x7d, 0x51, 0xf5, 0xa7, 0xb0, 0x38, 0x48, 0x0b, 0x1f, 0xb1, 0xbf, 0x0a, 0xe7, 0x64, 0xa8, 0x1a,
	0x6c, 0x36, 0x4b, 0x74, 0x17, 0xae, 0xea, 0xbc, 0xdc, 0x77, 0x78, 0x32, 0x71, 0xe1, 0x87, 0x39,
	0x89, 0xc7, 0x03, 0xea, 0xbb, 0x70, 0x63, 0x9b, 0x79, 0x3d, 0x97, 0x4a, 0xfa, 0x98, 0xf1, 0xee,
	0xa1, 0xcb, 0x8e, 0x77, 0x4d, 0xfd, 0x8c, 0x08, 0x63, 0x1e, 0x8a, 0x9c, 0x8a, 0xc0, 0x95, 0x2a,
	0x8a, 0x0a, 0xd6, 0xab, 0xfa, 0xe7, 0x70, 0xed, 0x3e, 0x71, 0xdc, 0xcc, 0x26, 0x88, 0x60, 0xbe,
	0x3e, 0x88, 0x5e, 0x85, 0x27, 0xec, 0x50, 0x49, 0x1c, 0xb7, 0x1f, 0x75, 0x05, 0x9b, 0x65, 0xfd,
	0x7d, 0x58, 0xea, 0xe7, 0x38, 0x77, 0x72, 0xea, 0xbb, 0x70, 0xbd, 0xbf, 0x35, 0x4b, 0x64, 0x91,
	0x08, 0xac, 0x78, 0x04, 0x7f, 0x58, 0xb0, 0x11, 0xbb, 0xed, 0xdd, 0x67, 0x92, 0x72, 0x9f, 0x64,
	0x32, 0x1b, 0x2b, 0x79, 0x2b, 0x59, 0xf2, 0x35, 0x80, 0x63, 0x6d, 0x64, 0xaf, 0xa3, 0x4e, 0x3e,
	0x83, 0x23, 0x92, 0xb0, 0x74, 0x79, 0xe0, 0xef, 0x75, 0x74, 0xb3, 0xe8, 0x2f, 0xc2, 0x50, 0x6d,
	0xe6, 0x4b, 0xce, 0x5c, 0xd5, 0x27, 0x2a, 0xd8, 0x2c, 0xd1, 0xbb, 0x70, 0xc9, 0x3e, 0x72, 0xdc,
	0x8e, 0x89, 0xec, 0x13, 0xdf, 0x3d, 0x51, 0xdd, 0xa1, 0x84, 0x4f, 0x2b, 0xea, 0xdf, 0x4c, 0xc0,
	0xad, 0xb6, 0xf3, 0xc4, 0x27, 0x6f, 0xf1, 0x44, 0x9b, 0x30, 0x33, 0x68, 0xc1, 0xba, 0x33, 0x2e,
	0x36, 0x06, 0x92, 0xc6, 0x29, 0x07, 0x78, 0x08, 0x0f, 0xb3, 0x21, 0x54, 0x38, 0x0f, 0x89, 0x67,
	0xfa, 0x63, 0x44, 0x32, 0x6c, 0x64, 0x53, 0xd1, 0x46, 0x16, 0xc9, 0xc6, 0x74, 0x86, 0x6c, 0x14,
	0xc7, 0x65, 0xe3, 0x19, 0xac, 0x7f, 0xda, 0x13, 0x94, 0x4b, 0x23, 0x6d, 0x53, 0xc2, 0xed, 0xa3,
	0xe1, 0xc9, 0x47, 0xe4, 0x62, 0x07, 0x2e, 0x8a, 0x04, 0x4a, 0xa5, 0xa4, 0xdc, 0xac, 0x9a, 0x1e,
	0x92, 0xb4, 0x82, 0x4f, 0xed, 0xa8, 0x7f, 0x65, 0x41, 0x0d, 0x53, 0x9b, 0xf1, 0xce, 0x03, 0xc2,
	0xbb, 0x23, 0x3f, 0xf2, 0x1a, 0x80, 0xa7, 0x74, 0x2a, 0x35, 0xba, 0x83, 0x0c, 0x25, 0xe3, 0xeb,
	0x27, 0xc2, 0x12, 0x93, 0x69, 0x2c, 0x51, 0xff, 0xab, 0x08, 0xeb, 0xdb, 0xcc, 0x97, 0x8e, 0x1f,
	0xd0, 0x2d, 0xf1, 0x90, 0x1e, 0x67, 0xf9, 0x16, 0x36, 0xa0, 0x62, 0xbe, 0x56, 0x45, 0x85, 0x56,
	0x9c, 0x0a, 0x1f, 0x47, 0x74, 0x38, 0x86, 0x8c, 0x91, 0xdd, 0x44, 0x06, 0xb2, 0x1b, 0xdc, 0xfd,
	0x64, 0xf4, 0xee, 0x5b, 0xf0, 0xff, 0xe3, 0x64, 0x98, 0x89, 0x26, 0x38, 0xa5, 0x08, 0xe0, 0x2c,
	0x58, 0xd8, 0x48, 0x0d, 0x04, 0x07, 0x49, 0x1b, 0xd3, 0xca, 0xc6, 0x78, 0x40, 0x48, 0x60, 0x83,
	0xd3, 0x11, 0xd1, 0x4d, 0x6c, 0x2f, 0xf6, 0x09, 0x6c, 0x3c, 0x22, 0xa4, 0xd1, 0x03, 0x62, 0x77,
	0xd9, 0xe1, 0xa1, 0xe2, 0x81, 0x3d, 0x5f, 0x52, 0xfe, 0x94, 0xb8, 0x7b, 0x7e, 0x82, 0x8c, 0x53,
	0x41, 0x49, 0x32, 0x2b, 0x65, 0x23, 0x33, 0x74, 0x17, 0x66, 0x1c, 0xdf, 0x91, 0x0e, 0x91, 0x8c,
	0x2b, 0xb2, 0x9d, 0x6d, 0xd6, 0xcc, 0xa6, 0xd8, 0x17, 0xb1, 0x67, 0x50, 0x78, 0xb8, 0x01, 0xbd,
	0x03, 0xe7, 0x0f, 0x89, 0xe3, 0x06, 0x9c, 0xe2, 0x7e, 0x63, 0x07, 0xf5, 0x71, 0xc6, 0x85, 0x68,
	0x05, 0x66, 0xb5, 0x60, 0x47, 0x7f, 0xa6, 0x65, 0x75, 0x8f, 0x09, 0x29, 0x6a, 0xc2, 0x9c, 0x4b,
	0x84, 0xd4, 0xac, 0x14, 0xf6, 0x87, 0x3e, 0xe1, 0x54, 0x14, 0x7a, 0xa4, 0x0e, 0xd5, 0xa1, 0x62,
	0x73, 0xe6, 0x9b, 0xd7, 0x5d, 0xf5, 0xbc, 0x0a, 0x20, 0x26, 0x8b, 0x54, 0xc1, 0x6c, 0xea, 0x5b,
	0x69, 0x19, 0xa6, 0x3c, 0xea, 0xb1, 0xea, 0x05, 0x85, 0xaa, 0x18, 0xd4, 0x03, 0xea, 0x31, 0xac,
	0x34, 0x23, 0x4b, 0xfe, 0x62, 0xee, 0x92, 0x7f, 0x51, 0x84, 0x9b, 0xea, 0x16, 0xb7, 0xa3, 0x7d,
	0xe8, 0xdf, 0x23, 0x92, 0x64, 0xa1, 0x4e, 0xbe, 0x56, 0xa1, 0x4e, 0xe5, 0x29, 0xd4, 0xe9, 0x9c,
	0x85, 0x5a, 0x7c, 0x0b, 0x85, 0x7a, 0xee, 0xcd, 0x0a, 0xb5, 0x74, 0x66, 0xa1, 0x7e, 0x04, 0x97,
	0x7a, 0x84, 0x53, 0x5f, 0xaa, 0x67, 0xa8, 0x2e, 0xb4, 0x7e, 0xcd, 0x5c, 0x35, 0xc9, 0x7c, 0x94,
	0x04, 0xe0, 0xd3, 0x7b, 0xa2, 0xac, 0x05, 0x71, 0xd6, 0x6a, 0xc3, 0xff, 0x86, 0x17, 0x87, 0x69,
	0x30, 0x70, 0x53, 0x56, 0x6e, 0x96, 0x92, 0x77, 0x16, 0x03, 0xe1, 0xd1, 0x7b, 0x93, 0xad, 0xa1,
	0x92, 0xb1, 0x35, 0xfc, 0x17, 0x4b, 0xeb, 0xef, 0x0b, 0x50, 0x32, 0xf5, 0x83, 0x36, 0xa1, 0x62,
	0x86, 0xca, 0x01, 0x41, 0xcd, 0x36, 0xe7, 0x1b, 0x46, 0xd8, 0xd8, 0x89, 0x68, 0x71, 0x0c, 0x8b,
	0xbe, 0xb6, 0x60, 0x45, 0x64, 0x1a, 0x19, 0x35, 0x83, 0xad, 0x0f, 0xcd, 0x66, 0x1b, 0x35, 0x5b,
	0x05, 0x9c, 0xd1, 0x03, 0x72, 0x61, 0x51, 0xa4, 0x8c, 0x08, 0xba, 0xa0, 0x57, 0x22, 0x11, 0xa4,
	0xa0, 0x5b, 0x05, 0x9c, 0x6a, 0x0d, 0xfd, 0x60, 0xc1, 0x0d, 0x3b, 0xfb, 0x64, 0xa0, 0x1b, 0xc3,
	0x9d, 0xa1, 0xf7, 0x1c, 0x63, 0x45, 0xab, 0x80, 0xf3, 0xf8, 0x42, 0xdf, 0x5a, 0x70, 0xed, 0x30,
	0xdb, 0xb8, 0xa1, 0x07, 0xe3, 0x5b, 0xc3, 0xb8, 0x32, 0xce, 0x29, 0xad, 0x02, 0xce, 0xea, 0x43,
	0xe5, 0x8a, 0x67, 0x1f, 0x06, 0x55, 0x9f, 0x8b, 0xe5, 0x2a, 0xc7, 0x24, 0x19, 0xe6, 0x2a, 0x87,
	0x2f, 0xc4, 0x60, 0xc9, 0x4e, 0x1b, 0x9e, 0x54, 0xc3, 0x2c, 0x37, 0xaf, 0x45, 0x2e, 0x2e, 0x0d,
	0xde, 0x2a, 0xe0, 0x74, 0x7b, 0xe8, 0x7b, 0x0b, 0xae, 0xdb, 0x59, 0x67, 0x2e, 0xfd, 0x42, 0xb9,
	0x9d, 0xf4, 0x9e, 0xed, 0x82, 0xb2, 0xfb, 0x41, 0xbf, 0x5a, 0xb0, 0xc1, 0x5f, 0x73, 0x82, 0x53,
	0xdd, 0xbd, 0xdc, 0xbc, 0x37, 0xe6, 0xbe, 0x72, 0x58, 0x6a, 0x15, 0xf0, 0x6b, 0x47, 0x81, 0x38,
	0xd4, 0x78, 0xea, 0x88, 0xa0, 0x68, 0xa4, 0xdc, 0x5c, 0x8d, 0xc6, 0x99, 0x86, 0x6f, 0x15, 0xf0,
	0x19, 0x16, 0xd1, 0xcf, 0x16, 0xac, 0xdb, 0x39, 0x47, 0x02, 0xfd, 0x17, 0xca, 0x66, 0xb4, 0x15,
	0xe4, 0xb3, 0xd0, 0x2a, 0xe0, 0xdc, 0x5e, 0xd1, 0x4f, 0x16, 0xdc, 0x14, 0x79, 0xde, 0x53, 0x9a,
	0x02, 0xdf, 0x4b, 0x34, 0xcc, 0xac, 0xdb, 0x5b, 0x05, 0x9c, 0xcf, 0x1f, 0xfa, 0xc5, 0x82, 0x5b,
	0x22, 0xef, 0xb0, 0xad, 0x08, 0xb7, 0xdc, 0xfc, 0x20, 0x12, 0x65, 0x5e, 0x13, 0xad, 0x02, 0xce,
	0xef, 0x57, 0x5d, 0x7d, 0x90, 0x73, 0x1a, 0xd6, 0xfc, 0x1f, 0xb9, 0xfa, 0xbc, 0xf3, 0x74, 0x78,
	0xf5, 0x79, 0xbd, 0xde, 0xab, 0x00, 0x90, 0x21, 0xfb, 0xff, 0x68, 0xc1, 0xd5, 0xb6, 0x74, 0xec,
	0xee, 0xc9, 0xe0, 0x78, 0x91, 0x63, 0x6d, 0xc2, 0x6c, 0xf8, 0x3e, 0xa2, 0xdc, 0x3c, 0x5c, 0xf5,
	0xc4, 0x3a, 0xea, 0x49, 0x9b, 0x40, 0x9e, 0xfd, 0x57, 0xe7, 0x44, 0x86, 0xbf, 0x3a, 0xef, 0x7d,
	0xf1, 0xdb, 0xcb, 0x9a, 0xf5, 0xfc, 0x65, 0xcd, 0xfa, 0xf3, 0x65, 0xcd, 0xfa, 0xee, 0x55, 0xad,
	0xf0, 0xfc, 0x55, 0xad, 0xf0, 0xe2, 0x55, 0xad, 0x00, 0x0b, 0x0e, 0x6b, 0x48, 0xea, 0xf5, 0x18,
	0x27, 0x6e, 0xff, 0x4f, 0xeb, 0x41, 0x22, 0x1f, 0x59, 0x9f, 0xad, 0x3c, 0x89, 0x68, 0x1d, 0xb6,
	0x66, 0x7e, 0xdf, 0x54, 0xc8, 0x35, 0x83, 0x3c, 0x28, 0xaa, 0xf5, 0xed, 0x7f, 0x02, 0x00, 0x00,
	0xff, 0xff, 0xac, 0x91, 0x5d, 0x17, 0x81, 0x17, 0x00, 0x00,
}

func (m *ScheduleActivityTaskDecisionAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScheduleActivityTaskDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScheduleActivityTaskDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RetryPolicy != nil {
		{
			size, err := m.RetryPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.HeartbeatTimeoutSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.HeartbeatTimeoutSeconds))
		i--
		dAtA[i] = 0x50
	}
	if m.StartToCloseTimeoutSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartToCloseTimeoutSeconds))
		i--
		dAtA[i] = 0x48
	}
	if m.ScheduleToStartTimeoutSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ScheduleToStartTimeoutSeconds))
		i--
		dAtA[i] = 0x40
	}
	if m.ScheduleToCloseTimeoutSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ScheduleToCloseTimeoutSeconds))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Input) > 0 {
		i -= len(m.Input)
		copy(dAtA[i:], m.Input)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Input)))
		i--
		dAtA[i] = 0x32
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.TaskList != nil {
		{
			size, err := m.TaskList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ActivityType != nil {
		{
			size, err := m.ActivityType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ActivityId) > 0 {
		i -= len(m.ActivityId)
		copy(dAtA[i:], m.ActivityId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ActivityId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestCancelActivityTaskDecisionAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestCancelActivityTaskDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestCancelActivityTaskDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ActivityId) > 0 {
		i -= len(m.ActivityId)
		copy(dAtA[i:], m.ActivityId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ActivityId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StartTimerDecisionAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartTimerDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartTimerDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StartToFireTimeoutSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartToFireTimeoutSeconds))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TimerId) > 0 {
		i -= len(m.TimerId)
		copy(dAtA[i:], m.TimerId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TimerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CompleteWorkflowExecutionDecisionAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompleteWorkflowExecutionDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompleteWorkflowExecutionDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FailWorkflowExecutionDecisionAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FailWorkflowExecutionDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailWorkflowExecutionDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Details) > 0 {
		i -= len(m.Details)
		copy(dAtA[i:], m.Details)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Details)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CancelTimerDecisionAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelTimerDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CancelTimerDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TimerId) > 0 {
		i -= len(m.TimerId)
		copy(dAtA[i:], m.TimerId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TimerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CancelWorkflowExecutionDecisionAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelWorkflowExecutionDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CancelWorkflowExecutionDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Details) > 0 {
		i -= len(m.Details)
		copy(dAtA[i:], m.Details)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Details)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestCancelExternalWorkflowExecutionDecisionAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestCancelExternalWorkflowExecutionDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestCancelExternalWorkflowExecutionDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChildWorkflowOnly {
		i--
		if m.ChildWorkflowOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Control) > 0 {
		i -= len(m.Control)
		copy(dAtA[i:], m.Control)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Control)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RunId) > 0 {
		i -= len(m.RunId)
		copy(dAtA[i:], m.RunId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.RunId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WorkflowId) > 0 {
		i -= len(m.WorkflowId)
		copy(dAtA[i:], m.WorkflowId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.WorkflowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignalExternalWorkflowExecutionDecisionAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignalExternalWorkflowExecutionDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignalExternalWorkflowExecutionDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChildWorkflowOnly {
		i--
		if m.ChildWorkflowOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.Control) > 0 {
		i -= len(m.Control)
		copy(dAtA[i:], m.Control)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Control)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Input) > 0 {
		i -= len(m.Input)
		copy(dAtA[i:], m.Input)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Input)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SignalName) > 0 {
		i -= len(m.SignalName)
		copy(dAtA[i:], m.SignalName)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.SignalName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Execution != nil {
		{
			size, err := m.Execution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpsertWorkflowSearchAttributesDecisionAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertWorkflowSearchAttributesDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpsertWorkflowSearchAttributesDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SearchAttributes != nil {
		{
			size, err := m.SearchAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecordMarkerDecisionAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordMarkerDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordMarkerDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Details) > 0 {
		i -= len(m.Details)
		copy(dAtA[i:], m.Details)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Details)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MarkerName) > 0 {
		i -= len(m.MarkerName)
		copy(dAtA[i:], m.MarkerName)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.MarkerName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SearchAttributes != nil {
		{
			size, err := m.SearchAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Memo != nil {
		{
			size, err := m.Memo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if len(m.CronSchedule) > 0 {
		i -= len(m.CronSchedule)
		copy(dAtA[i:], m.CronSchedule)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.CronSchedule)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.LastCompletionResult) > 0 {
		i -= len(m.LastCompletionResult)
		copy(dAtA[i:], m.LastCompletionResult)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.LastCompletionResult)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.FailureDetails) > 0 {
		i -= len(m.FailureDetails)
		copy(dAtA[i:], m.FailureDetails)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.FailureDetails)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.FailureReason) > 0 {
		i -= len(m.FailureReason)
		copy(dAtA[i:], m.FailureReason)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.FailureReason)))
		i--
		dAtA[i] = 0x52
	}
	if m.Initiator != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Initiator))
		i--
		dAtA[i] = 0x48
	}
	if m.RetryPolicy != nil {
		{
			size, err := m.RetryPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.BackoffStartIntervalInSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.BackoffStartIntervalInSeconds))
		i--
		dAtA[i] = 0x38
	}
	if m.WorkflowTaskTimeoutSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.WorkflowTaskTimeoutSeconds))
		i--
		dAtA[i] = 0x30
	}
	if m.WorkflowRunTimeoutSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.WorkflowRunTimeoutSeconds))
		i--
		dAtA[i] = 0x28
	}
	if m.WorkflowExecutionTimeoutSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.WorkflowExecutionTimeoutSeconds))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Input) > 0 {
		i -= len(m.Input)
		copy(dAtA[i:], m.Input)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Input)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TaskList != nil {
		{
			size, err := m.TaskList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.WorkflowType != nil {
		{
			size, err := m.WorkflowType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StartChildWorkflowExecutionDecisionAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartChildWorkflowExecutionDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartChildWorkflowExecutionDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SearchAttributes != nil {
		{
			size, err := m.SearchAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Memo != nil {
		{
			size, err := m.Memo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if len(m.CronSchedule) > 0 {
		i -= len(m.CronSchedule)
		copy(dAtA[i:], m.CronSchedule)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.CronSchedule)))
		i--
		dAtA[i] = 0x6a
	}
	if m.RetryPolicy != nil {
		{
			size, err := m.RetryPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.WorkflowIdReusePolicy != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.WorkflowIdReusePolicy))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Control) > 0 {
		i -= len(m.Control)
		copy(dAtA[i:], m.Control)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Control)))
		i--
		dAtA[i] = 0x52
	}
	if m.ParentClosePolicy != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ParentClosePolicy))
		i--
		dAtA[i] = 0x48
	}
	if m.WorkflowTaskTimeoutSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.WorkflowTaskTimeoutSeconds))
		i--
		dAtA[i] = 0x40
	}
	if m.WorkflowRunTimeoutSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.WorkflowRunTimeoutSeconds))
		i--
		dAtA[i] = 0x38
	}
	if m.WorkflowExecutionTimeoutSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.WorkflowExecutionTimeoutSeconds))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Input) > 0 {
		i -= len(m.Input)
		copy(dAtA[i:], m.Input)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Input)))
		i--
		dAtA[i] = 0x2a
	}
	if m.TaskList != nil {
		{
			size, err := m.TaskList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.WorkflowType != nil {
		{
			size, err := m.WorkflowType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WorkflowId) > 0 {
		i -= len(m.WorkflowId)
		copy(dAtA[i:], m.WorkflowId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.WorkflowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Decision) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Decision) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Decision) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Attributes != nil {
		{
			size := m.Attributes.Size()
			i -= size
			if _, err := m.Attributes.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DecisionType != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.DecisionType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Decision_ScheduleActivityTaskDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Decision_ScheduleActivityTaskDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ScheduleActivityTaskDecisionAttributes != nil {
		{
			size, err := m.ScheduleActivityTaskDecisionAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Decision_StartTimerDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Decision_StartTimerDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StartTimerDecisionAttributes != nil {
		{
			size, err := m.StartTimerDecisionAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Decision_CompleteWorkflowExecutionDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Decision_CompleteWorkflowExecutionDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CompleteWorkflowExecutionDecisionAttributes != nil {
		{
			size, err := m.CompleteWorkflowExecutionDecisionAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Decision_FailWorkflowExecutionDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Decision_FailWorkflowExecutionDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FailWorkflowExecutionDecisionAttributes != nil {
		{
			size, err := m.FailWorkflowExecutionDecisionAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Decision_RequestCancelActivityTaskDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Decision_RequestCancelActivityTaskDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RequestCancelActivityTaskDecisionAttributes != nil {
		{
			size, err := m.RequestCancelActivityTaskDecisionAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *Decision_CancelTimerDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Decision_CancelTimerDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CancelTimerDecisionAttributes != nil {
		{
			size, err := m.CancelTimerDecisionAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *Decision_CancelWorkflowExecutionDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Decision_CancelWorkflowExecutionDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CancelWorkflowExecutionDecisionAttributes != nil {
		{
			size, err := m.CancelWorkflowExecutionDecisionAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *Decision_RequestCancelExternalWorkflowExecutionDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Decision_RequestCancelExternalWorkflowExecutionDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RequestCancelExternalWorkflowExecutionDecisionAttributes != nil {
		{
			size, err := m.RequestCancelExternalWorkflowExecutionDecisionAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *Decision_RecordMarkerDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Decision_RecordMarkerDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RecordMarkerDecisionAttributes != nil {
		{
			size, err := m.RecordMarkerDecisionAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *Decision_ContinueAsNewWorkflowExecutionDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Decision_ContinueAsNewWorkflowExecutionDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ContinueAsNewWorkflowExecutionDecisionAttributes != nil {
		{
			size, err := m.ContinueAsNewWorkflowExecutionDecisionAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *Decision_StartChildWorkflowExecutionDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Decision_StartChildWorkflowExecutionDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StartChildWorkflowExecutionDecisionAttributes != nil {
		{
			size, err := m.StartChildWorkflowExecutionDecisionAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *Decision_SignalExternalWorkflowExecutionDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Decision_SignalExternalWorkflowExecutionDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SignalExternalWorkflowExecutionDecisionAttributes != nil {
		{
			size, err := m.SignalExternalWorkflowExecutionDecisionAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *Decision_UpsertWorkflowSearchAttributesDecisionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Decision_UpsertWorkflowSearchAttributesDecisionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpsertWorkflowSearchAttributesDecisionAttributes != nil {
		{
			size, err := m.UpsertWorkflowSearchAttributesDecisionAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *StickyExecutionAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StickyExecutionAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StickyExecutionAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ScheduleToStartTimeoutSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ScheduleToStartTimeoutSeconds))
		i--
		dAtA[i] = 0x10
	}
	if m.WorkerTaskList != nil {
		{
			size, err := m.WorkerTaskList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ScheduleActivityTaskDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ActivityId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ActivityType != nil {
		l = m.ActivityType.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.TaskList != nil {
		l = m.TaskList.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Input)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ScheduleToCloseTimeoutSeconds != 0 {
		n += 1 + sovMessage(uint64(m.ScheduleToCloseTimeoutSeconds))
	}
	if m.ScheduleToStartTimeoutSeconds != 0 {
		n += 1 + sovMessage(uint64(m.ScheduleToStartTimeoutSeconds))
	}
	if m.StartToCloseTimeoutSeconds != 0 {
		n += 1 + sovMessage(uint64(m.StartToCloseTimeoutSeconds))
	}
	if m.HeartbeatTimeoutSeconds != 0 {
		n += 1 + sovMessage(uint64(m.HeartbeatTimeoutSeconds))
	}
	if m.RetryPolicy != nil {
		l = m.RetryPolicy.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *RequestCancelActivityTaskDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ActivityId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *StartTimerDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TimerId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.StartToFireTimeoutSeconds != 0 {
		n += 1 + sovMessage(uint64(m.StartToFireTimeoutSeconds))
	}
	return n
}

func (m *CompleteWorkflowExecutionDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *FailWorkflowExecutionDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Details)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *CancelTimerDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TimerId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *CancelWorkflowExecutionDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Details)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *RequestCancelExternalWorkflowExecutionDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.WorkflowId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.RunId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Control)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ChildWorkflowOnly {
		n += 2
	}
	return n
}

func (m *SignalExternalWorkflowExecutionDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Execution != nil {
		l = m.Execution.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.SignalName)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Input)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Control)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ChildWorkflowOnly {
		n += 2
	}
	return n
}

func (m *UpsertWorkflowSearchAttributesDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SearchAttributes != nil {
		l = m.SearchAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *RecordMarkerDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarkerName)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Details)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkflowType != nil {
		l = m.WorkflowType.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.TaskList != nil {
		l = m.TaskList.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Input)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowExecutionTimeoutSeconds != 0 {
		n += 1 + sovMessage(uint64(m.WorkflowExecutionTimeoutSeconds))
	}
	if m.WorkflowRunTimeoutSeconds != 0 {
		n += 1 + sovMessage(uint64(m.WorkflowRunTimeoutSeconds))
	}
	if m.WorkflowTaskTimeoutSeconds != 0 {
		n += 1 + sovMessage(uint64(m.WorkflowTaskTimeoutSeconds))
	}
	if m.BackoffStartIntervalInSeconds != 0 {
		n += 1 + sovMessage(uint64(m.BackoffStartIntervalInSeconds))
	}
	if m.RetryPolicy != nil {
		l = m.RetryPolicy.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Initiator != 0 {
		n += 1 + sovMessage(uint64(m.Initiator))
	}
	l = len(m.FailureReason)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.FailureDetails)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.LastCompletionResult)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.CronSchedule)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Memo != nil {
		l = m.Memo.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.SearchAttributes != nil {
		l = m.SearchAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *StartChildWorkflowExecutionDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.WorkflowId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowType != nil {
		l = m.WorkflowType.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.TaskList != nil {
		l = m.TaskList.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Input)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowExecutionTimeoutSeconds != 0 {
		n += 1 + sovMessage(uint64(m.WorkflowExecutionTimeoutSeconds))
	}
	if m.WorkflowRunTimeoutSeconds != 0 {
		n += 1 + sovMessage(uint64(m.WorkflowRunTimeoutSeconds))
	}
	if m.WorkflowTaskTimeoutSeconds != 0 {
		n += 1 + sovMessage(uint64(m.WorkflowTaskTimeoutSeconds))
	}
	if m.ParentClosePolicy != 0 {
		n += 1 + sovMessage(uint64(m.ParentClosePolicy))
	}
	l = len(m.Control)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowIdReusePolicy != 0 {
		n += 1 + sovMessage(uint64(m.WorkflowIdReusePolicy))
	}
	if m.RetryPolicy != nil {
		l = m.RetryPolicy.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.CronSchedule)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Memo != nil {
		l = m.Memo.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.SearchAttributes != nil {
		l = m.SearchAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *Decision) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DecisionType != 0 {
		n += 1 + sovMessage(uint64(m.DecisionType))
	}
	if m.Attributes != nil {
		n += m.Attributes.Size()
	}
	return n
}

func (m *Decision_ScheduleActivityTaskDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScheduleActivityTaskDecisionAttributes != nil {
		l = m.ScheduleActivityTaskDecisionAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Decision_StartTimerDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartTimerDecisionAttributes != nil {
		l = m.StartTimerDecisionAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Decision_CompleteWorkflowExecutionDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CompleteWorkflowExecutionDecisionAttributes != nil {
		l = m.CompleteWorkflowExecutionDecisionAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Decision_FailWorkflowExecutionDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FailWorkflowExecutionDecisionAttributes != nil {
		l = m.FailWorkflowExecutionDecisionAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Decision_RequestCancelActivityTaskDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestCancelActivityTaskDecisionAttributes != nil {
		l = m.RequestCancelActivityTaskDecisionAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Decision_CancelTimerDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CancelTimerDecisionAttributes != nil {
		l = m.CancelTimerDecisionAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Decision_CancelWorkflowExecutionDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CancelWorkflowExecutionDecisionAttributes != nil {
		l = m.CancelWorkflowExecutionDecisionAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Decision_RequestCancelExternalWorkflowExecutionDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestCancelExternalWorkflowExecutionDecisionAttributes != nil {
		l = m.RequestCancelExternalWorkflowExecutionDecisionAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Decision_RecordMarkerDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RecordMarkerDecisionAttributes != nil {
		l = m.RecordMarkerDecisionAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Decision_ContinueAsNewWorkflowExecutionDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ContinueAsNewWorkflowExecutionDecisionAttributes != nil {
		l = m.ContinueAsNewWorkflowExecutionDecisionAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Decision_StartChildWorkflowExecutionDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartChildWorkflowExecutionDecisionAttributes != nil {
		l = m.StartChildWorkflowExecutionDecisionAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Decision_SignalExternalWorkflowExecutionDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignalExternalWorkflowExecutionDecisionAttributes != nil {
		l = m.SignalExternalWorkflowExecutionDecisionAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Decision_UpsertWorkflowSearchAttributesDecisionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpsertWorkflowSearchAttributesDecisionAttributes != nil {
		l = m.UpsertWorkflowSearchAttributesDecisionAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *StickyExecutionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkerTaskList != nil {
		l = m.WorkerTaskList.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ScheduleToStartTimeoutSeconds != 0 {
		n += 1 + sovMessage(uint64(m.ScheduleToStartTimeoutSeconds))
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ScheduleActivityTaskDecisionAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScheduleActivityTaskDecisionAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScheduleActivityTaskDecisionAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActivityType == nil {
				m.ActivityType = &common.ActivityType{}
			}
			if err := m.ActivityType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskList == nil {
				m.TaskList = &tasklist.TaskList{}
			}
			if err := m.TaskList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Input = append(m.Input[:0], dAtA[iNdEx:postIndex]...)
			if m.Input == nil {
				m.Input = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleToCloseTimeoutSeconds", wireType)
			}
			m.ScheduleToCloseTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduleToCloseTimeoutSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleToStartTimeoutSeconds", wireType)
			}
			m.ScheduleToStartTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduleToStartTimeoutSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartToCloseTimeoutSeconds", wireType)
			}
			m.StartToCloseTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartToCloseTimeoutSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatTimeoutSeconds", wireType)
			}
			m.HeartbeatTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeartbeatTimeoutSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RetryPolicy == nil {
				m.RetryPolicy = &common.RetryPolicy{}
			}
			if err := m.RetryPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestCancelActivityTaskDecisionAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestCancelActivityTaskDecisionAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestCancelActivityTaskDecisionAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartTimerDecisionAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartTimerDecisionAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartTimerDecisionAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartToFireTimeoutSeconds", wireType)
			}
			m.StartToFireTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartToFireTimeoutSeconds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompleteWorkflowExecutionDecisionAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompleteWorkflowExecutionDecisionAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompleteWorkflowExecutionDecisionAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FailWorkflowExecutionDecisionAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FailWorkflowExecutionDecisionAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FailWorkflowExecutionDecisionAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = append(m.Details[:0], dAtA[iNdEx:postIndex]...)
			if m.Details == nil {
				m.Details = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelTimerDecisionAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelTimerDecisionAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelTimerDecisionAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelWorkflowExecutionDecisionAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelWorkflowExecutionDecisionAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelWorkflowExecutionDecisionAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = append(m.Details[:0], dAtA[iNdEx:postIndex]...)
			if m.Details == nil {
				m.Details = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestCancelExternalWorkflowExecutionDecisionAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestCancelExternalWorkflowExecutionDecisionAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestCancelExternalWorkflowExecutionDecisionAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Control", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Control = append(m.Control[:0], dAtA[iNdEx:postIndex]...)
			if m.Control == nil {
				m.Control = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildWorkflowOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChildWorkflowOnly = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignalExternalWorkflowExecutionDecisionAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignalExternalWorkflowExecutionDecisionAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignalExternalWorkflowExecutionDecisionAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Execution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Execution == nil {
				m.Execution = &execution.WorkflowExecution{}
			}
			if err := m.Execution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignalName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Input = append(m.Input[:0], dAtA[iNdEx:postIndex]...)
			if m.Input == nil {
				m.Input = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Control", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Control = append(m.Control[:0], dAtA[iNdEx:postIndex]...)
			if m.Control == nil {
				m.Control = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildWorkflowOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChildWorkflowOnly = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertWorkflowSearchAttributesDecisionAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertWorkflowSearchAttributesDecisionAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertWorkflowSearchAttributesDecisionAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SearchAttributes == nil {
				m.SearchAttributes = &common.SearchAttributes{}
			}
			if err := m.SearchAttributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordMarkerDecisionAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordMarkerDecisionAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordMarkerDecisionAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarkerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarkerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = append(m.Details[:0], dAtA[iNdEx:postIndex]...)
			if m.Details == nil {
				m.Details = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContinueAsNewWorkflowExecutionDecisionAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContinueAsNewWorkflowExecutionDecisionAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContinueAsNewWorkflowExecutionDecisionAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowType == nil {
				m.WorkflowType = &common.WorkflowType{}
			}
			if err := m.WorkflowType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskList == nil {
				m.TaskList = &tasklist.TaskList{}
			}
			if err := m.TaskList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Input = append(m.Input[:0], dAtA[iNdEx:postIndex]...)
			if m.Input == nil {
				m.Input = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecutionTimeoutSeconds", wireType)
			}
			m.WorkflowExecutionTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkflowExecutionTimeoutSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowRunTimeoutSeconds", wireType)
			}
			m.WorkflowRunTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkflowRunTimeoutSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowTaskTimeoutSeconds", wireType)
			}
			m.WorkflowTaskTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkflowTaskTimeoutSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackoffStartIntervalInSeconds", wireType)
			}
			m.BackoffStartIntervalInSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BackoffStartIntervalInSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RetryPolicy == nil {
				m.RetryPolicy = &common.RetryPolicy{}
			}
			if err := m.RetryPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Initiator", wireType)
			}
			m.Initiator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Initiator |= common.ContinueAsNewInitiator(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailureReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FailureReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailureDetails", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FailureDetails = append(m.FailureDetails[:0], dAtA[iNdEx:postIndex]...)
			if m.FailureDetails == nil {
				m.FailureDetails = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastCompletionResult", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastCompletionResult = append(m.LastCompletionResult[:0], dAtA[iNdEx:postIndex]...)
			if m.LastCompletionResult == nil {
				m.LastCompletionResult = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CronSchedule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CronSchedule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Memo == nil {
				m.Memo = &common.Memo{}
			}
			if err := m.Memo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SearchAttributes == nil {
				m.SearchAttributes = &common.SearchAttributes{}
			}
			if err := m.SearchAttributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartChildWorkflowExecutionDecisionAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartChildWorkflowExecutionDecisionAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartChildWorkflowExecutionDecisionAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowType == nil {
				m.WorkflowType = &common.WorkflowType{}
			}
			if err := m.WorkflowType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskList == nil {
				m.TaskList = &tasklist.TaskList{}
			}
			if err := m.TaskList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Input = append(m.Input[:0], dAtA[iNdEx:postIndex]...)
			if m.Input == nil {
				m.Input = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecutionTimeoutSeconds", wireType)
			}
			m.WorkflowExecutionTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkflowExecutionTimeoutSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowRunTimeoutSeconds", wireType)
			}
			m.WorkflowRunTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkflowRunTimeoutSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowTaskTimeoutSeconds", wireType)
			}
			m.WorkflowTaskTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkflowTaskTimeoutSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentClosePolicy", wireType)
			}
			m.ParentClosePolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentClosePolicy |= common.ParentClosePolicy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Control", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Control = append(m.Control[:0], dAtA[iNdEx:postIndex]...)
			if m.Control == nil {
				m.Control = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowIdReusePolicy", wireType)
			}
			m.WorkflowIdReusePolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkflowIdReusePolicy |= common.WorkflowIdReusePolicy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RetryPolicy == nil {
				m.RetryPolicy = &common.RetryPolicy{}
			}
			if err := m.RetryPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CronSchedule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CronSchedule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Memo == nil {
				m.Memo = &common.Memo{}
			}
			if err := m.Memo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SearchAttributes == nil {
				m.SearchAttributes = &common.SearchAttributes{}
			}
			if err := m.SearchAttributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Decision) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Decision: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Decision: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionType", wireType)
			}
			m.DecisionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecisionType |= DecisionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleActivityTaskDecisionAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ScheduleActivityTaskDecisionAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &Decision_ScheduleActivityTaskDecisionAttributes{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimerDecisionAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StartTimerDecisionAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &Decision_StartTimerDecisionAttributes{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteWorkflowExecutionDecisionAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CompleteWorkflowExecutionDecisionAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &Decision_CompleteWorkflowExecutionDecisionAttributes{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailWorkflowExecutionDecisionAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FailWorkflowExecutionDecisionAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &Decision_FailWorkflowExecutionDecisionAttributes{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestCancelActivityTaskDecisionAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestCancelActivityTaskDecisionAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &Decision_RequestCancelActivityTaskDecisionAttributes{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelTimerDecisionAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CancelTimerDecisionAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &Decision_CancelTimerDecisionAttributes{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelWorkflowExecutionDecisionAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CancelWorkflowExecutionDecisionAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &Decision_CancelWorkflowExecutionDecisionAttributes{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestCancelExternalWorkflowExecutionDecisionAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestCancelExternalWorkflowExecutionDecisionAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &Decision_RequestCancelExternalWorkflowExecutionDecisionAttributes{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordMarkerDecisionAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RecordMarkerDecisionAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &Decision_RecordMarkerDecisionAttributes{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContinueAsNewWorkflowExecutionDecisionAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ContinueAsNewWorkflowExecutionDecisionAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &Decision_ContinueAsNewWorkflowExecutionDecisionAttributes{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartChildWorkflowExecutionDecisionAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StartChildWorkflowExecutionDecisionAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &Decision_StartChildWorkflowExecutionDecisionAttributes{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalExternalWorkflowExecutionDecisionAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SignalExternalWorkflowExecutionDecisionAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &Decision_SignalExternalWorkflowExecutionDecisionAttributes{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpsertWorkflowSearchAttributesDecisionAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpsertWorkflowSearchAttributesDecisionAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &Decision_UpsertWorkflowSearchAttributesDecisionAttributes{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StickyExecutionAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StickyExecutionAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StickyExecutionAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerTaskList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkerTaskList == nil {
				m.WorkerTaskList = &tasklist.TaskList{}
			}
			if err := m.WorkerTaskList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleToStartTimeoutSeconds", wireType)
			}
			m.ScheduleToStartTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduleToStartTimeoutSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)

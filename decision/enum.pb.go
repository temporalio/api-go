// The MIT License (MIT)
//
// Copyright (c) 2020 Temporal Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: decision/enum.proto

package decision

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
	strconv "strconv"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Whenever this list of decision is changed do change the function shouldBufferEvent in mutableStateBuilder.go to make sure to do the correct event ordering.
type DecisionType int32

const (
	DecisionTypeScheduleActivityTask                   DecisionType = 0
	DecisionTypeRequestCancelActivityTask              DecisionType = 1
	DecisionTypeStartTimer                             DecisionType = 2
	DecisionTypeCompleteWorkflowExecution              DecisionType = 3
	DecisionTypeFailWorkflowExecution                  DecisionType = 4
	DecisionTypeCancelTimer                            DecisionType = 5
	DecisionTypeCancelWorkflowExecution                DecisionType = 6
	DecisionTypeRequestCancelExternalWorkflowExecution DecisionType = 7
	DecisionTypeRecordMarker                           DecisionType = 8
	DecisionTypeContinueAsNewWorkflowExecution         DecisionType = 9
	DecisionTypeStartChildWorkflowExecution            DecisionType = 10
	DecisionTypeSignalExternalWorkflowExecution        DecisionType = 11
	DecisionTypeUpsertWorkflowSearchAttributes         DecisionType = 12
)

var DecisionType_name = map[int32]string{
	0:  "DecisionTypeScheduleActivityTask",
	1:  "DecisionTypeRequestCancelActivityTask",
	2:  "DecisionTypeStartTimer",
	3:  "DecisionTypeCompleteWorkflowExecution",
	4:  "DecisionTypeFailWorkflowExecution",
	5:  "DecisionTypeCancelTimer",
	6:  "DecisionTypeCancelWorkflowExecution",
	7:  "DecisionTypeRequestCancelExternalWorkflowExecution",
	8:  "DecisionTypeRecordMarker",
	9:  "DecisionTypeContinueAsNewWorkflowExecution",
	10: "DecisionTypeStartChildWorkflowExecution",
	11: "DecisionTypeSignalExternalWorkflowExecution",
	12: "DecisionTypeUpsertWorkflowSearchAttributes",
}

var DecisionType_value = map[string]int32{
	"DecisionTypeScheduleActivityTask":                   0,
	"DecisionTypeRequestCancelActivityTask":              1,
	"DecisionTypeStartTimer":                             2,
	"DecisionTypeCompleteWorkflowExecution":              3,
	"DecisionTypeFailWorkflowExecution":                  4,
	"DecisionTypeCancelTimer":                            5,
	"DecisionTypeCancelWorkflowExecution":                6,
	"DecisionTypeRequestCancelExternalWorkflowExecution": 7,
	"DecisionTypeRecordMarker":                           8,
	"DecisionTypeContinueAsNewWorkflowExecution":         9,
	"DecisionTypeStartChildWorkflowExecution":            10,
	"DecisionTypeSignalExternalWorkflowExecution":        11,
	"DecisionTypeUpsertWorkflowSearchAttributes":         12,
}

func (DecisionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_440f1ae40d978a76, []int{0}
}

func init() {
	proto.RegisterEnum("decision.DecisionType", DecisionType_name, DecisionType_value)
}

func init() { proto.RegisterFile("decision/enum.proto", fileDescriptor_440f1ae40d978a76) }

var fileDescriptor_440f1ae40d978a76 = []byte{
	// 391 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x41, 0x6f, 0xda, 0x30,
	0x14, 0xc7, 0xe3, 0x8d, 0x31, 0xe6, 0x71, 0x88, 0x3c, 0x69, 0x9b, 0xd8, 0x64, 0x6d, 0xda, 0x18,
	0x1a, 0x68, 0x89, 0xb4, 0x4a, 0xbd, 0x53, 0x4a, 0x6f, 0xad, 0xaa, 0x42, 0x55, 0xa9, 0x37, 0x93,
	0xbc, 0x82, 0x45, 0x62, 0xa7, 0x8e, 0x53, 0xa0, 0xa7, 0x7e, 0x84, 0x7e, 0x8b, 0xf6, 0xa3, 0xf4,
	0xc8, 0x91, 0x63, 0x09, 0x97, 0x1e, 0xf9, 0x08, 0x95, 0xa0, 0x91, 0x12, 0xd2, 0xf6, 0xe6, 0xbf,
	0xdf, 0xef, 0xfd, 0xfd, 0x7f, 0xd6, 0xc3, 0x9f, 0x5c, 0x70, 0x78, 0xc8, 0xa5, 0xb0, 0x41, 0x44,
	0xbe, 0x15, 0x28, 0xa9, 0x25, 0x29, 0x25, 0x97, 0xf5, 0x9b, 0x02, 0x2e, 0xef, 0x3e, 0x89, 0xee,
	0x24, 0x00, 0xf2, 0x1b, 0xff, 0x48, 0xeb, 0x8e, 0x33, 0x00, 0x37, 0xf2, 0xa0, 0xe9, 0x68, 0x7e,
	0xc1, 0xf5, 0xa4, 0xcb, 0xc2, 0xa1, 0x69, 0x90, 0xbf, 0xb8, 0x9a, 0xa6, 0x8e, 0xe0, 0x3c, 0x82,
	0x50, 0xb7, 0x98, 0x70, 0xc0, 0xcb, 0xa0, 0x88, 0x54, 0xf0, 0xe7, 0x8c, 0xa1, 0x66, 0x4a, 0x77,
	0xb9, 0x0f, 0xca, 0x7c, 0xb3, 0x69, 0xd3, 0x92, 0x7e, 0xe0, 0x81, 0x86, 0x13, 0xa9, 0x86, 0x67,
	0x9e, 0x1c, 0xb5, 0xc7, 0xe0, 0x44, 0x9a, 0x4b, 0x61, 0xbe, 0x25, 0x55, 0xfc, 0x33, 0x8d, 0xee,
	0x31, 0xee, 0xe5, 0xb1, 0x02, 0xf9, 0x86, 0xbf, 0x64, 0x1c, 0x57, 0x89, 0xd6, 0xcf, 0xbd, 0x23,
	0x35, 0xfc, 0x2b, 0x5f, 0xcc, 0xbb, 0x14, 0xc9, 0x36, 0xfe, 0xff, 0xe2, 0x78, 0xed, 0xb1, 0x06,
	0x25, 0xd8, 0x33, 0x7d, 0xef, 0xc9, 0x77, 0xfc, 0x35, 0xdb, 0xe7, 0x48, 0xe5, 0xee, 0x33, 0x35,
	0x04, 0x65, 0x96, 0x88, 0x85, 0xeb, 0xd9, 0x69, 0x85, 0xe6, 0x22, 0x82, 0x66, 0x78, 0x00, 0xa3,
	0xbc, 0xdb, 0x07, 0xd2, 0xc0, 0xb5, 0xdc, 0xcf, 0xb5, 0x06, 0xdc, 0x73, 0xf3, 0x30, 0x26, 0x36,
	0x6e, 0x64, 0x60, 0xde, 0x17, 0xec, 0x95, 0xac, 0x1f, 0x37, 0xd3, 0x1c, 0x07, 0x21, 0x28, 0x9d,
	0x80, 0x1d, 0x60, 0xca, 0x19, 0x34, 0xb5, 0x56, 0xbc, 0x17, 0x69, 0x08, 0xcd, 0xf2, 0xce, 0xe5,
	0x74, 0x4e, 0x8d, 0xd9, 0x9c, 0x1a, 0xcb, 0x39, 0x45, 0x57, 0x31, 0x45, 0xb7, 0x31, 0x45, 0x77,
	0x31, 0x45, 0xd3, 0x98, 0xa2, 0xfb, 0x98, 0xa2, 0x87, 0x98, 0x1a, 0xcb, 0x98, 0xa2, 0xeb, 0x05,
	0x35, 0xa6, 0x0b, 0x6a, 0xcc, 0x16, 0xd4, 0xc0, 0x15, 0x2e, 0x2d, 0x0d, 0x7e, 0x20, 0x15, 0xf3,
	0xd6, 0xcb, 0x67, 0x25, 0xbb, 0x77, 0x88, 0x4e, 0xff, 0xf4, 0x53, 0x55, 0x2e, 0xed, 0xe4, 0xfc,
	0x6f, 0x45, 0xda, 0x09, 0xd9, 0x2b, 0xae, 0xf4, 0xd6, 0x63, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2c,
	0x6b, 0x15, 0x16, 0xcd, 0x02, 0x00, 0x00,
}

func (x DecisionType) String() string {
	s, ok := DecisionType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

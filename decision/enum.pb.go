// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: decision/enum.proto

package decision

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
	strconv "strconv"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Whenever this list of decision is changed do change the function shouldBufferEvent in mutableStateBuilder.go to make sure to do the correct event ordering.
type DecisionType int32

const (
	DECISION_TYPE_UNSPECIFIED                                DecisionType = 0
	DECISION_TYPE_SCHEDULE_ACTIVITY_TASK                     DecisionType = 1
	DECISION_TYPE_REQUEST_CANCEL_ACTIVITY_TASK               DecisionType = 2
	DECISION_TYPE_START_TIMER                                DecisionType = 3
	DECISION_TYPE_COMPLETE_WORKFLOW_EXECUTION                DecisionType = 4
	DECISION_TYPE_FAIL_WORKFLOW_EXECUTION                    DecisionType = 5
	DECISION_TYPE_CANCEL_TIMER                               DecisionType = 6
	DECISION_TYPE_CANCEL_WORKFLOW_EXECUTION                  DecisionType = 7
	DECISION_TYPE_REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION DecisionType = 8
	DECISION_TYPE_RECORD_MARKER                              DecisionType = 9
	DECISION_TYPE_CONTINUE_AS_NEW_WORKFLOW_EXECUTION         DecisionType = 10
	DECISION_TYPE_START_CHILD_WORKFLOW_EXECUTION             DecisionType = 11
	DECISION_TYPE_SIGNAL_EXTERNAL_WORKFLOW_EXECUTION         DecisionType = 12
	DECISION_TYPE_UPSERT_WORKFLOW_SEARCH_ATTRIBUTES          DecisionType = 13
)

var DecisionType_name = map[int32]string{
	0:  "Unspecified",
	1:  "ScheduleActivityTask",
	2:  "RequestCancelActivityTask",
	3:  "StartTimer",
	4:  "CompleteWorkflowExecution",
	5:  "FailWorkflowExecution",
	6:  "CancelTimer",
	7:  "CancelWorkflowExecution",
	8:  "RequestCancelExternalWorkflowExecution",
	9:  "RecordMarker",
	10: "ContinueAsNewWorkflowExecution",
	11: "StartChildWorkflowExecution",
	12: "SignalExternalWorkflowExecution",
	13: "UpsertWorkflowSearchAttributes",
}

var DecisionType_value = map[string]int32{
	"Unspecified":                            0,
	"ScheduleActivityTask":                   1,
	"RequestCancelActivityTask":              2,
	"StartTimer":                             3,
	"CompleteWorkflowExecution":              4,
	"FailWorkflowExecution":                  5,
	"CancelTimer":                            6,
	"CancelWorkflowExecution":                7,
	"RequestCancelExternalWorkflowExecution": 8,
	"RecordMarker":                           9,
	"ContinueAsNewWorkflowExecution":         10,
	"StartChildWorkflowExecution":            11,
	"SignalExternalWorkflowExecution":        12,
	"UpsertWorkflowSearchAttributes":         13,
}

func (DecisionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_440f1ae40d978a76, []int{0}
}

func init() {
	proto.RegisterEnum("decision.DecisionType", DecisionType_name, DecisionType_value)
}

func init() { proto.RegisterFile("decision/enum.proto", fileDescriptor_440f1ae40d978a76) }

var fileDescriptor_440f1ae40d978a76 = []byte{
	// 428 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xbf, 0x6e, 0xd4, 0x40,
	0x10, 0xc6, 0xbd, 0x10, 0x42, 0x18, 0x82, 0x64, 0x2d, 0x15, 0x41, 0x2c, 0x0d, 0xff, 0x12, 0xc8,
	0x5d, 0xa4, 0x50, 0x50, 0xd0, 0x6c, 0xd6, 0x73, 0xdc, 0xea, 0x7c, 0x6b, 0xb3, 0x3b, 0xe6, 0x12,
	0x9a, 0x15, 0x7f, 0x4e, 0xc8, 0x12, 0x89, 0x4f, 0x21, 0x14, 0x50, 0xf1, 0x08, 0x3c, 0x06, 0x8f,
	0x42, 0x79, 0x65, 0x4a, 0xce, 0xd7, 0x50, 0xe6, 0x0d, 0x40, 0xe4, 0xb0, 0xc0, 0x8e, 0x95, 0xce,
	0xe3, 0xef, 0x37, 0x33, 0xdf, 0x8e, 0x3e, 0xb8, 0xfe, 0x76, 0xfc, 0x26, 0xff, 0x90, 0x17, 0x07,
	0xdd, 0xf1, 0xc1, 0xc7, 0xfd, 0xce, 0xe4, 0xb0, 0x38, 0x2a, 0xf8, 0x4a, 0xf5, 0x73, 0xe3, 0xd7,
	0x12, 0xac, 0x46, 0x7f, 0x0b, 0xfa, 0x34, 0x19, 0xf3, 0x5b, 0x70, 0x23, 0x42, 0xa5, 0x9d, 0x4e,
	0x8c, 0xa7, 0xbd, 0x14, 0x7d, 0x66, 0x5c, 0x8a, 0x4a, 0xf7, 0x34, 0x46, 0x61, 0xc0, 0x1f, 0xc0,
	0x9d, 0xba, 0xec, 0x54, 0x1f, 0xa3, 0x2c, 0x46, 0x2f, 0x15, 0xe9, 0x17, 0x9a, 0xf6, 0x3c, 0x49,
	0x37, 0x08, 0x19, 0xef, 0xc0, 0x46, 0x9d, 0xb4, 0xf8, 0x3c, 0x43, 0x47, 0x5e, 0x49, 0xa3, 0x30,
	0x6e, 0xf0, 0x17, 0xce, 0x2e, 0x76, 0x24, 0x2d, 0x79, 0xd2, 0x43, 0xb4, 0xe1, 0x45, 0xbe, 0x09,
	0xeb, 0x75, 0x59, 0x25, 0xc3, 0x34, 0x46, 0x42, 0x3f, 0x4a, 0xec, 0xa0, 0x17, 0x27, 0x23, 0x8f,
	0xbb, 0xa8, 0x32, 0xd2, 0x89, 0x09, 0x97, 0xf8, 0x3a, 0xdc, 0xad, 0xe3, 0x3d, 0xa9, 0xe3, 0x36,
	0xf4, 0x12, 0x17, 0xb0, 0xd6, 0x98, 0xbc, 0x30, 0xb8, 0xd8, 0xbc, 0xcc, 0x1f, 0xc2, 0xfd, 0x56,
	0xbd, 0x65, 0xd8, 0x65, 0xfe, 0x14, 0x9e, 0x9c, 0xfb, 0x6a, 0xdc, 0x25, 0xb4, 0x46, 0xb6, 0x76,
	0xaf, 0xf0, 0xdb, 0x70, 0xb3, 0xd9, 0xad, 0x12, 0x1b, 0xf9, 0xa1, 0xb4, 0x03, 0xb4, 0xe1, 0x15,
	0xfe, 0x18, 0xb6, 0x9a, 0x57, 0x30, 0xa4, 0x4d, 0x86, 0x5e, 0x3a, 0x6f, 0x70, 0xd4, 0x36, 0x16,
	0xf8, 0x16, 0x3c, 0x6a, 0x3b, 0xad, 0xea, 0xeb, 0x38, 0x6a, 0xeb, 0xb8, 0x7a, 0x76, 0x8f, 0xd3,
	0xcf, 0xfe, 0xb8, 0x3e, 0xcf, 0xfe, 0x2a, 0xdf, 0x86, 0x6e, 0x23, 0x3b, 0xa9, 0x43, 0x4b, 0xff,
	0x60, 0x87, 0xd2, 0xaa, 0xbe, 0x97, 0x44, 0x56, 0xef, 0x64, 0x84, 0x2e, 0xbc, 0xb6, 0xf3, 0x79,
	0x3a, 0x13, 0xc1, 0xf1, 0x4c, 0x04, 0x27, 0x33, 0xc1, 0xbe, 0x94, 0x82, 0x7d, 0x2b, 0x05, 0xfb,
	0x5e, 0x0a, 0x36, 0x2d, 0x05, 0xfb, 0x51, 0x0a, 0xf6, 0xb3, 0x14, 0xc1, 0x49, 0x29, 0xd8, 0xd7,
	0xb9, 0x08, 0xa6, 0x73, 0x11, 0x1c, 0xcf, 0x45, 0x00, 0x6b, 0x79, 0xd1, 0x39, 0x1a, 0xef, 0x4f,
	0x8a, 0xc3, 0x57, 0xef, 0x17, 0xa1, 0xee, 0x54, 0x99, 0x4e, 0xd9, 0xcb, 0x7b, 0xef, 0xfe, 0x53,
	0xf3, 0xa2, 0x5b, 0x7d, 0x6f, 0x9e, 0x92, 0xdd, 0x8a, 0x7c, 0xbd, 0x7c, 0x5a, 0x6f, 0xff, 0x0e,
	0x00, 0x00, 0xff, 0xff, 0xc3, 0x7d, 0xc2, 0x23, 0x25, 0x03, 0x00, 0x00,
}

func (x DecisionType) String() string {
	s, ok := DecisionType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

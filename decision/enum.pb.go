// The MIT License (MIT)
//
// Copyright (c) 2020 Temporal Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: decision/enum.proto

package decision

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	math "math"
	strconv "strconv"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Whenever this list of decision is changed do change the function shouldBufferEvent in mutableStateBuilder.go to make sure to do the correct event ordering.
type DecisionType int32

const (
	DecisionType_ScheduleActivityTask                   DecisionType = 0
	DecisionType_RequestCancelActivityTask              DecisionType = 1
	DecisionType_StartTimer                             DecisionType = 2
	DecisionType_CompleteWorkflowExecution              DecisionType = 3
	DecisionType_FailWorkflowExecution                  DecisionType = 4
	DecisionType_CancelTimer                            DecisionType = 5
	DecisionType_CancelWorkflowExecution                DecisionType = 6
	DecisionType_RequestCancelExternalWorkflowExecution DecisionType = 7
	DecisionType_RecordMarker                           DecisionType = 8
	DecisionType_ContinueAsNewWorkflowExecution         DecisionType = 9
	DecisionType_StartChildWorkflowExecution            DecisionType = 10
	DecisionType_SignalExternalWorkflowExecution        DecisionType = 11
	DecisionType_UpsertWorkflowSearchAttributes         DecisionType = 12
)

var DecisionType_name = map[int32]string{
	0:  "ScheduleActivityTask",
	1:  "RequestCancelActivityTask",
	2:  "StartTimer",
	3:  "CompleteWorkflowExecution",
	4:  "FailWorkflowExecution",
	5:  "CancelTimer",
	6:  "CancelWorkflowExecution",
	7:  "RequestCancelExternalWorkflowExecution",
	8:  "RecordMarker",
	9:  "ContinueAsNewWorkflowExecution",
	10: "StartChildWorkflowExecution",
	11: "SignalExternalWorkflowExecution",
	12: "UpsertWorkflowSearchAttributes",
}

var DecisionType_value = map[string]int32{
	"ScheduleActivityTask":                   0,
	"RequestCancelActivityTask":              1,
	"StartTimer":                             2,
	"CompleteWorkflowExecution":              3,
	"FailWorkflowExecution":                  4,
	"CancelTimer":                            5,
	"CancelWorkflowExecution":                6,
	"RequestCancelExternalWorkflowExecution": 7,
	"RecordMarker":                           8,
	"ContinueAsNewWorkflowExecution":         9,
	"StartChildWorkflowExecution":            10,
	"SignalExternalWorkflowExecution":        11,
	"UpsertWorkflowSearchAttributes":         12,
}

func (DecisionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_440f1ae40d978a76, []int{0}
}

func init() {
	proto.RegisterEnum("decision.DecisionType", DecisionType_name, DecisionType_value)
}

func init() { proto.RegisterFile("decision/enum.proto", fileDescriptor_440f1ae40d978a76) }

var fileDescriptor_440f1ae40d978a76 = []byte{
	// 384 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x41, 0x8f, 0xd2, 0x40,
	0x14, 0xc7, 0x3b, 0xa2, 0x88, 0x0f, 0xa2, 0xcd, 0x88, 0x51, 0x20, 0x0e, 0x89, 0x26, 0x1c, 0x48,
	0x84, 0x83, 0x9f, 0x00, 0x2b, 0xde, 0x34, 0x86, 0x62, 0x4c, 0xbc, 0x0d, 0xed, 0xb3, 0x4c, 0x68,
	0x67, 0xea, 0x74, 0x2a, 0xe0, 0xc9, 0xbb, 0x17, 0x3f, 0x86, 0x1f, 0xc5, 0x23, 0x47, 0x8e, 0x4b,
	0xb9, 0xec, 0x91, 0x8f, 0xb0, 0x81, 0x6e, 0x93, 0x25, 0xdd, 0xec, 0xed, 0xcd, 0xfb, 0xfd, 0x66,
	0xfe, 0x33, 0x79, 0x03, 0x4f, 0x7d, 0xf4, 0x44, 0x22, 0x94, 0x1c, 0xa2, 0x4c, 0xa3, 0x41, 0xac,
	0x95, 0x51, 0xb4, 0x56, 0x34, 0xdb, 0xcd, 0x40, 0x05, 0xea, 0xd4, 0x1c, 0x1e, 0xab, 0x9c, 0xf7,
	0xff, 0x54, 0xa0, 0xf1, 0xfe, 0x5a, 0x99, 0xae, 0x63, 0xa4, 0x2f, 0xa0, 0xe9, 0x7a, 0x73, 0xf4,
	0xd3, 0x10, 0x47, 0x9e, 0x11, 0x3f, 0x85, 0x59, 0x4f, 0x79, 0xb2, 0xb0, 0x2d, 0xfa, 0x12, 0x5a,
	0x13, 0xfc, 0x91, 0x62, 0x62, 0x1c, 0x2e, 0x3d, 0x0c, 0xcf, 0x30, 0xa1, 0x8f, 0x01, 0x5c, 0xc3,
	0xb5, 0x99, 0x8a, 0x08, 0xb5, 0x7d, 0xef, 0xa8, 0x3b, 0x2a, 0x8a, 0x43, 0x34, 0xf8, 0x55, 0xe9,
	0xc5, 0xf7, 0x50, 0x2d, 0xc7, 0x2b, 0xf4, 0x52, 0x23, 0x94, 0xb4, 0x2b, 0xb4, 0x05, 0xcf, 0x3e,
	0x70, 0x11, 0x96, 0xd1, 0x7d, 0xfa, 0x04, 0xea, 0x79, 0x42, 0x7e, 0xd4, 0x03, 0xda, 0x81, 0xe7,
	0x79, 0xa3, 0x6c, 0x57, 0x69, 0x1f, 0x7a, 0x67, 0xd7, 0x1a, 0xaf, 0x0c, 0x6a, 0xc9, 0x6f, 0x71,
	0x1f, 0x52, 0x1b, 0x1a, 0x13, 0xf4, 0x94, 0xf6, 0x3f, 0x72, 0xbd, 0x40, 0x6d, 0xd7, 0xe8, 0x2b,
	0x60, 0x8e, 0x92, 0x46, 0xc8, 0x14, 0x47, 0xc9, 0x27, 0x5c, 0x96, 0x77, 0x3d, 0xa2, 0x5d, 0xe8,
	0x9c, 0x5e, 0xe6, 0xcc, 0x45, 0xe8, 0x97, 0x05, 0xa0, 0xaf, 0xa1, 0xeb, 0x8a, 0x40, 0xf2, 0x3b,
	0xb2, 0xeb, 0xc7, 0xa4, 0x2f, 0x71, 0x82, 0xda, 0x14, 0xd0, 0x45, 0xae, 0xbd, 0xf9, 0xc8, 0x18,
	0x2d, 0x66, 0xa9, 0xc1, 0xc4, 0x6e, 0xbc, 0xfb, 0xb5, 0xd9, 0x31, 0xb2, 0xdd, 0x31, 0xeb, 0xb0,
	0x63, 0xe4, 0x77, 0xc6, 0xc8, 0xbf, 0x8c, 0x91, 0xff, 0x19, 0x23, 0x9b, 0x8c, 0x91, 0x8b, 0x8c,
	0x91, 0xcb, 0x8c, 0x59, 0x87, 0x8c, 0x91, 0xbf, 0x7b, 0x66, 0x6d, 0xf6, 0xcc, 0xda, 0xee, 0x99,
	0x05, 0x6d, 0xa1, 0x06, 0x06, 0xa3, 0x58, 0x69, 0x1e, 0xe6, 0x63, 0x1d, 0x14, 0x53, 0xff, 0x4c,
	0xbe, 0xf5, 0x82, 0x1b, 0x54, 0xa8, 0x61, 0x51, 0xbf, 0xc9, 0xff, 0x42, 0x61, 0xce, 0xaa, 0xa7,
	0xf5, 0xdb, 0xab, 0x00, 0x00, 0x00, 0xff, 0xff, 0x83, 0x3a, 0x9e, 0x3a, 0x47, 0x02, 0x00, 0x00,
}

func (x DecisionType) String() string {
	s, ok := DecisionType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// The MIT License (MIT)
//
// Copyright (c) 2020 Temporal Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: namespace/message.proto

package namespace

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NamespaceInfo struct {
	Name        string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Status      NamespaceStatus `protobuf:"varint,2,opt,name=status,proto3,enum=namespace.NamespaceStatus" json:"status,omitempty"`
	Description string          `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	OwnerEmail  string          `protobuf:"bytes,4,opt,name=ownerEmail,proto3" json:"ownerEmail,omitempty"`
	// A key-value map for any customized purpose.
	Data map[string]string `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Id   string            `protobuf:"bytes,6,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *NamespaceInfo) Reset()      { *m = NamespaceInfo{} }
func (*NamespaceInfo) ProtoMessage() {}
func (*NamespaceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2348711deb2473dd, []int{0}
}
func (m *NamespaceInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NamespaceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NamespaceInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NamespaceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamespaceInfo.Merge(m, src)
}
func (m *NamespaceInfo) XXX_Size() int {
	return m.Size()
}
func (m *NamespaceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NamespaceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NamespaceInfo proto.InternalMessageInfo

func (m *NamespaceInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NamespaceInfo) GetStatus() NamespaceStatus {
	if m != nil {
		return m.Status
	}
	return NamespaceStatus_Registered
}

func (m *NamespaceInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *NamespaceInfo) GetOwnerEmail() string {
	if m != nil {
		return m.OwnerEmail
	}
	return ""
}

func (m *NamespaceInfo) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *NamespaceInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type NamespaceConfiguration struct {
	WorkflowExecutionRetentionPeriodInDays int32            `protobuf:"varint,1,opt,name=workflowExecutionRetentionPeriodInDays,proto3" json:"workflowExecutionRetentionPeriodInDays,omitempty"`
	EmitMetric                             *types.BoolValue `protobuf:"bytes,2,opt,name=emitMetric,proto3" json:"emitMetric,omitempty"`
	BadBinaries                            *BadBinaries     `protobuf:"bytes,3,opt,name=badBinaries,proto3" json:"badBinaries,omitempty"`
	HistoryArchivalStatus                  ArchivalStatus   `protobuf:"varint,4,opt,name=historyArchivalStatus,proto3,enum=namespace.ArchivalStatus" json:"historyArchivalStatus,omitempty"`
	HistoryArchivalURI                     string           `protobuf:"bytes,5,opt,name=historyArchivalURI,proto3" json:"historyArchivalURI,omitempty"`
	VisibilityArchivalStatus               ArchivalStatus   `protobuf:"varint,6,opt,name=visibilityArchivalStatus,proto3,enum=namespace.ArchivalStatus" json:"visibilityArchivalStatus,omitempty"`
	VisibilityArchivalURI                  string           `protobuf:"bytes,7,opt,name=visibilityArchivalURI,proto3" json:"visibilityArchivalURI,omitempty"`
}

func (m *NamespaceConfiguration) Reset()      { *m = NamespaceConfiguration{} }
func (*NamespaceConfiguration) ProtoMessage() {}
func (*NamespaceConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_2348711deb2473dd, []int{1}
}
func (m *NamespaceConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NamespaceConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NamespaceConfiguration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NamespaceConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamespaceConfiguration.Merge(m, src)
}
func (m *NamespaceConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *NamespaceConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_NamespaceConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_NamespaceConfiguration proto.InternalMessageInfo

func (m *NamespaceConfiguration) GetWorkflowExecutionRetentionPeriodInDays() int32 {
	if m != nil {
		return m.WorkflowExecutionRetentionPeriodInDays
	}
	return 0
}

func (m *NamespaceConfiguration) GetEmitMetric() *types.BoolValue {
	if m != nil {
		return m.EmitMetric
	}
	return nil
}

func (m *NamespaceConfiguration) GetBadBinaries() *BadBinaries {
	if m != nil {
		return m.BadBinaries
	}
	return nil
}

func (m *NamespaceConfiguration) GetHistoryArchivalStatus() ArchivalStatus {
	if m != nil {
		return m.HistoryArchivalStatus
	}
	return ArchivalStatus_Default
}

func (m *NamespaceConfiguration) GetHistoryArchivalURI() string {
	if m != nil {
		return m.HistoryArchivalURI
	}
	return ""
}

func (m *NamespaceConfiguration) GetVisibilityArchivalStatus() ArchivalStatus {
	if m != nil {
		return m.VisibilityArchivalStatus
	}
	return ArchivalStatus_Default
}

func (m *NamespaceConfiguration) GetVisibilityArchivalURI() string {
	if m != nil {
		return m.VisibilityArchivalURI
	}
	return ""
}

type BadBinaries struct {
	Binaries map[string]*BadBinaryInfo `protobuf:"bytes,1,rep,name=binaries,proto3" json:"binaries,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *BadBinaries) Reset()      { *m = BadBinaries{} }
func (*BadBinaries) ProtoMessage() {}
func (*BadBinaries) Descriptor() ([]byte, []int) {
	return fileDescriptor_2348711deb2473dd, []int{2}
}
func (m *BadBinaries) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BadBinaries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BadBinaries.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BadBinaries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BadBinaries.Merge(m, src)
}
func (m *BadBinaries) XXX_Size() int {
	return m.Size()
}
func (m *BadBinaries) XXX_DiscardUnknown() {
	xxx_messageInfo_BadBinaries.DiscardUnknown(m)
}

var xxx_messageInfo_BadBinaries proto.InternalMessageInfo

func (m *BadBinaries) GetBinaries() map[string]*BadBinaryInfo {
	if m != nil {
		return m.Binaries
	}
	return nil
}

type BadBinaryInfo struct {
	Reason          string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	Operator        string `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	CreatedTimeNano int64  `protobuf:"varint,3,opt,name=createdTimeNano,proto3" json:"createdTimeNano,omitempty"`
}

func (m *BadBinaryInfo) Reset()      { *m = BadBinaryInfo{} }
func (*BadBinaryInfo) ProtoMessage() {}
func (*BadBinaryInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2348711deb2473dd, []int{3}
}
func (m *BadBinaryInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BadBinaryInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BadBinaryInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BadBinaryInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BadBinaryInfo.Merge(m, src)
}
func (m *BadBinaryInfo) XXX_Size() int {
	return m.Size()
}
func (m *BadBinaryInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BadBinaryInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BadBinaryInfo proto.InternalMessageInfo

func (m *BadBinaryInfo) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *BadBinaryInfo) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *BadBinaryInfo) GetCreatedTimeNano() int64 {
	if m != nil {
		return m.CreatedTimeNano
	}
	return 0
}

type UpdateNamespaceInfo struct {
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	OwnerEmail  string `protobuf:"bytes,2,opt,name=ownerEmail,proto3" json:"ownerEmail,omitempty"`
	// A key-value map for any customized purpose.
	Data map[string]string `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *UpdateNamespaceInfo) Reset()      { *m = UpdateNamespaceInfo{} }
func (*UpdateNamespaceInfo) ProtoMessage() {}
func (*UpdateNamespaceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2348711deb2473dd, []int{4}
}
func (m *UpdateNamespaceInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateNamespaceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateNamespaceInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateNamespaceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateNamespaceInfo.Merge(m, src)
}
func (m *UpdateNamespaceInfo) XXX_Size() int {
	return m.Size()
}
func (m *UpdateNamespaceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateNamespaceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateNamespaceInfo proto.InternalMessageInfo

func (m *UpdateNamespaceInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *UpdateNamespaceInfo) GetOwnerEmail() string {
	if m != nil {
		return m.OwnerEmail
	}
	return ""
}

func (m *UpdateNamespaceInfo) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*NamespaceInfo)(nil), "namespace.NamespaceInfo")
	proto.RegisterMapType((map[string]string)(nil), "namespace.NamespaceInfo.DataEntry")
	proto.RegisterType((*NamespaceConfiguration)(nil), "namespace.NamespaceConfiguration")
	proto.RegisterType((*BadBinaries)(nil), "namespace.BadBinaries")
	proto.RegisterMapType((map[string]*BadBinaryInfo)(nil), "namespace.BadBinaries.BinariesEntry")
	proto.RegisterType((*BadBinaryInfo)(nil), "namespace.BadBinaryInfo")
	proto.RegisterType((*UpdateNamespaceInfo)(nil), "namespace.UpdateNamespaceInfo")
	proto.RegisterMapType((map[string]string)(nil), "namespace.UpdateNamespaceInfo.DataEntry")
}

func init() { proto.RegisterFile("namespace/message.proto", fileDescriptor_2348711deb2473dd) }

var fileDescriptor_2348711deb2473dd = []byte{
	// 681 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0xce, 0x26, 0x4d, 0x7e, 0xcd, 0x44, 0xed, 0x0f, 0x2d, 0x6d, 0x31, 0x41, 0x5a, 0x45, 0x11,
	0xa2, 0xb9, 0xe0, 0x48, 0x06, 0x41, 0x55, 0x71, 0x80, 0xd0, 0x1e, 0x7a, 0xa0, 0x54, 0x86, 0xf4,
	0xc0, 0x6d, 0x13, 0x6f, 0xd2, 0x55, 0x6d, 0xaf, 0xb5, 0xde, 0x34, 0x44, 0xe2, 0xc0, 0x23, 0x70,
	0xe6, 0x01, 0x10, 0x8f, 0xc2, 0x09, 0xf5, 0xd8, 0x23, 0x75, 0x2f, 0x1c, 0x7b, 0xe0, 0x01, 0x90,
	0xd7, 0x89, 0xeb, 0xa4, 0x46, 0x45, 0x9c, 0x3c, 0x3b, 0xdf, 0xb7, 0x33, 0xdf, 0xce, 0x1f, 0xc3,
	0x1d, 0x9f, 0x7a, 0x2c, 0x0c, 0x68, 0x9f, 0xb5, 0x3d, 0x16, 0x86, 0x74, 0xc8, 0xcc, 0x40, 0x0a,
	0x25, 0x70, 0x35, 0x05, 0xea, 0x6b, 0x57, 0x1c, 0xe6, 0x8f, 0xbc, 0x84, 0x50, 0xdf, 0xd4, 0x9f,
	0xde, 0x68, 0xd0, 0x1e, 0x0a, 0x31, 0x74, 0x59, 0x3b, 0x3d, 0x8f, 0x25, 0x0d, 0x02, 0x26, 0xc3,
	0x84, 0xd8, 0xfc, 0x5c, 0x84, 0x95, 0xfd, 0x59, 0x84, 0x3d, 0x7f, 0x20, 0x30, 0x86, 0xa5, 0x38,
	0xa4, 0x81, 0x1a, 0xa8, 0x55, 0xb5, 0xb5, 0x8d, 0x2d, 0xa8, 0x84, 0x8a, 0xaa, 0x51, 0x68, 0x14,
	0x1b, 0xa8, 0xb5, 0x6a, 0xd5, 0xcd, 0x34, 0xab, 0x99, 0xde, 0x7e, 0xa3, 0x19, 0xf6, 0x94, 0x89,
	0x1b, 0x50, 0x73, 0x58, 0xd8, 0x97, 0x3c, 0x50, 0x5c, 0xf8, 0x46, 0x49, 0x87, 0xcb, 0xba, 0x30,
	0x01, 0x10, 0x63, 0x9f, 0xc9, 0x5d, 0x8f, 0x72, 0xd7, 0x58, 0xd2, 0x84, 0x8c, 0x07, 0x3f, 0x81,
	0x25, 0x87, 0x2a, 0x6a, 0x94, 0x1b, 0xa5, 0x56, 0xcd, 0x6a, 0xe6, 0xe5, 0x8c, 0x15, 0x9b, 0x3b,
	0x54, 0xd1, 0x5d, 0x5f, 0xc9, 0x89, 0xad, 0xf9, 0x78, 0x15, 0x8a, 0xdc, 0x31, 0x2a, 0x3a, 0x5e,
	0x91, 0x3b, 0xf5, 0xa7, 0x50, 0x4d, 0x29, 0xf8, 0x16, 0x94, 0x8e, 0xd9, 0x64, 0xfa, 0xba, 0xd8,
	0xc4, 0x6b, 0x50, 0x3e, 0xa1, 0xee, 0x88, 0xe9, 0xb7, 0x55, 0xed, 0xe4, 0xb0, 0x5d, 0xdc, 0x42,
	0xcd, 0x5f, 0x25, 0xd8, 0x48, 0x53, 0xbd, 0x14, 0xfe, 0x80, 0x0f, 0x47, 0x92, 0x6a, 0xed, 0x87,
	0xf0, 0x60, 0x2c, 0xe4, 0xf1, 0xc0, 0x15, 0xe3, 0xdd, 0xf7, 0xac, 0x3f, 0x8a, 0x9d, 0x36, 0x53,
	0xcc, 0x8f, 0x8d, 0x03, 0x26, 0xb9, 0x70, 0xf6, 0xfc, 0x1d, 0x3a, 0x09, 0x75, 0xa6, 0xb2, 0xfd,
	0x97, 0x6c, 0xbc, 0x0d, 0xc0, 0x3c, 0xae, 0x5e, 0x31, 0x25, 0x79, 0x5f, 0x2b, 0xaa, 0x59, 0x75,
	0x33, 0x69, 0xa2, 0x39, 0x6b, 0xa2, 0xd9, 0x11, 0xc2, 0x3d, 0x8c, 0x65, 0xda, 0x19, 0x36, 0xde,
	0x82, 0x5a, 0x8f, 0x3a, 0x1d, 0xee, 0x53, 0xc9, 0x59, 0xa8, 0x2b, 0x5e, 0xb3, 0x36, 0x32, 0x65,
	0xeb, 0x5c, 0xa1, 0x76, 0x96, 0x8a, 0x5f, 0xc3, 0xfa, 0x11, 0x0f, 0x95, 0x90, 0x93, 0x17, 0xb2,
	0x7f, 0xc4, 0x4f, 0xa8, 0x9b, 0x34, 0x53, 0x37, 0x65, 0xd5, 0xba, 0x9b, 0x89, 0x31, 0x4f, 0xb0,
	0xf3, 0xef, 0x61, 0x13, 0xf0, 0x02, 0xd0, 0xb5, 0xf7, 0x8c, 0xb2, 0x2e, 0x70, 0x0e, 0x82, 0xbb,
	0x60, 0x9c, 0xf0, 0x90, 0xf7, 0xb8, 0xcb, 0xd5, 0xa2, 0x86, 0xca, 0x4d, 0x1a, 0xfe, 0x78, 0x15,
	0x3f, 0x86, 0xf5, 0xeb, 0x58, 0xac, 0xe4, 0x3f, 0xad, 0x24, 0x1f, 0x6c, 0x7e, 0x41, 0x50, 0xcb,
	0x94, 0x0a, 0x3f, 0x87, 0xe5, 0xde, 0xac, 0xa8, 0x48, 0xcf, 0xe2, 0xfd, 0xfc, 0xa2, 0x9a, 0x33,
	0x23, 0x99, 0xc6, 0xf4, 0x56, 0xbd, 0x0b, 0x2b, 0x73, 0x50, 0xce, 0x14, 0x9a, 0xd9, 0x29, 0xac,
	0x59, 0x46, 0x4e, 0x86, 0x49, 0x3c, 0xed, 0xd9, 0xf9, 0xf4, 0x60, 0x65, 0x0e, 0xc3, 0x1b, 0x50,
	0x91, 0x8c, 0x86, 0xc2, 0x9f, 0x46, 0x9e, 0x9e, 0x70, 0x1d, 0x96, 0x45, 0xc0, 0x24, 0x55, 0x42,
	0x4e, 0xa7, 0x3c, 0x3d, 0xe3, 0x16, 0xfc, 0xdf, 0x97, 0x8c, 0x2a, 0xe6, 0xbc, 0xe5, 0x1e, 0xdb,
	0xa7, 0xbe, 0xd0, 0x93, 0x53, 0xb2, 0x17, 0xdd, 0xcd, 0xef, 0x08, 0x6e, 0x77, 0x03, 0x87, 0x2a,
	0x36, 0xff, 0xc7, 0x58, 0xd8, 0x74, 0x74, 0xd3, 0xa6, 0x17, 0xaf, 0x6d, 0xfa, 0xb3, 0xe9, 0xa6,
	0x97, 0x74, 0x75, 0x5b, 0x99, 0xb7, 0xe7, 0xe4, 0x5b, 0xdc, 0xf7, 0x7f, 0xde, 0xef, 0xce, 0x87,
	0xd3, 0x73, 0x52, 0x38, 0x3b, 0x27, 0x85, 0xcb, 0x73, 0x82, 0x3e, 0x46, 0x04, 0x7d, 0x8d, 0x08,
	0xfa, 0x16, 0x11, 0x74, 0x1a, 0x11, 0xf4, 0x23, 0x22, 0xe8, 0x67, 0x44, 0x0a, 0x97, 0x11, 0x41,
	0x9f, 0x2e, 0x48, 0xe1, 0xf4, 0x82, 0x14, 0xce, 0x2e, 0x48, 0x01, 0xee, 0x71, 0x61, 0x2a, 0xe6,
	0x05, 0x42, 0x52, 0x37, 0x59, 0xc9, 0x2b, 0xbd, 0x07, 0xe8, 0xdd, 0xe6, 0x30, 0x03, 0x73, 0xd1,
	0x9e, 0xd9, 0x0f, 0x35, 0xb5, 0x9d, 0x52, 0x7b, 0x15, 0xed, 0x78, 0xf4, 0x3b, 0x00, 0x00, 0xff,
	0xff, 0xe6, 0x53, 0xb1, 0xea, 0xe6, 0x05, 0x00, 0x00,
}

func (this *NamespaceInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NamespaceInfo)
	if !ok {
		that2, ok := that.(NamespaceInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.OwnerEmail != that1.OwnerEmail {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if this.Data[i] != that1.Data[i] {
			return false
		}
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *NamespaceConfiguration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NamespaceConfiguration)
	if !ok {
		that2, ok := that.(NamespaceConfiguration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.WorkflowExecutionRetentionPeriodInDays != that1.WorkflowExecutionRetentionPeriodInDays {
		return false
	}
	if !this.EmitMetric.Equal(that1.EmitMetric) {
		return false
	}
	if !this.BadBinaries.Equal(that1.BadBinaries) {
		return false
	}
	if this.HistoryArchivalStatus != that1.HistoryArchivalStatus {
		return false
	}
	if this.HistoryArchivalURI != that1.HistoryArchivalURI {
		return false
	}
	if this.VisibilityArchivalStatus != that1.VisibilityArchivalStatus {
		return false
	}
	if this.VisibilityArchivalURI != that1.VisibilityArchivalURI {
		return false
	}
	return true
}
func (this *BadBinaries) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BadBinaries)
	if !ok {
		that2, ok := that.(BadBinaries)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Binaries) != len(that1.Binaries) {
		return false
	}
	for i := range this.Binaries {
		if !this.Binaries[i].Equal(that1.Binaries[i]) {
			return false
		}
	}
	return true
}
func (this *BadBinaryInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BadBinaryInfo)
	if !ok {
		that2, ok := that.(BadBinaryInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	if this.Operator != that1.Operator {
		return false
	}
	if this.CreatedTimeNano != that1.CreatedTimeNano {
		return false
	}
	return true
}
func (this *UpdateNamespaceInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateNamespaceInfo)
	if !ok {
		that2, ok := that.(UpdateNamespaceInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.OwnerEmail != that1.OwnerEmail {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if this.Data[i] != that1.Data[i] {
			return false
		}
	}
	return true
}
func (this *NamespaceInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&namespace.NamespaceInfo{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "OwnerEmail: "+fmt.Sprintf("%#v", this.OwnerEmail)+",\n")
	keysForData := make([]string, 0, len(this.Data))
	for k, _ := range this.Data {
		keysForData = append(keysForData, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForData)
	mapStringForData := "map[string]string{"
	for _, k := range keysForData {
		mapStringForData += fmt.Sprintf("%#v: %#v,", k, this.Data[k])
	}
	mapStringForData += "}"
	if this.Data != nil {
		s = append(s, "Data: "+mapStringForData+",\n")
	}
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NamespaceConfiguration) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&namespace.NamespaceConfiguration{")
	s = append(s, "WorkflowExecutionRetentionPeriodInDays: "+fmt.Sprintf("%#v", this.WorkflowExecutionRetentionPeriodInDays)+",\n")
	if this.EmitMetric != nil {
		s = append(s, "EmitMetric: "+fmt.Sprintf("%#v", this.EmitMetric)+",\n")
	}
	if this.BadBinaries != nil {
		s = append(s, "BadBinaries: "+fmt.Sprintf("%#v", this.BadBinaries)+",\n")
	}
	s = append(s, "HistoryArchivalStatus: "+fmt.Sprintf("%#v", this.HistoryArchivalStatus)+",\n")
	s = append(s, "HistoryArchivalURI: "+fmt.Sprintf("%#v", this.HistoryArchivalURI)+",\n")
	s = append(s, "VisibilityArchivalStatus: "+fmt.Sprintf("%#v", this.VisibilityArchivalStatus)+",\n")
	s = append(s, "VisibilityArchivalURI: "+fmt.Sprintf("%#v", this.VisibilityArchivalURI)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BadBinaries) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&namespace.BadBinaries{")
	keysForBinaries := make([]string, 0, len(this.Binaries))
	for k, _ := range this.Binaries {
		keysForBinaries = append(keysForBinaries, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForBinaries)
	mapStringForBinaries := "map[string]*BadBinaryInfo{"
	for _, k := range keysForBinaries {
		mapStringForBinaries += fmt.Sprintf("%#v: %#v,", k, this.Binaries[k])
	}
	mapStringForBinaries += "}"
	if this.Binaries != nil {
		s = append(s, "Binaries: "+mapStringForBinaries+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BadBinaryInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&namespace.BadBinaryInfo{")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "Operator: "+fmt.Sprintf("%#v", this.Operator)+",\n")
	s = append(s, "CreatedTimeNano: "+fmt.Sprintf("%#v", this.CreatedTimeNano)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateNamespaceInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&namespace.UpdateNamespaceInfo{")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "OwnerEmail: "+fmt.Sprintf("%#v", this.OwnerEmail)+",\n")
	keysForData := make([]string, 0, len(this.Data))
	for k, _ := range this.Data {
		keysForData = append(keysForData, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForData)
	mapStringForData := "map[string]string{"
	for _, k := range keysForData {
		mapStringForData += fmt.Sprintf("%#v: %#v,", k, this.Data[k])
	}
	mapStringForData += "}"
	if this.Data != nil {
		s = append(s, "Data: "+mapStringForData+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMessage(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *NamespaceInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamespaceInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NamespaceInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Data) > 0 {
		for k := range m.Data {
			v := m.Data[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintMessage(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMessage(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMessage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.OwnerEmail) > 0 {
		i -= len(m.OwnerEmail)
		copy(dAtA[i:], m.OwnerEmail)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.OwnerEmail)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NamespaceConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamespaceConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NamespaceConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VisibilityArchivalURI) > 0 {
		i -= len(m.VisibilityArchivalURI)
		copy(dAtA[i:], m.VisibilityArchivalURI)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.VisibilityArchivalURI)))
		i--
		dAtA[i] = 0x3a
	}
	if m.VisibilityArchivalStatus != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.VisibilityArchivalStatus))
		i--
		dAtA[i] = 0x30
	}
	if len(m.HistoryArchivalURI) > 0 {
		i -= len(m.HistoryArchivalURI)
		copy(dAtA[i:], m.HistoryArchivalURI)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.HistoryArchivalURI)))
		i--
		dAtA[i] = 0x2a
	}
	if m.HistoryArchivalStatus != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.HistoryArchivalStatus))
		i--
		dAtA[i] = 0x20
	}
	if m.BadBinaries != nil {
		{
			size, err := m.BadBinaries.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.EmitMetric != nil {
		{
			size, err := m.EmitMetric.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.WorkflowExecutionRetentionPeriodInDays != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.WorkflowExecutionRetentionPeriodInDays))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BadBinaries) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BadBinaries) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BadBinaries) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Binaries) > 0 {
		for k := range m.Binaries {
			v := m.Binaries[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintMessage(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMessage(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMessage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BadBinaryInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BadBinaryInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BadBinaryInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedTimeNano != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.CreatedTimeNano))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateNamespaceInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateNamespaceInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateNamespaceInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for k := range m.Data {
			v := m.Data[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintMessage(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMessage(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMessage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.OwnerEmail) > 0 {
		i -= len(m.OwnerEmail)
		copy(dAtA[i:], m.OwnerEmail)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.OwnerEmail)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NamespaceInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovMessage(uint64(m.Status))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.OwnerEmail)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMessage(uint64(len(k))) + 1 + len(v) + sovMessage(uint64(len(v)))
			n += mapEntrySize + 1 + sovMessage(uint64(mapEntrySize))
		}
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *NamespaceConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkflowExecutionRetentionPeriodInDays != 0 {
		n += 1 + sovMessage(uint64(m.WorkflowExecutionRetentionPeriodInDays))
	}
	if m.EmitMetric != nil {
		l = m.EmitMetric.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.BadBinaries != nil {
		l = m.BadBinaries.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.HistoryArchivalStatus != 0 {
		n += 1 + sovMessage(uint64(m.HistoryArchivalStatus))
	}
	l = len(m.HistoryArchivalURI)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.VisibilityArchivalStatus != 0 {
		n += 1 + sovMessage(uint64(m.VisibilityArchivalStatus))
	}
	l = len(m.VisibilityArchivalURI)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *BadBinaries) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Binaries) > 0 {
		for k, v := range m.Binaries {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMessage(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovMessage(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovMessage(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *BadBinaryInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.CreatedTimeNano != 0 {
		n += 1 + sovMessage(uint64(m.CreatedTimeNano))
	}
	return n
}

func (m *UpdateNamespaceInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.OwnerEmail)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMessage(uint64(len(k))) + 1 + len(v) + sovMessage(uint64(len(v)))
			n += mapEntrySize + 1 + sovMessage(uint64(mapEntrySize))
		}
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *NamespaceInfo) String() string {
	if this == nil {
		return "nil"
	}
	keysForData := make([]string, 0, len(this.Data))
	for k, _ := range this.Data {
		keysForData = append(keysForData, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForData)
	mapStringForData := "map[string]string{"
	for _, k := range keysForData {
		mapStringForData += fmt.Sprintf("%v: %v,", k, this.Data[k])
	}
	mapStringForData += "}"
	s := strings.Join([]string{`&NamespaceInfo{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`OwnerEmail:` + fmt.Sprintf("%v", this.OwnerEmail) + `,`,
		`Data:` + mapStringForData + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NamespaceConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NamespaceConfiguration{`,
		`WorkflowExecutionRetentionPeriodInDays:` + fmt.Sprintf("%v", this.WorkflowExecutionRetentionPeriodInDays) + `,`,
		`EmitMetric:` + strings.Replace(fmt.Sprintf("%v", this.EmitMetric), "BoolValue", "types.BoolValue", 1) + `,`,
		`BadBinaries:` + strings.Replace(this.BadBinaries.String(), "BadBinaries", "BadBinaries", 1) + `,`,
		`HistoryArchivalStatus:` + fmt.Sprintf("%v", this.HistoryArchivalStatus) + `,`,
		`HistoryArchivalURI:` + fmt.Sprintf("%v", this.HistoryArchivalURI) + `,`,
		`VisibilityArchivalStatus:` + fmt.Sprintf("%v", this.VisibilityArchivalStatus) + `,`,
		`VisibilityArchivalURI:` + fmt.Sprintf("%v", this.VisibilityArchivalURI) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BadBinaries) String() string {
	if this == nil {
		return "nil"
	}
	keysForBinaries := make([]string, 0, len(this.Binaries))
	for k, _ := range this.Binaries {
		keysForBinaries = append(keysForBinaries, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForBinaries)
	mapStringForBinaries := "map[string]*BadBinaryInfo{"
	for _, k := range keysForBinaries {
		mapStringForBinaries += fmt.Sprintf("%v: %v,", k, this.Binaries[k])
	}
	mapStringForBinaries += "}"
	s := strings.Join([]string{`&BadBinaries{`,
		`Binaries:` + mapStringForBinaries + `,`,
		`}`,
	}, "")
	return s
}
func (this *BadBinaryInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BadBinaryInfo{`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`Operator:` + fmt.Sprintf("%v", this.Operator) + `,`,
		`CreatedTimeNano:` + fmt.Sprintf("%v", this.CreatedTimeNano) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateNamespaceInfo) String() string {
	if this == nil {
		return "nil"
	}
	keysForData := make([]string, 0, len(this.Data))
	for k, _ := range this.Data {
		keysForData = append(keysForData, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForData)
	mapStringForData := "map[string]string{"
	for _, k := range keysForData {
		mapStringForData += fmt.Sprintf("%v: %v,", k, this.Data[k])
	}
	mapStringForData += "}"
	s := strings.Join([]string{`&UpdateNamespaceInfo{`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`OwnerEmail:` + fmt.Sprintf("%v", this.OwnerEmail) + `,`,
		`Data:` + mapStringForData + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *NamespaceInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamespaceInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamespaceInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= NamespaceStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerEmail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerEmail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMessage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMessage
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthMessage
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthMessage
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NamespaceConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamespaceConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamespaceConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecutionRetentionPeriodInDays", wireType)
			}
			m.WorkflowExecutionRetentionPeriodInDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkflowExecutionRetentionPeriodInDays |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmitMetric", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EmitMetric == nil {
				m.EmitMetric = &types.BoolValue{}
			}
			if err := m.EmitMetric.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadBinaries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BadBinaries == nil {
				m.BadBinaries = &BadBinaries{}
			}
			if err := m.BadBinaries.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryArchivalStatus", wireType)
			}
			m.HistoryArchivalStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HistoryArchivalStatus |= ArchivalStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryArchivalURI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HistoryArchivalURI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisibilityArchivalStatus", wireType)
			}
			m.VisibilityArchivalStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VisibilityArchivalStatus |= ArchivalStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisibilityArchivalURI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VisibilityArchivalURI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BadBinaries) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BadBinaries: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BadBinaries: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Binaries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Binaries == nil {
				m.Binaries = make(map[string]*BadBinaryInfo)
			}
			var mapkey string
			var mapvalue *BadBinaryInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMessage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMessage
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMessage
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthMessage
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &BadBinaryInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Binaries[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BadBinaryInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BadBinaryInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BadBinaryInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedTimeNano", wireType)
			}
			m.CreatedTimeNano = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedTimeNano |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateNamespaceInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateNamespaceInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateNamespaceInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerEmail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerEmail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMessage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMessage
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthMessage
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthMessage
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)

// The MIT License
//
// Copyright (c) 2022 Temporal Technologies Inc.  All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: temporal/api/enums/v1/event_type.proto

package enums

import (
	fmt "fmt"
	math "math"
	strconv "strconv"

	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Whenever this list of events is changed do change the function shouldBufferEvent in mutableStateBuilder.go to make sure to do the correct event ordering
type EventType int32

const (
	// Place holder and should never appear in a Workflow execution history
	EVENT_TYPE_UNSPECIFIED EventType = 0
	// Workflow execution has been triggered/started
	// It contains Workflow execution inputs, as well as Workflow timeout configurations
	EVENT_TYPE_WORKFLOW_EXECUTION_STARTED EventType = 1
	// Workflow execution has successfully completed and contains Workflow execution results
	EVENT_TYPE_WORKFLOW_EXECUTION_COMPLETED EventType = 2
	// Workflow execution has unsuccessfully completed and contains the Workflow execution error
	EVENT_TYPE_WORKFLOW_EXECUTION_FAILED EventType = 3
	// Workflow execution has timed out by the Temporal Server
	// Usually due to the Workflow having not been completed within timeout settings
	EVENT_TYPE_WORKFLOW_EXECUTION_TIMED_OUT EventType = 4
	// Workflow Task has been scheduled and the SDK client should now be able to process any new history events
	EVENT_TYPE_WORKFLOW_TASK_SCHEDULED EventType = 5
	// Workflow Task has started and the SDK client has picked up the Workflow Task and is processing new history events
	EVENT_TYPE_WORKFLOW_TASK_STARTED EventType = 6
	// Workflow Task has completed
	// The SDK client picked up the Workflow Task and processed new history events
	// SDK client may or may not ask the Temporal Server to do additional work, such as:
	// EVENT_TYPE_ACTIVITY_TASK_SCHEDULED
	// EVENT_TYPE_TIMER_STARTED
	// EVENT_TYPE_UPSERT_WORKFLOW_SEARCH_ATTRIBUTES
	// EVENT_TYPE_MARKER_RECORDED
	// EVENT_TYPE_START_CHILD_WORKFLOW_EXECUTION_INITIATED
	// EVENT_TYPE_REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_INITIATED
	// EVENT_TYPE_SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_INITIATED
	// EVENT_TYPE_WORKFLOW_EXECUTION_COMPLETED
	// EVENT_TYPE_WORKFLOW_EXECUTION_FAILED
	// EVENT_TYPE_WORKFLOW_EXECUTION_CANCELED
	// EVENT_TYPE_WORKFLOW_EXECUTION_CONTINUED_AS_NEW
	EVENT_TYPE_WORKFLOW_TASK_COMPLETED EventType = 7
	// Workflow Task encountered a timeout
	// Either an SDK client with a local cache was not available at the time, or it took too long for the SDK client to process the task
	EVENT_TYPE_WORKFLOW_TASK_TIMED_OUT EventType = 8
	// Workflow Task encountered a failure
	// Usually this means that the Workflow was non-deterministic
	// However, the Workflow reset functionality also uses this event
	EVENT_TYPE_WORKFLOW_TASK_FAILED EventType = 9
	// Activity Task was scheduled
	// The SDK client should pick up this activity task and execute
	// This event type contains activity inputs, as well as activity timeout configurations
	EVENT_TYPE_ACTIVITY_TASK_SCHEDULED EventType = 10
	// Activity Task has started executing
	// The SDK client has picked up the Activity Task and is processing the Activity invocation
	EVENT_TYPE_ACTIVITY_TASK_STARTED EventType = 11
	// Activity Task has finished successfully
	// The SDK client has picked up and successfully completed the Activity Task
	// This event type contains Activity execution results
	EVENT_TYPE_ACTIVITY_TASK_COMPLETED EventType = 12
	// Activity Task has finished unsuccessfully
	// The SDK picked up the Activity Task but unsuccessfully completed it
	// This event type contains Activity execution errors
	EVENT_TYPE_ACTIVITY_TASK_FAILED EventType = 13
	// Activity has timed out according to the Temporal Server
	// Activity did not complete within the timeout settings
	EVENT_TYPE_ACTIVITY_TASK_TIMED_OUT EventType = 14
	// A request to cancel the Activity has occurred
	// The SDK client will be able to confirm cancellation of an Activity during an Activity heartbeat
	EVENT_TYPE_ACTIVITY_TASK_CANCEL_REQUESTED EventType = 15
	// Activity has been cancelled
	EVENT_TYPE_ACTIVITY_TASK_CANCELED EventType = 16
	// A timer has started
	EVENT_TYPE_TIMER_STARTED EventType = 17
	// A timer has fired
	EVENT_TYPE_TIMER_FIRED EventType = 18
	// A time has been cancelled
	EVENT_TYPE_TIMER_CANCELED EventType = 19
	// A request has been made to cancel the Workflow execution
	EVENT_TYPE_WORKFLOW_EXECUTION_CANCEL_REQUESTED EventType = 20
	// SDK client has confirmed the cancellation request and the Workflow execution has been cancelled
	EVENT_TYPE_WORKFLOW_EXECUTION_CANCELED EventType = 21
	// Workflow has requested that the Temporal Server try to cancel another Workflow
	EVENT_TYPE_REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_INITIATED EventType = 22
	// Temporal Server could not cancel the targeted Workflow
	// This is usually because the target Workflow could not be found
	EVENT_TYPE_REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_FAILED EventType = 23
	// Temporal Server has successfully requested the cancellation of the target Workflow
	EVENT_TYPE_EXTERNAL_WORKFLOW_EXECUTION_CANCEL_REQUESTED EventType = 24
	// A marker has been recorded.
	// This event type is transparent to the Temporal Server
	// The Server will only store it and will not try to understand it.
	EVENT_TYPE_MARKER_RECORDED EventType = 25
	// Workflow has received a Signal event
	// The event type contains the Signal name, as well as a Signal payload
	EVENT_TYPE_WORKFLOW_EXECUTION_SIGNALED EventType = 26
	// Workflow execution has been forcefully terminated
	// This is usually because the terminate Workflow API was called
	EVENT_TYPE_WORKFLOW_EXECUTION_TERMINATED EventType = 27
	// Workflow has successfully completed and a new Workflow has been started within the same transaction
	// Contains last Workflow execution results as well as new Workflow execution inputs
	EVENT_TYPE_WORKFLOW_EXECUTION_CONTINUED_AS_NEW EventType = 28
	// Temporal Server will try to start a child Workflow
	EVENT_TYPE_START_CHILD_WORKFLOW_EXECUTION_INITIATED EventType = 29
	// Child Workflow execution cannot be started/triggered
	// Usually due to a child Workflow ID collision
	EVENT_TYPE_START_CHILD_WORKFLOW_EXECUTION_FAILED EventType = 30
	// Child Workflow execution has successfully started/triggered
	EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_STARTED EventType = 31
	// Child Workflow execution has successfully completed
	EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_COMPLETED EventType = 32
	// Child Workflow execution has unsuccessfully completed
	EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_FAILED EventType = 33
	// Child Workflow execution has been cancelled
	EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_CANCELED EventType = 34
	// Child Workflow execution has timed out by the Temporal Server
	EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_TIMED_OUT EventType = 35
	// Child Workflow execution has been terminated
	EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_TERMINATED EventType = 36
	// Temporal Server will try to Signal the targeted Workflow
	// Contains the Signal name, as well as a Signal payload
	EVENT_TYPE_SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_INITIATED EventType = 37
	// Temporal Server cannot Signal the targeted Workflow
	// Usually because the Workflow could not be found
	EVENT_TYPE_SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_FAILED EventType = 38
	// Temporal Server has successfully Signaled the targeted Workflow
	EVENT_TYPE_EXTERNAL_WORKFLOW_EXECUTION_SIGNALED EventType = 39
	// Workflow search attributes should be updated and synchronized with the visibility store
	EVENT_TYPE_UPSERT_WORKFLOW_SEARCH_ATTRIBUTES EventType = 40
	// Workflow update request has been received
	EVENT_TYPE_WORKFLOW_UPDATE_REJECTED EventType = 41
	// Workflow update request has been accepted by user workflow code
	EVENT_TYPE_WORKFLOW_UPDATE_ACCEPTED EventType = 42
	// Workflow update has been completed
	EVENT_TYPE_WORKFLOW_UPDATE_COMPLETED EventType = 43
	// Some property or properties of the workflow as a whole have changed by non-workflow code.
	// The distinction of external vs. command-based modification is important so the SDK can
	// maintain determinism when using the command-based approach.
	EVENT_TYPE_WORKFLOW_PROPERTIES_MODIFIED_EXTERNALLY EventType = 44
	// Some property or properties of an already-scheduled activity have changed by non-workflow code.
	// The distinction of external vs. command-based modification is important so the SDK can
	// maintain determinism when using the command-based approach.
	EVENT_TYPE_ACTIVITY_PROPERTIES_MODIFIED_EXTERNALLY EventType = 45
	// Workflow properties modified by user workflow code
	EVENT_TYPE_WORKFLOW_PROPERTIES_MODIFIED EventType = 46
)

var EventType_name = map[int32]string{
	0:  "Unspecified",
	1:  "WorkflowExecutionStarted",
	2:  "WorkflowExecutionCompleted",
	3:  "WorkflowExecutionFailed",
	4:  "WorkflowExecutionTimedOut",
	5:  "WorkflowTaskScheduled",
	6:  "WorkflowTaskStarted",
	7:  "WorkflowTaskCompleted",
	8:  "WorkflowTaskTimedOut",
	9:  "WorkflowTaskFailed",
	10: "ActivityTaskScheduled",
	11: "ActivityTaskStarted",
	12: "ActivityTaskCompleted",
	13: "ActivityTaskFailed",
	14: "ActivityTaskTimedOut",
	15: "ActivityTaskCancelRequested",
	16: "ActivityTaskCanceled",
	17: "TimerStarted",
	18: "TimerFired",
	19: "TimerCanceled",
	20: "WorkflowExecutionCancelRequested",
	21: "WorkflowExecutionCanceled",
	22: "RequestCancelExternalWorkflowExecutionInitiated",
	23: "RequestCancelExternalWorkflowExecutionFailed",
	24: "ExternalWorkflowExecutionCancelRequested",
	25: "MarkerRecorded",
	26: "WorkflowExecutionSignaled",
	27: "WorkflowExecutionTerminated",
	28: "WorkflowExecutionContinuedAsNew",
	29: "StartChildWorkflowExecutionInitiated",
	30: "StartChildWorkflowExecutionFailed",
	31: "ChildWorkflowExecutionStarted",
	32: "ChildWorkflowExecutionCompleted",
	33: "ChildWorkflowExecutionFailed",
	34: "ChildWorkflowExecutionCanceled",
	35: "ChildWorkflowExecutionTimedOut",
	36: "ChildWorkflowExecutionTerminated",
	37: "SignalExternalWorkflowExecutionInitiated",
	38: "SignalExternalWorkflowExecutionFailed",
	39: "ExternalWorkflowExecutionSignaled",
	40: "UpsertWorkflowSearchAttributes",
	41: "WorkflowUpdateRejected",
	42: "WorkflowUpdateAccepted",
	43: "WorkflowUpdateCompleted",
	44: "WorkflowPropertiesModifiedExternally",
	45: "ActivityPropertiesModifiedExternally",
	46: "WorkflowPropertiesModified",
}

var EventType_value = map[string]int32{
	"Unspecified":                                     0,
	"WorkflowExecutionStarted":                        1,
	"WorkflowExecutionCompleted":                      2,
	"WorkflowExecutionFailed":                         3,
	"WorkflowExecutionTimedOut":                       4,
	"WorkflowTaskScheduled":                           5,
	"WorkflowTaskStarted":                             6,
	"WorkflowTaskCompleted":                           7,
	"WorkflowTaskTimedOut":                            8,
	"WorkflowTaskFailed":                              9,
	"ActivityTaskScheduled":                           10,
	"ActivityTaskStarted":                             11,
	"ActivityTaskCompleted":                           12,
	"ActivityTaskFailed":                              13,
	"ActivityTaskTimedOut":                            14,
	"ActivityTaskCancelRequested":                     15,
	"ActivityTaskCanceled":                            16,
	"TimerStarted":                                    17,
	"TimerFired":                                      18,
	"TimerCanceled":                                   19,
	"WorkflowExecutionCancelRequested":                20,
	"WorkflowExecutionCanceled":                       21,
	"RequestCancelExternalWorkflowExecutionInitiated": 22,
	"RequestCancelExternalWorkflowExecutionFailed":    23,
	"ExternalWorkflowExecutionCancelRequested":        24,
	"MarkerRecorded":                                  25,
	"WorkflowExecutionSignaled":                       26,
	"WorkflowExecutionTerminated":                     27,
	"WorkflowExecutionContinuedAsNew":                 28,
	"StartChildWorkflowExecutionInitiated":            29,
	"StartChildWorkflowExecutionFailed":               30,
	"ChildWorkflowExecutionStarted":                   31,
	"ChildWorkflowExecutionCompleted":                 32,
	"ChildWorkflowExecutionFailed":                    33,
	"ChildWorkflowExecutionCanceled":                  34,
	"ChildWorkflowExecutionTimedOut":                  35,
	"ChildWorkflowExecutionTerminated":                36,
	"SignalExternalWorkflowExecutionInitiated":        37,
	"SignalExternalWorkflowExecutionFailed":           38,
	"ExternalWorkflowExecutionSignaled":               39,
	"UpsertWorkflowSearchAttributes":                  40,
	"WorkflowUpdateRejected":                          41,
	"WorkflowUpdateAccepted":                          42,
	"WorkflowUpdateCompleted":                         43,
	"WorkflowPropertiesModifiedExternally":            44,
	"ActivityPropertiesModifiedExternally":            45,
	"WorkflowPropertiesModified":                      46,
}

func (EventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b482d2737d9259e4, []int{0}
}

func init() {
	proto.RegisterEnum("temporal.api.enums.v1.EventType", EventType_name, EventType_value)
}

func init() {
	proto.RegisterFile("temporal/api/enums/v1/event_type.proto", fileDescriptor_b482d2737d9259e4)
}

var fileDescriptor_b482d2737d9259e4 = []byte{
	// 795 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x96, 0xdf, 0x52, 0xf3, 0x44,
	0x18, 0xc6, 0x1b, 0xd4, 0x4f, 0xbf, 0x57, 0xfd, 0x8c, 0xab, 0x1f, 0x7f, 0x2a, 0x84, 0xff, 0x05,
	0x0a, 0xa4, 0x14, 0x18, 0x71, 0x8a, 0x33, 0xba, 0x24, 0x6f, 0x65, 0xa5, 0x4d, 0xe2, 0x66, 0x53,
	0xc0, 0x93, 0x0c, 0xce, 0x74, 0x9c, 0xce, 0x08, 0xcd, 0x60, 0x65, 0x86, 0x33, 0x2f, 0xc1, 0xcb,
	0x70, 0xbc, 0x04, 0xaf, 0xc0, 0x43, 0x0e, 0x39, 0x94, 0x72, 0xe2, 0x78, 0xc4, 0x25, 0x38, 0x09,
	0x69, 0x13, 0x42, 0x9b, 0xc6, 0xef, 0xac, 0x33, 0xfb, 0x7b, 0x9e, 0x7d, 0x9f, 0xdd, 0x77, 0x9b,
	0x17, 0x0a, 0x9d, 0xe6, 0xb9, 0xd7, 0xbe, 0x3c, 0xfb, 0xa9, 0x74, 0xe6, 0xb5, 0x4a, 0xcd, 0x8b,
	0x5f, 0xce, 0x7f, 0x2e, 0x5d, 0x95, 0x4b, 0xcd, 0xab, 0xe6, 0x45, 0xc7, 0xed, 0x5c, 0x7b, 0x4d,
	0xd5, 0xbb, 0x6c, 0x77, 0xda, 0xe4, 0x75, 0x8f, 0x53, 0xcf, 0xbc, 0x96, 0x1a, 0x70, 0xea, 0x55,
	0xb9, 0xf8, 0x20, 0xc3, 0x4b, 0xf4, 0x59, 0x71, 0xed, 0x35, 0x49, 0x1e, 0xc6, 0xb1, 0x81, 0x86,
	0x70, 0xc5, 0xa9, 0x85, 0xae, 0x63, 0xd8, 0x16, 0x6a, 0xac, 0xca, 0x50, 0x97, 0x73, 0x64, 0x0d,
	0x96, 0x63, 0x6b, 0xc7, 0x26, 0x3f, 0xaa, 0xd6, 0xcc, 0x63, 0x17, 0x4f, 0x50, 0x73, 0x04, 0x33,
	0x0d, 0xd7, 0x16, 0x94, 0x0b, 0xd4, 0x65, 0x89, 0xac, 0xc3, 0x4a, 0x3a, 0xaa, 0x99, 0x75, 0xab,
	0x86, 0x3e, 0x3c, 0x46, 0x56, 0x61, 0x29, 0x1d, 0xae, 0x52, 0x56, 0x43, 0x5d, 0x7e, 0x6b, 0xb4,
	0xad, 0x60, 0x75, 0xd4, 0x5d, 0xd3, 0x11, 0xf2, 0xdb, 0xa4, 0x00, 0x0b, 0x83, 0x60, 0x41, 0xed,
	0x23, 0xd7, 0xd6, 0x0e, 0x51, 0x77, 0x7c, 0xd3, 0x77, 0xc8, 0x12, 0xcc, 0x0d, 0xe7, 0xc2, 0x44,
	0x2f, 0x52, 0xdd, 0xa2, 0x30, 0xef, 0xa6, 0x72, 0x51, 0x75, 0xef, 0x91, 0x45, 0x98, 0x1d, 0xca,
	0x85, 0x79, 0x5f, 0x26, 0xcc, 0xa8, 0x26, 0x58, 0x83, 0x89, 0xd3, 0x64, 0x04, 0x48, 0x44, 0x48,
	0x70, 0x61, 0x84, 0xf7, 0x53, 0xdd, 0xa2, 0x08, 0x1f, 0x24, 0x4a, 0x7b, 0xca, 0x85, 0xa5, 0x7d,
	0x98, 0x6a, 0x16, 0xe5, 0x7c, 0x45, 0x36, 0x61, 0x6d, 0xf8, 0xa6, 0xd4, 0xd0, 0xb0, 0xe6, 0x72,
	0xfc, 0xce, 0x41, 0xdb, 0xdf, 0xfb, 0x23, 0xb2, 0x0c, 0xf3, 0x23, 0x70, 0xd4, 0x65, 0x99, 0x4c,
	0xc3, 0x64, 0x0c, 0xf3, 0xf7, 0xe3, 0xfd, 0xa0, 0x1f, 0x27, 0x9a, 0xf8, 0x71, 0xb5, 0xca, 0x38,
	0xea, 0x32, 0x21, 0x33, 0x30, 0xf5, 0x6c, 0xad, 0x6f, 0xfc, 0x09, 0xd9, 0x06, 0x75, 0x44, 0xe3,
	0x26, 0x6b, 0xfe, 0x94, 0x14, 0xa1, 0x90, 0x45, 0x83, 0xba, 0xfc, 0x9a, 0x68, 0xf0, 0x55, 0x8c,
	0x0d, 0x5d, 0x7a, 0xa6, 0x78, 0x22, 0x90, 0x1b, 0xb4, 0x36, 0xc8, 0x83, 0x19, 0x4c, 0x30, 0xea,
	0x6f, 0x38, 0x4e, 0xbe, 0x86, 0x2f, 0xdf, 0xcc, 0x24, 0xbc, 0xbd, 0x09, 0xb2, 0x0f, 0x7b, 0x31,
	0x87, 0x34, 0xc9, 0xb3, 0xbc, 0x93, 0x44, 0x81, 0x7c, 0x4c, 0x5c, 0xa7, 0xfc, 0x08, 0xb9, 0xcb,
	0x51, 0x33, 0xb9, 0x8e, 0xba, 0x3c, 0x35, 0xfa, 0x3c, 0x6c, 0xf6, 0x8d, 0x41, 0xfd, 0x42, 0xf2,
	0x64, 0x03, 0x56, 0x47, 0xbc, 0x68, 0xe4, 0x75, 0x66, 0x04, 0xc1, 0x3f, 0xcb, 0x70, 0x3b, 0xa6,
	0x21, 0x98, 0xe1, 0xa0, 0xee, 0x52, 0xdb, 0x35, 0xf0, 0x58, 0x9e, 0x26, 0x7b, 0xb0, 0x13, 0xd3,
	0x04, 0x4d, 0xe2, 0x6a, 0x87, 0xac, 0xa6, 0xa7, 0x9f, 0xf2, 0x0c, 0xd9, 0x85, 0xad, 0xec, 0xc2,
	0xf0, 0x64, 0x15, 0x52, 0x82, 0xf5, 0x98, 0x6a, 0x28, 0xdf, 0x6b, 0xd6, 0x59, 0x52, 0x86, 0xcd,
	0x2c, 0x82, 0xe8, 0x81, 0xce, 0x11, 0x15, 0x8a, 0x59, 0x24, 0x61, 0x4d, 0xf3, 0x64, 0x0b, 0x36,
	0x32, 0x6d, 0xd1, 0x6b, 0xd3, 0x85, 0xac, 0x45, 0x45, 0x0f, 0x7d, 0x31, 0x71, 0x37, 0xc3, 0x25,
	0xd1, 0x7d, 0x2e, 0x25, 0xda, 0xf0, 0xb1, 0x2d, 0x32, 0xbe, 0x82, 0x65, 0xf2, 0x05, 0xec, 0xfe,
	0x3f, 0x71, 0x78, 0x1e, 0x05, 0xb2, 0x03, 0xa5, 0x8c, 0xdd, 0xdf, 0xef, 0xd4, 0x95, 0xc4, 0x21,
	0x3a, 0x96, 0x8d, 0x5c, 0x44, 0x12, 0x1b, 0x29, 0xd7, 0x0e, 0x5d, 0x2a, 0x04, 0x67, 0x07, 0x8e,
	0x40, 0x5b, 0x5e, 0x25, 0x2b, 0xb0, 0x38, 0xa8, 0x5b, 0x1d, 0x4b, 0xa7, 0xc2, 0x7f, 0xb6, 0xdf,
	0xa2, 0xe6, 0x27, 0x59, 0x1b, 0x01, 0x52, 0x4d, 0x43, 0xcb, 0x07, 0x8b, 0xc3, 0xbe, 0x94, 0x21,
	0x18, 0xb5, 0xc8, 0x3a, 0xf9, 0x1c, 0xb6, 0x07, 0x91, 0x16, 0x37, 0x2d, 0xe4, 0x82, 0xa1, 0xed,
	0xd6, 0x4d, 0x3d, 0xf8, 0xb0, 0xf7, 0xf3, 0xd7, 0x4e, 0xe5, 0x8d, 0x84, 0xae, 0xff, 0xff, 0x3b,
	0x42, 0xb7, 0x39, 0xec, 0xcb, 0x3c, 0x40, 0x27, 0xab, 0x07, 0x7f, 0x4a, 0x37, 0x77, 0x4a, 0xee,
	0xf6, 0x4e, 0xc9, 0x3d, 0xdc, 0x29, 0xd2, 0xaf, 0x5d, 0x45, 0xfa, 0xbd, 0xab, 0x48, 0x7f, 0x75,
	0x15, 0xe9, 0xa6, 0xab, 0x48, 0x7f, 0x77, 0x15, 0xe9, 0x9f, 0xae, 0x92, 0x7b, 0xe8, 0x2a, 0xd2,
	0x6f, 0xf7, 0x4a, 0xee, 0xe6, 0x5e, 0xc9, 0xdd, 0xde, 0x2b, 0x39, 0x98, 0x6c, 0xb5, 0xd5, 0x81,
	0x33, 0xcc, 0xc1, 0xab, 0xfe, 0x00, 0x63, 0xf9, 0xa3, 0x8e, 0x25, 0x7d, 0x3f, 0xff, 0x63, 0x8c,
	0x6d, 0xb5, 0x9f, 0x8c, 0x46, 0xfb, 0xc1, 0x8f, 0x3f, 0xc6, 0x26, 0x44, 0x08, 0xb4, 0xda, 0x2a,
	0xf5, 0x5a, 0x2a, 0x06, 0x76, 0x8d, 0xf2, 0xbf, 0x63, 0xf9, 0x68, 0xa5, 0x52, 0xa1, 0x5e, 0xab,
	0x52, 0x09, 0xd6, 0x2a, 0x95, 0x46, 0xf9, 0x87, 0x17, 0xc1, 0x34, 0xb5, 0xf3, 0x5f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xf8, 0xb4, 0xce, 0xc6, 0x77, 0x09, 0x00, 0x00,
}

func (x EventType) String() string {
	s, ok := EventType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

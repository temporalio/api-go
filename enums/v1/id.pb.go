// Code generated by protoc-gen-go. DO NOT EDIT.
// plugins:
// 	protoc-gen-go
// 	protoc
// source: temporal/api/enums/v1/id.proto

package enums

import (
	reflect "reflect"
	"strconv"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Defines whether to allow re-using an ID from a previously *closed* execution.
// If the request is denied, the server returns an `ExecutionAlreadyStarted` error.
//
// See `IdConflictPolicy` for handling ID duplication with a *running* execution.
type IdReusePolicy int32

const (
	ID_REUSE_POLICY_UNSPECIFIED IdReusePolicy = 0
	// Always allow starting an execution using the same entity ID.
	ID_REUSE_POLICY_ALLOW_DUPLICATE IdReusePolicy = 1
	// Allow starting an execution using the same ID, only when the last execution's final state is one of [terminated,
	// cancelled, timed out, failed].
	ID_REUSE_POLICY_ALLOW_DUPLICATE_FAILED_ONLY IdReusePolicy = 2
	// Do not permit re-use of the ID for this execution. Future start requests could potentially change the policy,
	// allowing re-use of the ID.
	ID_REUSE_POLICY_REJECT_DUPLICATE IdReusePolicy = 3
)

// Enum value maps for IdReusePolicy.
var (
	IdReusePolicy_name = map[int32]string{
		0: "ID_REUSE_POLICY_UNSPECIFIED",
		1: "ID_REUSE_POLICY_ALLOW_DUPLICATE",
		2: "ID_REUSE_POLICY_ALLOW_DUPLICATE_FAILED_ONLY",
		3: "ID_REUSE_POLICY_REJECT_DUPLICATE",
	}
	IdReusePolicy_value = map[string]int32{
		"ID_REUSE_POLICY_UNSPECIFIED":                 0,
		"ID_REUSE_POLICY_ALLOW_DUPLICATE":             1,
		"ID_REUSE_POLICY_ALLOW_DUPLICATE_FAILED_ONLY": 2,
		"ID_REUSE_POLICY_REJECT_DUPLICATE":            3,
	}
)

func (x IdReusePolicy) Enum() *IdReusePolicy {
	p := new(IdReusePolicy)
	*p = x
	return p
}

func (x IdReusePolicy) String() string {
	switch x {
	case ID_REUSE_POLICY_UNSPECIFIED:
		return "Unspecified"
	case ID_REUSE_POLICY_ALLOW_DUPLICATE:
		return "AllowDuplicate"
	case ID_REUSE_POLICY_ALLOW_DUPLICATE_FAILED_ONLY:
		return "AllowDuplicateFailedOnly"
	case ID_REUSE_POLICY_REJECT_DUPLICATE:
		return "RejectDuplicate"
	default:
		return strconv.Itoa(int(x))
	}

}

func (IdReusePolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_api_enums_v1_id_proto_enumTypes[0].Descriptor()
}

func (IdReusePolicy) Type() protoreflect.EnumType {
	return &file_temporal_api_enums_v1_id_proto_enumTypes[0]
}

func (x IdReusePolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IdReusePolicy.Descriptor instead.
func (IdReusePolicy) EnumDescriptor() ([]byte, []int) {
	return file_temporal_api_enums_v1_id_proto_rawDescGZIP(), []int{0}
}

// Defines what to do when trying to start an execution with the same ID as a *running* execution.
// Note that it is *never* valid to have two actively running instances of the same execution ID.
//
// See `IdReusePolicy` for handling execution ID duplication with a *closed* execution.
type IdConflictPolicy int32

const (
	ID_CONFLICT_POLICY_UNSPECIFIED IdConflictPolicy = 0
	// Don't start a new execution; instead return `ExecutionAlreadyStarted` error.
	ID_CONFLICT_POLICY_FAIL IdConflictPolicy = 1
	// Don't start a new execution; instead return a handle for the running execution.
	ID_CONFLICT_POLICY_USE_EXISTING IdConflictPolicy = 2
	// Terminate the running execution before starting a new one.
	ID_CONFLICT_POLICY_TERMINATE_EXISTING IdConflictPolicy = 3
)

// Enum value maps for IdConflictPolicy.
var (
	IdConflictPolicy_name = map[int32]string{
		0: "ID_CONFLICT_POLICY_UNSPECIFIED",
		1: "ID_CONFLICT_POLICY_FAIL",
		2: "ID_CONFLICT_POLICY_USE_EXISTING",
		3: "ID_CONFLICT_POLICY_TERMINATE_EXISTING",
	}
	IdConflictPolicy_value = map[string]int32{
		"ID_CONFLICT_POLICY_UNSPECIFIED":        0,
		"ID_CONFLICT_POLICY_FAIL":               1,
		"ID_CONFLICT_POLICY_USE_EXISTING":       2,
		"ID_CONFLICT_POLICY_TERMINATE_EXISTING": 3,
	}
)

func (x IdConflictPolicy) Enum() *IdConflictPolicy {
	p := new(IdConflictPolicy)
	*p = x
	return p
}

func (x IdConflictPolicy) String() string {
	switch x {
	case ID_CONFLICT_POLICY_UNSPECIFIED:
		return "Unspecified"
	case ID_CONFLICT_POLICY_FAIL:
		return "Fail"
	case ID_CONFLICT_POLICY_USE_EXISTING:
		return "UseExisting"
	case ID_CONFLICT_POLICY_TERMINATE_EXISTING:
		return "TerminateExisting"
	default:
		return strconv.Itoa(int(x))
	}

}

func (IdConflictPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_api_enums_v1_id_proto_enumTypes[1].Descriptor()
}

func (IdConflictPolicy) Type() protoreflect.EnumType {
	return &file_temporal_api_enums_v1_id_proto_enumTypes[1]
}

func (x IdConflictPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IdConflictPolicy.Descriptor instead.
func (IdConflictPolicy) EnumDescriptor() ([]byte, []int) {
	return file_temporal_api_enums_v1_id_proto_rawDescGZIP(), []int{1}
}

var File_temporal_api_enums_v1_id_proto protoreflect.FileDescriptor

var file_temporal_api_enums_v1_id_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x15, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2a, 0xac, 0x01, 0x0a, 0x0d, 0x49, 0x64, 0x52, 0x65,
	0x75, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x44, 0x5f,
	0x52, 0x45, 0x55, 0x53, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x49, 0x44,
	0x5f, 0x52, 0x45, 0x55, 0x53, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x41, 0x4c,
	0x4c, 0x4f, 0x57, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12,
	0x2f, 0x0a, 0x2b, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x55, 0x53, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49,
	0x43, 0x59, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41,
	0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02,
	0x12, 0x24, 0x0a, 0x20, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x55, 0x53, 0x45, 0x5f, 0x50, 0x4f, 0x4c,
	0x49, 0x43, 0x59, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x45, 0x10, 0x03, 0x2a, 0xa3, 0x01, 0x0a, 0x10, 0x49, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x6c, 0x69, 0x63, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x22, 0x0a, 0x1e, 0x49,
	0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43,
	0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1b, 0x0a, 0x17, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54, 0x5f, 0x50,
	0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f,
	0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54, 0x5f, 0x50, 0x4f, 0x4c, 0x49,
	0x43, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x10,
	0x02, 0x12, 0x29, 0x0a, 0x25, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54,
	0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54,
	0x45, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x42, 0x7f, 0x0a, 0x18,
	0x69, 0x6f, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x07, 0x49, 0x64, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x21, 0x67, 0x6f, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c,
	0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x76, 0x31,
	0x3b, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0xaa, 0x02, 0x17, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61,
	0x6c, 0x69, 0x6f, 0x2e, 0x41, 0x70, 0x69, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x56, 0x31,
	0xea, 0x02, 0x1a, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x69, 0x6f, 0x3a, 0x3a, 0x41,
	0x70, 0x69, 0x3a, 0x3a, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_temporal_api_enums_v1_id_proto_rawDescOnce sync.Once
	file_temporal_api_enums_v1_id_proto_rawDescData = file_temporal_api_enums_v1_id_proto_rawDesc
)

func file_temporal_api_enums_v1_id_proto_rawDescGZIP() []byte {
	file_temporal_api_enums_v1_id_proto_rawDescOnce.Do(func() {
		file_temporal_api_enums_v1_id_proto_rawDescData = protoimpl.X.CompressGZIP(file_temporal_api_enums_v1_id_proto_rawDescData)
	})
	return file_temporal_api_enums_v1_id_proto_rawDescData
}

var file_temporal_api_enums_v1_id_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_temporal_api_enums_v1_id_proto_goTypes = []interface{}{
	(IdReusePolicy)(0),    // 0: temporal.api.enums.v1.IdReusePolicy
	(IdConflictPolicy)(0), // 1: temporal.api.enums.v1.IdConflictPolicy
}
var file_temporal_api_enums_v1_id_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_temporal_api_enums_v1_id_proto_init() }
func file_temporal_api_enums_v1_id_proto_init() {
	if File_temporal_api_enums_v1_id_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_temporal_api_enums_v1_id_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_temporal_api_enums_v1_id_proto_goTypes,
		DependencyIndexes: file_temporal_api_enums_v1_id_proto_depIdxs,
		EnumInfos:         file_temporal_api_enums_v1_id_proto_enumTypes,
	}.Build()
	File_temporal_api_enums_v1_id_proto = out.File
	file_temporal_api_enums_v1_id_proto_rawDesc = nil
	file_temporal_api_enums_v1_id_proto_goTypes = nil
	file_temporal_api_enums_v1_id_proto_depIdxs = nil
}

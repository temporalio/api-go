// Code generated by protoc-gen-go. DO NOT EDIT.
// plugins:
// 	protoc-gen-go
// 	protoc
// source: temporal/api/enums/v1/deployment.proto

package enums

import (
	reflect "reflect"
	"strconv"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Specify the reachability level for a deployment so users can decide if it is time to
// decommission the deployment.
type DeploymentReachability int32

const (
	// Reachability level is not specified.
	DEPLOYMENT_REACHABILITY_UNSPECIFIED DeploymentReachability = 0
	// The deployment is reachable by new and/or open workflows. The deployment cannot be
	// decommissioned safely.
	DEPLOYMENT_REACHABILITY_REACHABLE DeploymentReachability = 1
	// The deployment is not reachable by new or open workflows, but might be still needed by
	// Queries sent to closed workflows. The deployment can be decommissioned safely if user does
	// not query closed workflows.
	DEPLOYMENT_REACHABILITY_CLOSED_WORKFLOWS_ONLY DeploymentReachability = 2
	// The deployment is not reachable by any workflow because all the workflows who needed this
	// deployment went out of retention period. The deployment can be decommissioned safely.
	DEPLOYMENT_REACHABILITY_UNREACHABLE DeploymentReachability = 3
)

// Enum value maps for DeploymentReachability.
var (
	DeploymentReachability_name = map[int32]string{
		0: "DEPLOYMENT_REACHABILITY_UNSPECIFIED",
		1: "DEPLOYMENT_REACHABILITY_REACHABLE",
		2: "DEPLOYMENT_REACHABILITY_CLOSED_WORKFLOWS_ONLY",
		3: "DEPLOYMENT_REACHABILITY_UNREACHABLE",
	}
	DeploymentReachability_value = map[string]int32{
		"DEPLOYMENT_REACHABILITY_UNSPECIFIED":           0,
		"DEPLOYMENT_REACHABILITY_REACHABLE":             1,
		"DEPLOYMENT_REACHABILITY_CLOSED_WORKFLOWS_ONLY": 2,
		"DEPLOYMENT_REACHABILITY_UNREACHABLE":           3,
	}
)

func (x DeploymentReachability) Enum() *DeploymentReachability {
	p := new(DeploymentReachability)
	*p = x
	return p
}

func (x DeploymentReachability) String() string {
	switch x {
	case DEPLOYMENT_REACHABILITY_UNSPECIFIED:
		return "Unspecified"
	case DEPLOYMENT_REACHABILITY_REACHABLE:
		return "Reachable"
	case DEPLOYMENT_REACHABILITY_CLOSED_WORKFLOWS_ONLY:
		return "ClosedWorkflowsOnly"
	case DEPLOYMENT_REACHABILITY_UNREACHABLE:
		return "Unreachable"
	default:
		return strconv.Itoa(int(x))
	}

}

func (DeploymentReachability) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_api_enums_v1_deployment_proto_enumTypes[0].Descriptor()
}

func (DeploymentReachability) Type() protoreflect.EnumType {
	return &file_temporal_api_enums_v1_deployment_proto_enumTypes[0]
}

func (x DeploymentReachability) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeploymentReachability.Descriptor instead.
func (DeploymentReachability) EnumDescriptor() ([]byte, []int) {
	return file_temporal_api_enums_v1_deployment_proto_rawDescGZIP(), []int{0}
}

// (-- api-linter: core::0216::synonyms=disabled
//
//	aip.dev/not-precedent: Call this status because it is . --)
//
// Specify the drainage status for a Worker Deployment Version so users can decide whether they
// can safely decommission the version.
// Experimental. Worker Deployments are experimental and might significantly change in the future.
type VersionDrainageStatus int32

const (
	// Drainage Status is not specified.
	VERSION_DRAINAGE_STATUS_UNSPECIFIED VersionDrainageStatus = 0
	// The Worker Deployment Version is not used by new workflows but is still used by
	// open pinned workflows. The version cannot be decommissioned safely.
	VERSION_DRAINAGE_STATUS_DRAINING VersionDrainageStatus = 1
	// The Worker Deployment Version is not used by new or open workflows, but might be still needed by
	// Queries sent to closed workflows. The version can be decommissioned safely if user does
	// not query closed workflows. If the user does query closed workflows for some time x after
	// workflows are closed, they should decommission the version after it has been drained for that duration.
	VERSION_DRAINAGE_STATUS_DRAINED VersionDrainageStatus = 2
)

// Enum value maps for VersionDrainageStatus.
var (
	VersionDrainageStatus_name = map[int32]string{
		0: "VERSION_DRAINAGE_STATUS_UNSPECIFIED",
		1: "VERSION_DRAINAGE_STATUS_DRAINING",
		2: "VERSION_DRAINAGE_STATUS_DRAINED",
	}
	VersionDrainageStatus_value = map[string]int32{
		"VERSION_DRAINAGE_STATUS_UNSPECIFIED": 0,
		"VERSION_DRAINAGE_STATUS_DRAINING":    1,
		"VERSION_DRAINAGE_STATUS_DRAINED":     2,
	}
)

func (x VersionDrainageStatus) Enum() *VersionDrainageStatus {
	p := new(VersionDrainageStatus)
	*p = x
	return p
}

func (x VersionDrainageStatus) String() string {
	switch x {
	case VERSION_DRAINAGE_STATUS_UNSPECIFIED:
		return "Unspecified"
	case VERSION_DRAINAGE_STATUS_DRAINING:
		return "Draining"
	case VERSION_DRAINAGE_STATUS_DRAINED:
		return "Drained"
	default:
		return strconv.Itoa(int(x))
	}

}

func (VersionDrainageStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_api_enums_v1_deployment_proto_enumTypes[1].Descriptor()
}

func (VersionDrainageStatus) Type() protoreflect.EnumType {
	return &file_temporal_api_enums_v1_deployment_proto_enumTypes[1]
}

func (x VersionDrainageStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VersionDrainageStatus.Descriptor instead.
func (VersionDrainageStatus) EnumDescriptor() ([]byte, []int) {
	return file_temporal_api_enums_v1_deployment_proto_rawDescGZIP(), []int{1}
}

// Versioning Mode of a worker is set by the app developer in the worker code, and specifies the
// behavior of the system in the following related aspects:
//   - Whether or not Temporal Server considers this worker's version (Build ID) when dispatching
//     tasks to it.
//   - Whether or not the workflows processed by this worker are versioned using the worker's version.
//
// Experimental. Worker Deployments are experimental and might significantly change in the future.
type WorkerVersioningMode int32

const (
	WORKER_VERSIONING_MODE_UNSPECIFIED WorkerVersioningMode = 0
	// Workers with this mode are not distinguished from each other for task routing, even if they
	// have different Build IDs.
	// Workflows processed by this worker will be unversioned and user needs to use Patching to keep
	// the new code compatible with prior versions.
	// This mode is recommended to be used along with Rolling Upgrade deployment strategies.
	// Workers with this mode are represented by the special string `__unversioned__` in the APIs.
	WORKER_VERSIONING_MODE_UNVERSIONED WorkerVersioningMode = 1
	// Workers with this mode are part of a Worker Deployment Version which is identified as
	// "<deployment_name>.<build_id>". Such workers are called "versioned" as opposed to
	// "unversioned".
	// Each Deployment Version is distinguished from other Versions for task routing and users can
	// configure Temporal Server to send tasks to a particular Version (see
	// `WorkerDeploymentInfo.routing_config`). This mode is the best option for Blue/Green and
	// Rainbow strategies (but typically not suitable for Rolling upgrades.)
	// Workflow Versioning Behaviors are enabled in this mode: each workflow type must choose
	// between the Pinned and AutoUpgrade behaviors. Depending on the chosen behavior, the user may
	// or may not need to use Patching to keep the new code compatible with prior versions. (see
	// VersioningBehavior enum.)
	WORKER_VERSIONING_MODE_VERSIONED WorkerVersioningMode = 2
)

// Enum value maps for WorkerVersioningMode.
var (
	WorkerVersioningMode_name = map[int32]string{
		0: "WORKER_VERSIONING_MODE_UNSPECIFIED",
		1: "WORKER_VERSIONING_MODE_UNVERSIONED",
		2: "WORKER_VERSIONING_MODE_VERSIONED",
	}
	WorkerVersioningMode_value = map[string]int32{
		"WORKER_VERSIONING_MODE_UNSPECIFIED": 0,
		"WORKER_VERSIONING_MODE_UNVERSIONED": 1,
		"WORKER_VERSIONING_MODE_VERSIONED":   2,
	}
)

func (x WorkerVersioningMode) Enum() *WorkerVersioningMode {
	p := new(WorkerVersioningMode)
	*p = x
	return p
}

func (x WorkerVersioningMode) String() string {
	switch x {
	case WORKER_VERSIONING_MODE_UNSPECIFIED:
		return "Unspecified"
	case WORKER_VERSIONING_MODE_UNVERSIONED:
		return "Unversioned"
	case WORKER_VERSIONING_MODE_VERSIONED:
		return "Versioned"
	default:
		return strconv.Itoa(int(x))
	}

}

func (WorkerVersioningMode) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_api_enums_v1_deployment_proto_enumTypes[2].Descriptor()
}

func (WorkerVersioningMode) Type() protoreflect.EnumType {
	return &file_temporal_api_enums_v1_deployment_proto_enumTypes[2]
}

func (x WorkerVersioningMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkerVersioningMode.Descriptor instead.
func (WorkerVersioningMode) EnumDescriptor() ([]byte, []int) {
	return file_temporal_api_enums_v1_deployment_proto_rawDescGZIP(), []int{2}
}

// (-- api-linter: core::0216::synonyms=disabled
//
//	aip.dev/not-precedent: Call this status because it is . --)
//
// Specify the status of a Worker Deployment Version.
// Experimental. Worker Deployments are experimental and might significantly change in the future.
type WorkerDeploymentVersionStatus int32

const (
	WORKER_DEPLOYMENT_VERSION_STATUS_UNSPECIFIED WorkerDeploymentVersionStatus = 0
	// The Worker Deployment Version has been created inside the Worker Deployment but is not used by any
	// workflow executions. These Versions can still have workflows if they have an explicit Versioning Override targeting
	// this Version. Such Versioning Override could be set at workflow start time, or at a later time via `UpdateWorkflowExecutionOptions`.
	WORKER_DEPLOYMENT_VERSION_STATUS_INACTIVE WorkerDeploymentVersionStatus = 1
	// The Worker Deployment Version is the current version of the Worker Deployment. All new workflow executions
	// and tasks of existing unversioned or AutoUpgrade workflows are routed to this version.
	WORKER_DEPLOYMENT_VERSION_STATUS_CURRENT WorkerDeploymentVersionStatus = 2
	// The Worker Deployment Version is the ramping version of the Worker Deployment. A subset of new Pinned workflow executions are
	// routed to this version. Moreover, a portion of existing unversioned or AutoUpgrade workflow executions are also routed to this version.
	WORKER_DEPLOYMENT_VERSION_STATUS_RAMPING WorkerDeploymentVersionStatus = 3
	// The Worker Deployment Version is not used by new workflows but is still used by
	// open pinned workflows. The version cannot be decommissioned safely.
	WORKER_DEPLOYMENT_VERSION_STATUS_DRAINING WorkerDeploymentVersionStatus = 4
	// The Worker Deployment Version is not used by new or open workflows, but might be still needed by
	// Queries sent to closed workflows. The version can be decommissioned safely if user does
	// not query closed workflows. If the user does query closed workflows for some time x after
	// workflows are closed, they should decommission the version after it has been drained for that duration.
	WORKER_DEPLOYMENT_VERSION_STATUS_DRAINED WorkerDeploymentVersionStatus = 5
)

// Enum value maps for WorkerDeploymentVersionStatus.
var (
	WorkerDeploymentVersionStatus_name = map[int32]string{
		0: "WORKER_DEPLOYMENT_VERSION_STATUS_UNSPECIFIED",
		1: "WORKER_DEPLOYMENT_VERSION_STATUS_INACTIVE",
		2: "WORKER_DEPLOYMENT_VERSION_STATUS_CURRENT",
		3: "WORKER_DEPLOYMENT_VERSION_STATUS_RAMPING",
		4: "WORKER_DEPLOYMENT_VERSION_STATUS_DRAINING",
		5: "WORKER_DEPLOYMENT_VERSION_STATUS_DRAINED",
	}
	WorkerDeploymentVersionStatus_value = map[string]int32{
		"WORKER_DEPLOYMENT_VERSION_STATUS_UNSPECIFIED": 0,
		"WORKER_DEPLOYMENT_VERSION_STATUS_INACTIVE":    1,
		"WORKER_DEPLOYMENT_VERSION_STATUS_CURRENT":     2,
		"WORKER_DEPLOYMENT_VERSION_STATUS_RAMPING":     3,
		"WORKER_DEPLOYMENT_VERSION_STATUS_DRAINING":    4,
		"WORKER_DEPLOYMENT_VERSION_STATUS_DRAINED":     5,
	}
)

func (x WorkerDeploymentVersionStatus) Enum() *WorkerDeploymentVersionStatus {
	p := new(WorkerDeploymentVersionStatus)
	*p = x
	return p
}

func (x WorkerDeploymentVersionStatus) String() string {
	switch x {
	case WORKER_DEPLOYMENT_VERSION_STATUS_UNSPECIFIED:
		return "Unspecified"
	case WORKER_DEPLOYMENT_VERSION_STATUS_INACTIVE:
		return "Inactive"
	case WORKER_DEPLOYMENT_VERSION_STATUS_CURRENT:
		return "Current"
	case WORKER_DEPLOYMENT_VERSION_STATUS_RAMPING:
		return "Ramping"
	case WORKER_DEPLOYMENT_VERSION_STATUS_DRAINING:
		return "Draining"
	case WORKER_DEPLOYMENT_VERSION_STATUS_DRAINED:
		return "Drained"
	default:
		return strconv.Itoa(int(x))
	}

}

func (WorkerDeploymentVersionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_api_enums_v1_deployment_proto_enumTypes[3].Descriptor()
}

func (WorkerDeploymentVersionStatus) Type() protoreflect.EnumType {
	return &file_temporal_api_enums_v1_deployment_proto_enumTypes[3]
}

func (x WorkerDeploymentVersionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkerDeploymentVersionStatus.Descriptor instead.
func (WorkerDeploymentVersionStatus) EnumDescriptor() ([]byte, []int) {
	return file_temporal_api_enums_v1_deployment_proto_rawDescGZIP(), []int{3}
}

var File_temporal_api_enums_v1_deployment_proto protoreflect.FileDescriptor

var file_temporal_api_enums_v1_deployment_proto_rawDesc = []byte{
	0x0a, 0x26, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72,
	0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2a,
	0xc4, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x45,
	0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x52,
	0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x31, 0x0a, 0x2d, 0x44, 0x45,
	0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x5f, 0x57, 0x4f, 0x52,
	0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x53, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x27, 0x0a,
	0x23, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x43,
	0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x2a, 0x8b, 0x01, 0x0a, 0x15, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x27, 0x0a, 0x23, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x52, 0x41, 0x49,
	0x4e, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x56, 0x45, 0x52,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x52, 0x41, 0x49, 0x4e, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x52, 0x41, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12,
	0x23, 0x0a, 0x1f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x52, 0x41, 0x49, 0x4e,
	0x41, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x52, 0x41, 0x49, 0x4e,
	0x45, 0x44, 0x10, 0x02, 0x2a, 0x8c, 0x01, 0x0a, 0x14, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a,
	0x22, 0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x49,
	0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52, 0x5f,
	0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x55, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x24, 0x0a,
	0x20, 0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x49,
	0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x45,
	0x44, 0x10, 0x02, 0x2a, 0xb9, 0x02, 0x0a, 0x1d, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x2c, 0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52, 0x5f,
	0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2d, 0x0a, 0x29, 0x57, 0x4f, 0x52, 0x4b, 0x45,
	0x52, 0x5f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x56, 0x45, 0x52,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52,
	0x5f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x56, 0x45, 0x52, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45,
	0x4e, 0x54, 0x10, 0x02, 0x12, 0x2c, 0x0a, 0x28, 0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52, 0x5f, 0x44,
	0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x41, 0x4d, 0x50, 0x49, 0x4e, 0x47,
	0x10, 0x03, 0x12, 0x2d, 0x0a, 0x29, 0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x50,
	0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x52, 0x41, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x10,
	0x04, 0x12, 0x2c, 0x0a, 0x28, 0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x50, 0x4c,
	0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x52, 0x41, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x05, 0x42,
	0x87, 0x01, 0x0a, 0x18, 0x69, 0x6f, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x0f, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x21, 0x67, 0x6f, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6f, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0xaa, 0x02, 0x17, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x69, 0x6f, 0x2e,
	0x41, 0x70, 0x69, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x56, 0x31, 0xea, 0x02, 0x1a, 0x54,
	0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x69, 0x6f, 0x3a, 0x3a, 0x41, 0x70, 0x69, 0x3a, 0x3a,
	0x45, 0x6e, 0x75, 0x6d, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_temporal_api_enums_v1_deployment_proto_rawDescOnce sync.Once
	file_temporal_api_enums_v1_deployment_proto_rawDescData = file_temporal_api_enums_v1_deployment_proto_rawDesc
)

func file_temporal_api_enums_v1_deployment_proto_rawDescGZIP() []byte {
	file_temporal_api_enums_v1_deployment_proto_rawDescOnce.Do(func() {
		file_temporal_api_enums_v1_deployment_proto_rawDescData = protoimpl.X.CompressGZIP(file_temporal_api_enums_v1_deployment_proto_rawDescData)
	})
	return file_temporal_api_enums_v1_deployment_proto_rawDescData
}

var file_temporal_api_enums_v1_deployment_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_temporal_api_enums_v1_deployment_proto_goTypes = []interface{}{
	(DeploymentReachability)(0),        // 0: temporal.api.enums.v1.DeploymentReachability
	(VersionDrainageStatus)(0),         // 1: temporal.api.enums.v1.VersionDrainageStatus
	(WorkerVersioningMode)(0),          // 2: temporal.api.enums.v1.WorkerVersioningMode
	(WorkerDeploymentVersionStatus)(0), // 3: temporal.api.enums.v1.WorkerDeploymentVersionStatus
}
var file_temporal_api_enums_v1_deployment_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_temporal_api_enums_v1_deployment_proto_init() }
func file_temporal_api_enums_v1_deployment_proto_init() {
	if File_temporal_api_enums_v1_deployment_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_temporal_api_enums_v1_deployment_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_temporal_api_enums_v1_deployment_proto_goTypes,
		DependencyIndexes: file_temporal_api_enums_v1_deployment_proto_depIdxs,
		EnumInfos:         file_temporal_api_enums_v1_deployment_proto_enumTypes,
	}.Build()
	File_temporal_api_enums_v1_deployment_proto = out.File
	file_temporal_api_enums_v1_deployment_proto_rawDesc = nil
	file_temporal_api_enums_v1_deployment_proto_goTypes = nil
	file_temporal_api_enums_v1_deployment_proto_depIdxs = nil
}

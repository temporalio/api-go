// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: temporal/api/command/v1/message.proto

package command

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	v1 "go.temporal.io/api/common/v1"
	v13 "go.temporal.io/api/enums/v1"
	v12 "go.temporal.io/api/failure/v1"
	v11 "go.temporal.io/api/taskqueue/v1"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ScheduleActivityTaskCommandAttributes struct {
	ActivityId   string           `protobuf:"bytes,1,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	ActivityType *v1.ActivityType `protobuf:"bytes,2,opt,name=activity_type,json=activityType,proto3" json:"activity_type,omitempty"`
	Namespace    string           `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	TaskQueue    *v11.TaskQueue   `protobuf:"bytes,4,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	Header       *v1.Header       `protobuf:"bytes,5,opt,name=header,proto3" json:"header,omitempty"`
	Input        *v1.Payloads     `protobuf:"bytes,6,opt,name=input,proto3" json:"input,omitempty"`
	// Indicates how long the caller is willing to wait for an activity completion.
	// Limits for how long retries are happening. Either this or start_to_close_timeout_seconds must be specified.
	// When not specified defaults to the workflow execution timeout.
	ScheduleToCloseTimeoutSeconds int32 `protobuf:"varint,7,opt,name=schedule_to_close_timeout_seconds,json=scheduleToCloseTimeoutSeconds,proto3" json:"schedule_to_close_timeout_seconds,omitempty"`
	// Limits time an activity task can stay in a task queue before a worker picks it up.
	// This timeout is always non retryable as all a retry would achieve is to put it back into the same queue.
	// Defaults to schedule_to_close_timeout_seconds or workflow execution timeout if not specified.
	ScheduleToStartTimeoutSeconds int32 `protobuf:"varint,8,opt,name=schedule_to_start_timeout_seconds,json=scheduleToStartTimeoutSeconds,proto3" json:"schedule_to_start_timeout_seconds,omitempty"`
	// Maximum time an activity is allowed to execute after a pick up by a worker.
	// This timeout is always retryable. Either this or schedule_to_close_timeout_seconds must be specified.
	StartToCloseTimeoutSeconds int32 `protobuf:"varint,9,opt,name=start_to_close_timeout_seconds,json=startToCloseTimeoutSeconds,proto3" json:"start_to_close_timeout_seconds,omitempty"`
	// Maximum time between successful worker heartbeats.
	HeartbeatTimeoutSeconds int32 `protobuf:"varint,10,opt,name=heartbeat_timeout_seconds,json=heartbeatTimeoutSeconds,proto3" json:"heartbeat_timeout_seconds,omitempty"`
	// Activities are provided by a default retry policy controlled through the service dynamic configuration.
	// Retries are happening up to schedule_to_close_timeout.
	// To disable retries set retry_policy.maximum_attempts to 1.
	RetryPolicy *v1.RetryPolicy `protobuf:"bytes,11,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
}

func (m *ScheduleActivityTaskCommandAttributes) Reset()      { *m = ScheduleActivityTaskCommandAttributes{} }
func (*ScheduleActivityTaskCommandAttributes) ProtoMessage() {}
func (*ScheduleActivityTaskCommandAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac2e0d89a96b0e7, []int{0}
}
func (m *ScheduleActivityTaskCommandAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScheduleActivityTaskCommandAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScheduleActivityTaskCommandAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScheduleActivityTaskCommandAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScheduleActivityTaskCommandAttributes.Merge(m, src)
}
func (m *ScheduleActivityTaskCommandAttributes) XXX_Size() int {
	return m.Size()
}
func (m *ScheduleActivityTaskCommandAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_ScheduleActivityTaskCommandAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_ScheduleActivityTaskCommandAttributes proto.InternalMessageInfo

func (m *ScheduleActivityTaskCommandAttributes) GetActivityId() string {
	if m != nil {
		return m.ActivityId
	}
	return ""
}

func (m *ScheduleActivityTaskCommandAttributes) GetActivityType() *v1.ActivityType {
	if m != nil {
		return m.ActivityType
	}
	return nil
}

func (m *ScheduleActivityTaskCommandAttributes) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ScheduleActivityTaskCommandAttributes) GetTaskQueue() *v11.TaskQueue {
	if m != nil {
		return m.TaskQueue
	}
	return nil
}

func (m *ScheduleActivityTaskCommandAttributes) GetHeader() *v1.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ScheduleActivityTaskCommandAttributes) GetInput() *v1.Payloads {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *ScheduleActivityTaskCommandAttributes) GetScheduleToCloseTimeoutSeconds() int32 {
	if m != nil {
		return m.ScheduleToCloseTimeoutSeconds
	}
	return 0
}

func (m *ScheduleActivityTaskCommandAttributes) GetScheduleToStartTimeoutSeconds() int32 {
	if m != nil {
		return m.ScheduleToStartTimeoutSeconds
	}
	return 0
}

func (m *ScheduleActivityTaskCommandAttributes) GetStartToCloseTimeoutSeconds() int32 {
	if m != nil {
		return m.StartToCloseTimeoutSeconds
	}
	return 0
}

func (m *ScheduleActivityTaskCommandAttributes) GetHeartbeatTimeoutSeconds() int32 {
	if m != nil {
		return m.HeartbeatTimeoutSeconds
	}
	return 0
}

func (m *ScheduleActivityTaskCommandAttributes) GetRetryPolicy() *v1.RetryPolicy {
	if m != nil {
		return m.RetryPolicy
	}
	return nil
}

type RequestCancelActivityTaskCommandAttributes struct {
	ScheduledEventId int64 `protobuf:"varint,1,opt,name=scheduled_event_id,json=scheduledEventId,proto3" json:"scheduled_event_id,omitempty"`
}

func (m *RequestCancelActivityTaskCommandAttributes) Reset() {
	*m = RequestCancelActivityTaskCommandAttributes{}
}
func (*RequestCancelActivityTaskCommandAttributes) ProtoMessage() {}
func (*RequestCancelActivityTaskCommandAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac2e0d89a96b0e7, []int{1}
}
func (m *RequestCancelActivityTaskCommandAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestCancelActivityTaskCommandAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestCancelActivityTaskCommandAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestCancelActivityTaskCommandAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestCancelActivityTaskCommandAttributes.Merge(m, src)
}
func (m *RequestCancelActivityTaskCommandAttributes) XXX_Size() int {
	return m.Size()
}
func (m *RequestCancelActivityTaskCommandAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestCancelActivityTaskCommandAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_RequestCancelActivityTaskCommandAttributes proto.InternalMessageInfo

func (m *RequestCancelActivityTaskCommandAttributes) GetScheduledEventId() int64 {
	if m != nil {
		return m.ScheduledEventId
	}
	return 0
}

type StartTimerCommandAttributes struct {
	TimerId                   string `protobuf:"bytes,1,opt,name=timer_id,json=timerId,proto3" json:"timer_id,omitempty"`
	StartToFireTimeoutSeconds int64  `protobuf:"varint,2,opt,name=start_to_fire_timeout_seconds,json=startToFireTimeoutSeconds,proto3" json:"start_to_fire_timeout_seconds,omitempty"`
}

func (m *StartTimerCommandAttributes) Reset()      { *m = StartTimerCommandAttributes{} }
func (*StartTimerCommandAttributes) ProtoMessage() {}
func (*StartTimerCommandAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac2e0d89a96b0e7, []int{2}
}
func (m *StartTimerCommandAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartTimerCommandAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartTimerCommandAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartTimerCommandAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartTimerCommandAttributes.Merge(m, src)
}
func (m *StartTimerCommandAttributes) XXX_Size() int {
	return m.Size()
}
func (m *StartTimerCommandAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_StartTimerCommandAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_StartTimerCommandAttributes proto.InternalMessageInfo

func (m *StartTimerCommandAttributes) GetTimerId() string {
	if m != nil {
		return m.TimerId
	}
	return ""
}

func (m *StartTimerCommandAttributes) GetStartToFireTimeoutSeconds() int64 {
	if m != nil {
		return m.StartToFireTimeoutSeconds
	}
	return 0
}

type CompleteWorkflowExecutionCommandAttributes struct {
	Result *v1.Payloads `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *CompleteWorkflowExecutionCommandAttributes) Reset() {
	*m = CompleteWorkflowExecutionCommandAttributes{}
}
func (*CompleteWorkflowExecutionCommandAttributes) ProtoMessage() {}
func (*CompleteWorkflowExecutionCommandAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac2e0d89a96b0e7, []int{3}
}
func (m *CompleteWorkflowExecutionCommandAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompleteWorkflowExecutionCommandAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompleteWorkflowExecutionCommandAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompleteWorkflowExecutionCommandAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompleteWorkflowExecutionCommandAttributes.Merge(m, src)
}
func (m *CompleteWorkflowExecutionCommandAttributes) XXX_Size() int {
	return m.Size()
}
func (m *CompleteWorkflowExecutionCommandAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_CompleteWorkflowExecutionCommandAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_CompleteWorkflowExecutionCommandAttributes proto.InternalMessageInfo

func (m *CompleteWorkflowExecutionCommandAttributes) GetResult() *v1.Payloads {
	if m != nil {
		return m.Result
	}
	return nil
}

type FailWorkflowExecutionCommandAttributes struct {
	Failure *v12.Failure `protobuf:"bytes,1,opt,name=failure,proto3" json:"failure,omitempty"`
}

func (m *FailWorkflowExecutionCommandAttributes) Reset() {
	*m = FailWorkflowExecutionCommandAttributes{}
}
func (*FailWorkflowExecutionCommandAttributes) ProtoMessage() {}
func (*FailWorkflowExecutionCommandAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac2e0d89a96b0e7, []int{4}
}
func (m *FailWorkflowExecutionCommandAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FailWorkflowExecutionCommandAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FailWorkflowExecutionCommandAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FailWorkflowExecutionCommandAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FailWorkflowExecutionCommandAttributes.Merge(m, src)
}
func (m *FailWorkflowExecutionCommandAttributes) XXX_Size() int {
	return m.Size()
}
func (m *FailWorkflowExecutionCommandAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_FailWorkflowExecutionCommandAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_FailWorkflowExecutionCommandAttributes proto.InternalMessageInfo

func (m *FailWorkflowExecutionCommandAttributes) GetFailure() *v12.Failure {
	if m != nil {
		return m.Failure
	}
	return nil
}

type CancelTimerCommandAttributes struct {
	TimerId string `protobuf:"bytes,1,opt,name=timer_id,json=timerId,proto3" json:"timer_id,omitempty"`
}

func (m *CancelTimerCommandAttributes) Reset()      { *m = CancelTimerCommandAttributes{} }
func (*CancelTimerCommandAttributes) ProtoMessage() {}
func (*CancelTimerCommandAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac2e0d89a96b0e7, []int{5}
}
func (m *CancelTimerCommandAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancelTimerCommandAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancelTimerCommandAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancelTimerCommandAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelTimerCommandAttributes.Merge(m, src)
}
func (m *CancelTimerCommandAttributes) XXX_Size() int {
	return m.Size()
}
func (m *CancelTimerCommandAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelTimerCommandAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_CancelTimerCommandAttributes proto.InternalMessageInfo

func (m *CancelTimerCommandAttributes) GetTimerId() string {
	if m != nil {
		return m.TimerId
	}
	return ""
}

type CancelWorkflowExecutionCommandAttributes struct {
	Details *v1.Payloads `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (m *CancelWorkflowExecutionCommandAttributes) Reset() {
	*m = CancelWorkflowExecutionCommandAttributes{}
}
func (*CancelWorkflowExecutionCommandAttributes) ProtoMessage() {}
func (*CancelWorkflowExecutionCommandAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac2e0d89a96b0e7, []int{6}
}
func (m *CancelWorkflowExecutionCommandAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancelWorkflowExecutionCommandAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancelWorkflowExecutionCommandAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancelWorkflowExecutionCommandAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelWorkflowExecutionCommandAttributes.Merge(m, src)
}
func (m *CancelWorkflowExecutionCommandAttributes) XXX_Size() int {
	return m.Size()
}
func (m *CancelWorkflowExecutionCommandAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelWorkflowExecutionCommandAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_CancelWorkflowExecutionCommandAttributes proto.InternalMessageInfo

func (m *CancelWorkflowExecutionCommandAttributes) GetDetails() *v1.Payloads {
	if m != nil {
		return m.Details
	}
	return nil
}

type RequestCancelExternalWorkflowExecutionCommandAttributes struct {
	Namespace         string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkflowId        string `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	RunId             string `protobuf:"bytes,3,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	Control           string `protobuf:"bytes,4,opt,name=control,proto3" json:"control,omitempty"`
	ChildWorkflowOnly bool   `protobuf:"varint,5,opt,name=child_workflow_only,json=childWorkflowOnly,proto3" json:"child_workflow_only,omitempty"`
}

func (m *RequestCancelExternalWorkflowExecutionCommandAttributes) Reset() {
	*m = RequestCancelExternalWorkflowExecutionCommandAttributes{}
}
func (*RequestCancelExternalWorkflowExecutionCommandAttributes) ProtoMessage() {}
func (*RequestCancelExternalWorkflowExecutionCommandAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac2e0d89a96b0e7, []int{7}
}
func (m *RequestCancelExternalWorkflowExecutionCommandAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestCancelExternalWorkflowExecutionCommandAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestCancelExternalWorkflowExecutionCommandAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestCancelExternalWorkflowExecutionCommandAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestCancelExternalWorkflowExecutionCommandAttributes.Merge(m, src)
}
func (m *RequestCancelExternalWorkflowExecutionCommandAttributes) XXX_Size() int {
	return m.Size()
}
func (m *RequestCancelExternalWorkflowExecutionCommandAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestCancelExternalWorkflowExecutionCommandAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_RequestCancelExternalWorkflowExecutionCommandAttributes proto.InternalMessageInfo

func (m *RequestCancelExternalWorkflowExecutionCommandAttributes) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *RequestCancelExternalWorkflowExecutionCommandAttributes) GetWorkflowId() string {
	if m != nil {
		return m.WorkflowId
	}
	return ""
}

func (m *RequestCancelExternalWorkflowExecutionCommandAttributes) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

func (m *RequestCancelExternalWorkflowExecutionCommandAttributes) GetControl() string {
	if m != nil {
		return m.Control
	}
	return ""
}

func (m *RequestCancelExternalWorkflowExecutionCommandAttributes) GetChildWorkflowOnly() bool {
	if m != nil {
		return m.ChildWorkflowOnly
	}
	return false
}

type SignalExternalWorkflowExecutionCommandAttributes struct {
	Namespace         string                `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Execution         *v1.WorkflowExecution `protobuf:"bytes,2,opt,name=execution,proto3" json:"execution,omitempty"`
	SignalName        string                `protobuf:"bytes,3,opt,name=signal_name,json=signalName,proto3" json:"signal_name,omitempty"`
	Input             *v1.Payloads          `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`
	Control           string                `protobuf:"bytes,5,opt,name=control,proto3" json:"control,omitempty"`
	ChildWorkflowOnly bool                  `protobuf:"varint,6,opt,name=child_workflow_only,json=childWorkflowOnly,proto3" json:"child_workflow_only,omitempty"`
}

func (m *SignalExternalWorkflowExecutionCommandAttributes) Reset() {
	*m = SignalExternalWorkflowExecutionCommandAttributes{}
}
func (*SignalExternalWorkflowExecutionCommandAttributes) ProtoMessage() {}
func (*SignalExternalWorkflowExecutionCommandAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac2e0d89a96b0e7, []int{8}
}
func (m *SignalExternalWorkflowExecutionCommandAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignalExternalWorkflowExecutionCommandAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignalExternalWorkflowExecutionCommandAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignalExternalWorkflowExecutionCommandAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignalExternalWorkflowExecutionCommandAttributes.Merge(m, src)
}
func (m *SignalExternalWorkflowExecutionCommandAttributes) XXX_Size() int {
	return m.Size()
}
func (m *SignalExternalWorkflowExecutionCommandAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_SignalExternalWorkflowExecutionCommandAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_SignalExternalWorkflowExecutionCommandAttributes proto.InternalMessageInfo

func (m *SignalExternalWorkflowExecutionCommandAttributes) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *SignalExternalWorkflowExecutionCommandAttributes) GetExecution() *v1.WorkflowExecution {
	if m != nil {
		return m.Execution
	}
	return nil
}

func (m *SignalExternalWorkflowExecutionCommandAttributes) GetSignalName() string {
	if m != nil {
		return m.SignalName
	}
	return ""
}

func (m *SignalExternalWorkflowExecutionCommandAttributes) GetInput() *v1.Payloads {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *SignalExternalWorkflowExecutionCommandAttributes) GetControl() string {
	if m != nil {
		return m.Control
	}
	return ""
}

func (m *SignalExternalWorkflowExecutionCommandAttributes) GetChildWorkflowOnly() bool {
	if m != nil {
		return m.ChildWorkflowOnly
	}
	return false
}

type UpsertWorkflowSearchAttributesCommandAttributes struct {
	SearchAttributes *v1.SearchAttributes `protobuf:"bytes,1,opt,name=search_attributes,json=searchAttributes,proto3" json:"search_attributes,omitempty"`
}

func (m *UpsertWorkflowSearchAttributesCommandAttributes) Reset() {
	*m = UpsertWorkflowSearchAttributesCommandAttributes{}
}
func (*UpsertWorkflowSearchAttributesCommandAttributes) ProtoMessage() {}
func (*UpsertWorkflowSearchAttributesCommandAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac2e0d89a96b0e7, []int{9}
}
func (m *UpsertWorkflowSearchAttributesCommandAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsertWorkflowSearchAttributesCommandAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsertWorkflowSearchAttributesCommandAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpsertWorkflowSearchAttributesCommandAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertWorkflowSearchAttributesCommandAttributes.Merge(m, src)
}
func (m *UpsertWorkflowSearchAttributesCommandAttributes) XXX_Size() int {
	return m.Size()
}
func (m *UpsertWorkflowSearchAttributesCommandAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertWorkflowSearchAttributesCommandAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertWorkflowSearchAttributesCommandAttributes proto.InternalMessageInfo

func (m *UpsertWorkflowSearchAttributesCommandAttributes) GetSearchAttributes() *v1.SearchAttributes {
	if m != nil {
		return m.SearchAttributes
	}
	return nil
}

type RecordMarkerCommandAttributes struct {
	MarkerName string                  `protobuf:"bytes,1,opt,name=marker_name,json=markerName,proto3" json:"marker_name,omitempty"`
	Details    map[string]*v1.Payloads `protobuf:"bytes,2,rep,name=details,proto3" json:"details,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Header     *v1.Header              `protobuf:"bytes,3,opt,name=header,proto3" json:"header,omitempty"`
	Failure    *v12.Failure            `protobuf:"bytes,4,opt,name=failure,proto3" json:"failure,omitempty"`
}

func (m *RecordMarkerCommandAttributes) Reset()      { *m = RecordMarkerCommandAttributes{} }
func (*RecordMarkerCommandAttributes) ProtoMessage() {}
func (*RecordMarkerCommandAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac2e0d89a96b0e7, []int{10}
}
func (m *RecordMarkerCommandAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordMarkerCommandAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordMarkerCommandAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordMarkerCommandAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordMarkerCommandAttributes.Merge(m, src)
}
func (m *RecordMarkerCommandAttributes) XXX_Size() int {
	return m.Size()
}
func (m *RecordMarkerCommandAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordMarkerCommandAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_RecordMarkerCommandAttributes proto.InternalMessageInfo

func (m *RecordMarkerCommandAttributes) GetMarkerName() string {
	if m != nil {
		return m.MarkerName
	}
	return ""
}

func (m *RecordMarkerCommandAttributes) GetDetails() map[string]*v1.Payloads {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *RecordMarkerCommandAttributes) GetHeader() *v1.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *RecordMarkerCommandAttributes) GetFailure() *v12.Failure {
	if m != nil {
		return m.Failure
	}
	return nil
}

type ContinueAsNewWorkflowExecutionCommandAttributes struct {
	WorkflowType *v1.WorkflowType `protobuf:"bytes,1,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	TaskQueue    *v11.TaskQueue   `protobuf:"bytes,2,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	Input        *v1.Payloads     `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
	// workflow_execution_timeout is omitted as it shouldn'be overridden from within a workflow.
	// Timeout of a single workflow run.
	WorkflowRunTimeoutSeconds int32 `protobuf:"varint,4,opt,name=workflow_run_timeout_seconds,json=workflowRunTimeoutSeconds,proto3" json:"workflow_run_timeout_seconds,omitempty"`
	// Timeout of a single workflow task.
	WorkflowTaskTimeoutSeconds    int32                      `protobuf:"varint,5,opt,name=workflow_task_timeout_seconds,json=workflowTaskTimeoutSeconds,proto3" json:"workflow_task_timeout_seconds,omitempty"`
	BackoffStartIntervalInSeconds int32                      `protobuf:"varint,6,opt,name=backoff_start_interval_in_seconds,json=backoffStartIntervalInSeconds,proto3" json:"backoff_start_interval_in_seconds,omitempty"`
	RetryPolicy                   *v1.RetryPolicy            `protobuf:"bytes,7,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
	Initiator                     v13.ContinueAsNewInitiator `protobuf:"varint,8,opt,name=initiator,proto3,enum=temporal.api.enums.v1.ContinueAsNewInitiator" json:"initiator,omitempty"`
	Failure                       *v12.Failure               `protobuf:"bytes,9,opt,name=failure,proto3" json:"failure,omitempty"`
	LastCompletionResult          *v1.Payloads               `protobuf:"bytes,10,opt,name=last_completion_result,json=lastCompletionResult,proto3" json:"last_completion_result,omitempty"`
	CronSchedule                  string                     `protobuf:"bytes,11,opt,name=cron_schedule,json=cronSchedule,proto3" json:"cron_schedule,omitempty"`
	Header                        *v1.Header                 `protobuf:"bytes,12,opt,name=header,proto3" json:"header,omitempty"`
	Memo                          *v1.Memo                   `protobuf:"bytes,13,opt,name=memo,proto3" json:"memo,omitempty"`
	SearchAttributes              *v1.SearchAttributes       `protobuf:"bytes,14,opt,name=search_attributes,json=searchAttributes,proto3" json:"search_attributes,omitempty"`
}

func (m *ContinueAsNewWorkflowExecutionCommandAttributes) Reset() {
	*m = ContinueAsNewWorkflowExecutionCommandAttributes{}
}
func (*ContinueAsNewWorkflowExecutionCommandAttributes) ProtoMessage() {}
func (*ContinueAsNewWorkflowExecutionCommandAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac2e0d89a96b0e7, []int{11}
}
func (m *ContinueAsNewWorkflowExecutionCommandAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContinueAsNewWorkflowExecutionCommandAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContinueAsNewWorkflowExecutionCommandAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContinueAsNewWorkflowExecutionCommandAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContinueAsNewWorkflowExecutionCommandAttributes.Merge(m, src)
}
func (m *ContinueAsNewWorkflowExecutionCommandAttributes) XXX_Size() int {
	return m.Size()
}
func (m *ContinueAsNewWorkflowExecutionCommandAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_ContinueAsNewWorkflowExecutionCommandAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_ContinueAsNewWorkflowExecutionCommandAttributes proto.InternalMessageInfo

func (m *ContinueAsNewWorkflowExecutionCommandAttributes) GetWorkflowType() *v1.WorkflowType {
	if m != nil {
		return m.WorkflowType
	}
	return nil
}

func (m *ContinueAsNewWorkflowExecutionCommandAttributes) GetTaskQueue() *v11.TaskQueue {
	if m != nil {
		return m.TaskQueue
	}
	return nil
}

func (m *ContinueAsNewWorkflowExecutionCommandAttributes) GetInput() *v1.Payloads {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *ContinueAsNewWorkflowExecutionCommandAttributes) GetWorkflowRunTimeoutSeconds() int32 {
	if m != nil {
		return m.WorkflowRunTimeoutSeconds
	}
	return 0
}

func (m *ContinueAsNewWorkflowExecutionCommandAttributes) GetWorkflowTaskTimeoutSeconds() int32 {
	if m != nil {
		return m.WorkflowTaskTimeoutSeconds
	}
	return 0
}

func (m *ContinueAsNewWorkflowExecutionCommandAttributes) GetBackoffStartIntervalInSeconds() int32 {
	if m != nil {
		return m.BackoffStartIntervalInSeconds
	}
	return 0
}

func (m *ContinueAsNewWorkflowExecutionCommandAttributes) GetRetryPolicy() *v1.RetryPolicy {
	if m != nil {
		return m.RetryPolicy
	}
	return nil
}

func (m *ContinueAsNewWorkflowExecutionCommandAttributes) GetInitiator() v13.ContinueAsNewInitiator {
	if m != nil {
		return m.Initiator
	}
	return v13.CONTINUE_AS_NEW_INITIATOR_UNSPECIFIED
}

func (m *ContinueAsNewWorkflowExecutionCommandAttributes) GetFailure() *v12.Failure {
	if m != nil {
		return m.Failure
	}
	return nil
}

func (m *ContinueAsNewWorkflowExecutionCommandAttributes) GetLastCompletionResult() *v1.Payloads {
	if m != nil {
		return m.LastCompletionResult
	}
	return nil
}

func (m *ContinueAsNewWorkflowExecutionCommandAttributes) GetCronSchedule() string {
	if m != nil {
		return m.CronSchedule
	}
	return ""
}

func (m *ContinueAsNewWorkflowExecutionCommandAttributes) GetHeader() *v1.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ContinueAsNewWorkflowExecutionCommandAttributes) GetMemo() *v1.Memo {
	if m != nil {
		return m.Memo
	}
	return nil
}

func (m *ContinueAsNewWorkflowExecutionCommandAttributes) GetSearchAttributes() *v1.SearchAttributes {
	if m != nil {
		return m.SearchAttributes
	}
	return nil
}

type StartChildWorkflowExecutionCommandAttributes struct {
	Namespace    string           `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkflowId   string           `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	WorkflowType *v1.WorkflowType `protobuf:"bytes,3,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	TaskQueue    *v11.TaskQueue   `protobuf:"bytes,4,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	Input        *v1.Payloads     `protobuf:"bytes,5,opt,name=input,proto3" json:"input,omitempty"`
	// Total workflow execution timeout including retries and continue as new.
	WorkflowExecutionTimeoutSeconds int32 `protobuf:"varint,6,opt,name=workflow_execution_timeout_seconds,json=workflowExecutionTimeoutSeconds,proto3" json:"workflow_execution_timeout_seconds,omitempty"`
	// Timeout of a single workflow run.
	WorkflowRunTimeoutSeconds int32 `protobuf:"varint,7,opt,name=workflow_run_timeout_seconds,json=workflowRunTimeoutSeconds,proto3" json:"workflow_run_timeout_seconds,omitempty"`
	// Timeout of a single workflow task.
	WorkflowTaskTimeoutSeconds int32 `protobuf:"varint,8,opt,name=workflow_task_timeout_seconds,json=workflowTaskTimeoutSeconds,proto3" json:"workflow_task_timeout_seconds,omitempty"`
	// Default: PARENT_CLOSE_POLICY_TERMINATE.
	ParentClosePolicy v13.ParentClosePolicy `protobuf:"varint,9,opt,name=parent_close_policy,json=parentClosePolicy,proto3,enum=temporal.api.enums.v1.ParentClosePolicy" json:"parent_close_policy,omitempty"`
	Control           string                `protobuf:"bytes,10,opt,name=control,proto3" json:"control,omitempty"`
	// Default: WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE.
	WorkflowIdReusePolicy v13.WorkflowIdReusePolicy `protobuf:"varint,11,opt,name=workflow_id_reuse_policy,json=workflowIdReusePolicy,proto3,enum=temporal.api.enums.v1.WorkflowIdReusePolicy" json:"workflow_id_reuse_policy,omitempty"`
	RetryPolicy           *v1.RetryPolicy           `protobuf:"bytes,12,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
	CronSchedule          string                    `protobuf:"bytes,13,opt,name=cron_schedule,json=cronSchedule,proto3" json:"cron_schedule,omitempty"`
	Header                *v1.Header                `protobuf:"bytes,14,opt,name=header,proto3" json:"header,omitempty"`
	Memo                  *v1.Memo                  `protobuf:"bytes,15,opt,name=memo,proto3" json:"memo,omitempty"`
	SearchAttributes      *v1.SearchAttributes      `protobuf:"bytes,16,opt,name=search_attributes,json=searchAttributes,proto3" json:"search_attributes,omitempty"`
}

func (m *StartChildWorkflowExecutionCommandAttributes) Reset() {
	*m = StartChildWorkflowExecutionCommandAttributes{}
}
func (*StartChildWorkflowExecutionCommandAttributes) ProtoMessage() {}
func (*StartChildWorkflowExecutionCommandAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac2e0d89a96b0e7, []int{12}
}
func (m *StartChildWorkflowExecutionCommandAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartChildWorkflowExecutionCommandAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartChildWorkflowExecutionCommandAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartChildWorkflowExecutionCommandAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartChildWorkflowExecutionCommandAttributes.Merge(m, src)
}
func (m *StartChildWorkflowExecutionCommandAttributes) XXX_Size() int {
	return m.Size()
}
func (m *StartChildWorkflowExecutionCommandAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_StartChildWorkflowExecutionCommandAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_StartChildWorkflowExecutionCommandAttributes proto.InternalMessageInfo

func (m *StartChildWorkflowExecutionCommandAttributes) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *StartChildWorkflowExecutionCommandAttributes) GetWorkflowId() string {
	if m != nil {
		return m.WorkflowId
	}
	return ""
}

func (m *StartChildWorkflowExecutionCommandAttributes) GetWorkflowType() *v1.WorkflowType {
	if m != nil {
		return m.WorkflowType
	}
	return nil
}

func (m *StartChildWorkflowExecutionCommandAttributes) GetTaskQueue() *v11.TaskQueue {
	if m != nil {
		return m.TaskQueue
	}
	return nil
}

func (m *StartChildWorkflowExecutionCommandAttributes) GetInput() *v1.Payloads {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *StartChildWorkflowExecutionCommandAttributes) GetWorkflowExecutionTimeoutSeconds() int32 {
	if m != nil {
		return m.WorkflowExecutionTimeoutSeconds
	}
	return 0
}

func (m *StartChildWorkflowExecutionCommandAttributes) GetWorkflowRunTimeoutSeconds() int32 {
	if m != nil {
		return m.WorkflowRunTimeoutSeconds
	}
	return 0
}

func (m *StartChildWorkflowExecutionCommandAttributes) GetWorkflowTaskTimeoutSeconds() int32 {
	if m != nil {
		return m.WorkflowTaskTimeoutSeconds
	}
	return 0
}

func (m *StartChildWorkflowExecutionCommandAttributes) GetParentClosePolicy() v13.ParentClosePolicy {
	if m != nil {
		return m.ParentClosePolicy
	}
	return v13.PARENT_CLOSE_POLICY_UNSPECIFIED
}

func (m *StartChildWorkflowExecutionCommandAttributes) GetControl() string {
	if m != nil {
		return m.Control
	}
	return ""
}

func (m *StartChildWorkflowExecutionCommandAttributes) GetWorkflowIdReusePolicy() v13.WorkflowIdReusePolicy {
	if m != nil {
		return m.WorkflowIdReusePolicy
	}
	return v13.WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED
}

func (m *StartChildWorkflowExecutionCommandAttributes) GetRetryPolicy() *v1.RetryPolicy {
	if m != nil {
		return m.RetryPolicy
	}
	return nil
}

func (m *StartChildWorkflowExecutionCommandAttributes) GetCronSchedule() string {
	if m != nil {
		return m.CronSchedule
	}
	return ""
}

func (m *StartChildWorkflowExecutionCommandAttributes) GetHeader() *v1.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *StartChildWorkflowExecutionCommandAttributes) GetMemo() *v1.Memo {
	if m != nil {
		return m.Memo
	}
	return nil
}

func (m *StartChildWorkflowExecutionCommandAttributes) GetSearchAttributes() *v1.SearchAttributes {
	if m != nil {
		return m.SearchAttributes
	}
	return nil
}

type Command struct {
	CommandType v13.CommandType `protobuf:"varint,1,opt,name=command_type,json=commandType,proto3,enum=temporal.api.enums.v1.CommandType" json:"command_type,omitempty"`
	// Types that are valid to be assigned to Attributes:
	//	*Command_ScheduleActivityTaskCommandAttributes
	//	*Command_StartTimerCommandAttributes
	//	*Command_CompleteWorkflowExecutionCommandAttributes
	//	*Command_FailWorkflowExecutionCommandAttributes
	//	*Command_RequestCancelActivityTaskCommandAttributes
	//	*Command_CancelTimerCommandAttributes
	//	*Command_CancelWorkflowExecutionCommandAttributes
	//	*Command_RequestCancelExternalWorkflowExecutionCommandAttributes
	//	*Command_RecordMarkerCommandAttributes
	//	*Command_ContinueAsNewWorkflowExecutionCommandAttributes
	//	*Command_StartChildWorkflowExecutionCommandAttributes
	//	*Command_SignalExternalWorkflowExecutionCommandAttributes
	//	*Command_UpsertWorkflowSearchAttributesCommandAttributes
	Attributes isCommand_Attributes `protobuf_oneof:"attributes"`
}

func (m *Command) Reset()      { *m = Command{} }
func (*Command) ProtoMessage() {}
func (*Command) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac2e0d89a96b0e7, []int{13}
}
func (m *Command) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Command) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Command.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Command) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Command.Merge(m, src)
}
func (m *Command) XXX_Size() int {
	return m.Size()
}
func (m *Command) XXX_DiscardUnknown() {
	xxx_messageInfo_Command.DiscardUnknown(m)
}

var xxx_messageInfo_Command proto.InternalMessageInfo

type isCommand_Attributes interface {
	isCommand_Attributes()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Command_ScheduleActivityTaskCommandAttributes struct {
	ScheduleActivityTaskCommandAttributes *ScheduleActivityTaskCommandAttributes `protobuf:"bytes,2,opt,name=schedule_activity_task_command_attributes,json=scheduleActivityTaskCommandAttributes,proto3,oneof" json:"schedule_activity_task_command_attributes,omitempty"`
}
type Command_StartTimerCommandAttributes struct {
	StartTimerCommandAttributes *StartTimerCommandAttributes `protobuf:"bytes,3,opt,name=start_timer_command_attributes,json=startTimerCommandAttributes,proto3,oneof" json:"start_timer_command_attributes,omitempty"`
}
type Command_CompleteWorkflowExecutionCommandAttributes struct {
	CompleteWorkflowExecutionCommandAttributes *CompleteWorkflowExecutionCommandAttributes `protobuf:"bytes,4,opt,name=complete_workflow_execution_command_attributes,json=completeWorkflowExecutionCommandAttributes,proto3,oneof" json:"complete_workflow_execution_command_attributes,omitempty"`
}
type Command_FailWorkflowExecutionCommandAttributes struct {
	FailWorkflowExecutionCommandAttributes *FailWorkflowExecutionCommandAttributes `protobuf:"bytes,5,opt,name=fail_workflow_execution_command_attributes,json=failWorkflowExecutionCommandAttributes,proto3,oneof" json:"fail_workflow_execution_command_attributes,omitempty"`
}
type Command_RequestCancelActivityTaskCommandAttributes struct {
	RequestCancelActivityTaskCommandAttributes *RequestCancelActivityTaskCommandAttributes `protobuf:"bytes,6,opt,name=request_cancel_activity_task_command_attributes,json=requestCancelActivityTaskCommandAttributes,proto3,oneof" json:"request_cancel_activity_task_command_attributes,omitempty"`
}
type Command_CancelTimerCommandAttributes struct {
	CancelTimerCommandAttributes *CancelTimerCommandAttributes `protobuf:"bytes,7,opt,name=cancel_timer_command_attributes,json=cancelTimerCommandAttributes,proto3,oneof" json:"cancel_timer_command_attributes,omitempty"`
}
type Command_CancelWorkflowExecutionCommandAttributes struct {
	CancelWorkflowExecutionCommandAttributes *CancelWorkflowExecutionCommandAttributes `protobuf:"bytes,8,opt,name=cancel_workflow_execution_command_attributes,json=cancelWorkflowExecutionCommandAttributes,proto3,oneof" json:"cancel_workflow_execution_command_attributes,omitempty"`
}
type Command_RequestCancelExternalWorkflowExecutionCommandAttributes struct {
	RequestCancelExternalWorkflowExecutionCommandAttributes *RequestCancelExternalWorkflowExecutionCommandAttributes `protobuf:"bytes,9,opt,name=request_cancel_external_workflow_execution_command_attributes,json=requestCancelExternalWorkflowExecutionCommandAttributes,proto3,oneof" json:"request_cancel_external_workflow_execution_command_attributes,omitempty"`
}
type Command_RecordMarkerCommandAttributes struct {
	RecordMarkerCommandAttributes *RecordMarkerCommandAttributes `protobuf:"bytes,10,opt,name=record_marker_command_attributes,json=recordMarkerCommandAttributes,proto3,oneof" json:"record_marker_command_attributes,omitempty"`
}
type Command_ContinueAsNewWorkflowExecutionCommandAttributes struct {
	ContinueAsNewWorkflowExecutionCommandAttributes *ContinueAsNewWorkflowExecutionCommandAttributes `protobuf:"bytes,11,opt,name=continue_as_new_workflow_execution_command_attributes,json=continueAsNewWorkflowExecutionCommandAttributes,proto3,oneof" json:"continue_as_new_workflow_execution_command_attributes,omitempty"`
}
type Command_StartChildWorkflowExecutionCommandAttributes struct {
	StartChildWorkflowExecutionCommandAttributes *StartChildWorkflowExecutionCommandAttributes `protobuf:"bytes,12,opt,name=start_child_workflow_execution_command_attributes,json=startChildWorkflowExecutionCommandAttributes,proto3,oneof" json:"start_child_workflow_execution_command_attributes,omitempty"`
}
type Command_SignalExternalWorkflowExecutionCommandAttributes struct {
	SignalExternalWorkflowExecutionCommandAttributes *SignalExternalWorkflowExecutionCommandAttributes `protobuf:"bytes,13,opt,name=signal_external_workflow_execution_command_attributes,json=signalExternalWorkflowExecutionCommandAttributes,proto3,oneof" json:"signal_external_workflow_execution_command_attributes,omitempty"`
}
type Command_UpsertWorkflowSearchAttributesCommandAttributes struct {
	UpsertWorkflowSearchAttributesCommandAttributes *UpsertWorkflowSearchAttributesCommandAttributes `protobuf:"bytes,14,opt,name=upsert_workflow_search_attributes_command_attributes,json=upsertWorkflowSearchAttributesCommandAttributes,proto3,oneof" json:"upsert_workflow_search_attributes_command_attributes,omitempty"`
}

func (*Command_ScheduleActivityTaskCommandAttributes) isCommand_Attributes()                   {}
func (*Command_StartTimerCommandAttributes) isCommand_Attributes()                             {}
func (*Command_CompleteWorkflowExecutionCommandAttributes) isCommand_Attributes()              {}
func (*Command_FailWorkflowExecutionCommandAttributes) isCommand_Attributes()                  {}
func (*Command_RequestCancelActivityTaskCommandAttributes) isCommand_Attributes()              {}
func (*Command_CancelTimerCommandAttributes) isCommand_Attributes()                            {}
func (*Command_CancelWorkflowExecutionCommandAttributes) isCommand_Attributes()                {}
func (*Command_RequestCancelExternalWorkflowExecutionCommandAttributes) isCommand_Attributes() {}
func (*Command_RecordMarkerCommandAttributes) isCommand_Attributes()                           {}
func (*Command_ContinueAsNewWorkflowExecutionCommandAttributes) isCommand_Attributes()         {}
func (*Command_StartChildWorkflowExecutionCommandAttributes) isCommand_Attributes()            {}
func (*Command_SignalExternalWorkflowExecutionCommandAttributes) isCommand_Attributes()        {}
func (*Command_UpsertWorkflowSearchAttributesCommandAttributes) isCommand_Attributes()         {}

func (m *Command) GetAttributes() isCommand_Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Command) GetCommandType() v13.CommandType {
	if m != nil {
		return m.CommandType
	}
	return v13.COMMAND_TYPE_UNSPECIFIED
}

func (m *Command) GetScheduleActivityTaskCommandAttributes() *ScheduleActivityTaskCommandAttributes {
	if x, ok := m.GetAttributes().(*Command_ScheduleActivityTaskCommandAttributes); ok {
		return x.ScheduleActivityTaskCommandAttributes
	}
	return nil
}

func (m *Command) GetStartTimerCommandAttributes() *StartTimerCommandAttributes {
	if x, ok := m.GetAttributes().(*Command_StartTimerCommandAttributes); ok {
		return x.StartTimerCommandAttributes
	}
	return nil
}

func (m *Command) GetCompleteWorkflowExecutionCommandAttributes() *CompleteWorkflowExecutionCommandAttributes {
	if x, ok := m.GetAttributes().(*Command_CompleteWorkflowExecutionCommandAttributes); ok {
		return x.CompleteWorkflowExecutionCommandAttributes
	}
	return nil
}

func (m *Command) GetFailWorkflowExecutionCommandAttributes() *FailWorkflowExecutionCommandAttributes {
	if x, ok := m.GetAttributes().(*Command_FailWorkflowExecutionCommandAttributes); ok {
		return x.FailWorkflowExecutionCommandAttributes
	}
	return nil
}

func (m *Command) GetRequestCancelActivityTaskCommandAttributes() *RequestCancelActivityTaskCommandAttributes {
	if x, ok := m.GetAttributes().(*Command_RequestCancelActivityTaskCommandAttributes); ok {
		return x.RequestCancelActivityTaskCommandAttributes
	}
	return nil
}

func (m *Command) GetCancelTimerCommandAttributes() *CancelTimerCommandAttributes {
	if x, ok := m.GetAttributes().(*Command_CancelTimerCommandAttributes); ok {
		return x.CancelTimerCommandAttributes
	}
	return nil
}

func (m *Command) GetCancelWorkflowExecutionCommandAttributes() *CancelWorkflowExecutionCommandAttributes {
	if x, ok := m.GetAttributes().(*Command_CancelWorkflowExecutionCommandAttributes); ok {
		return x.CancelWorkflowExecutionCommandAttributes
	}
	return nil
}

func (m *Command) GetRequestCancelExternalWorkflowExecutionCommandAttributes() *RequestCancelExternalWorkflowExecutionCommandAttributes {
	if x, ok := m.GetAttributes().(*Command_RequestCancelExternalWorkflowExecutionCommandAttributes); ok {
		return x.RequestCancelExternalWorkflowExecutionCommandAttributes
	}
	return nil
}

func (m *Command) GetRecordMarkerCommandAttributes() *RecordMarkerCommandAttributes {
	if x, ok := m.GetAttributes().(*Command_RecordMarkerCommandAttributes); ok {
		return x.RecordMarkerCommandAttributes
	}
	return nil
}

func (m *Command) GetContinueAsNewWorkflowExecutionCommandAttributes() *ContinueAsNewWorkflowExecutionCommandAttributes {
	if x, ok := m.GetAttributes().(*Command_ContinueAsNewWorkflowExecutionCommandAttributes); ok {
		return x.ContinueAsNewWorkflowExecutionCommandAttributes
	}
	return nil
}

func (m *Command) GetStartChildWorkflowExecutionCommandAttributes() *StartChildWorkflowExecutionCommandAttributes {
	if x, ok := m.GetAttributes().(*Command_StartChildWorkflowExecutionCommandAttributes); ok {
		return x.StartChildWorkflowExecutionCommandAttributes
	}
	return nil
}

func (m *Command) GetSignalExternalWorkflowExecutionCommandAttributes() *SignalExternalWorkflowExecutionCommandAttributes {
	if x, ok := m.GetAttributes().(*Command_SignalExternalWorkflowExecutionCommandAttributes); ok {
		return x.SignalExternalWorkflowExecutionCommandAttributes
	}
	return nil
}

func (m *Command) GetUpsertWorkflowSearchAttributesCommandAttributes() *UpsertWorkflowSearchAttributesCommandAttributes {
	if x, ok := m.GetAttributes().(*Command_UpsertWorkflowSearchAttributesCommandAttributes); ok {
		return x.UpsertWorkflowSearchAttributesCommandAttributes
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Command) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Command_ScheduleActivityTaskCommandAttributes)(nil),
		(*Command_StartTimerCommandAttributes)(nil),
		(*Command_CompleteWorkflowExecutionCommandAttributes)(nil),
		(*Command_FailWorkflowExecutionCommandAttributes)(nil),
		(*Command_RequestCancelActivityTaskCommandAttributes)(nil),
		(*Command_CancelTimerCommandAttributes)(nil),
		(*Command_CancelWorkflowExecutionCommandAttributes)(nil),
		(*Command_RequestCancelExternalWorkflowExecutionCommandAttributes)(nil),
		(*Command_RecordMarkerCommandAttributes)(nil),
		(*Command_ContinueAsNewWorkflowExecutionCommandAttributes)(nil),
		(*Command_StartChildWorkflowExecutionCommandAttributes)(nil),
		(*Command_SignalExternalWorkflowExecutionCommandAttributes)(nil),
		(*Command_UpsertWorkflowSearchAttributesCommandAttributes)(nil),
	}
}

func init() {
	proto.RegisterType((*ScheduleActivityTaskCommandAttributes)(nil), "temporal.api.command.v1.ScheduleActivityTaskCommandAttributes")
	proto.RegisterType((*RequestCancelActivityTaskCommandAttributes)(nil), "temporal.api.command.v1.RequestCancelActivityTaskCommandAttributes")
	proto.RegisterType((*StartTimerCommandAttributes)(nil), "temporal.api.command.v1.StartTimerCommandAttributes")
	proto.RegisterType((*CompleteWorkflowExecutionCommandAttributes)(nil), "temporal.api.command.v1.CompleteWorkflowExecutionCommandAttributes")
	proto.RegisterType((*FailWorkflowExecutionCommandAttributes)(nil), "temporal.api.command.v1.FailWorkflowExecutionCommandAttributes")
	proto.RegisterType((*CancelTimerCommandAttributes)(nil), "temporal.api.command.v1.CancelTimerCommandAttributes")
	proto.RegisterType((*CancelWorkflowExecutionCommandAttributes)(nil), "temporal.api.command.v1.CancelWorkflowExecutionCommandAttributes")
	proto.RegisterType((*RequestCancelExternalWorkflowExecutionCommandAttributes)(nil), "temporal.api.command.v1.RequestCancelExternalWorkflowExecutionCommandAttributes")
	proto.RegisterType((*SignalExternalWorkflowExecutionCommandAttributes)(nil), "temporal.api.command.v1.SignalExternalWorkflowExecutionCommandAttributes")
	proto.RegisterType((*UpsertWorkflowSearchAttributesCommandAttributes)(nil), "temporal.api.command.v1.UpsertWorkflowSearchAttributesCommandAttributes")
	proto.RegisterType((*RecordMarkerCommandAttributes)(nil), "temporal.api.command.v1.RecordMarkerCommandAttributes")
	proto.RegisterMapType((map[string]*v1.Payloads)(nil), "temporal.api.command.v1.RecordMarkerCommandAttributes.DetailsEntry")
	proto.RegisterType((*ContinueAsNewWorkflowExecutionCommandAttributes)(nil), "temporal.api.command.v1.ContinueAsNewWorkflowExecutionCommandAttributes")
	proto.RegisterType((*StartChildWorkflowExecutionCommandAttributes)(nil), "temporal.api.command.v1.StartChildWorkflowExecutionCommandAttributes")
	proto.RegisterType((*Command)(nil), "temporal.api.command.v1.Command")
}

func init() {
	proto.RegisterFile("temporal/api/command/v1/message.proto", fileDescriptor_8ac2e0d89a96b0e7)
}

var fileDescriptor_8ac2e0d89a96b0e7 = []byte{
	// 1792 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x59, 0xcd, 0x73, 0x23, 0x47,
	0x15, 0x9f, 0xf1, 0x97, 0xac, 0x27, 0xd9, 0xec, 0x4e, 0x08, 0xd1, 0x3a, 0xb6, 0x6c, 0x94, 0x6c,
	0x50, 0xb6, 0x8c, 0xb4, 0xbb, 0x64, 0x37, 0x61, 0x29, 0x08, 0x5e, 0xe1, 0x45, 0xaa, 0xd4, 0x06,
	0xd3, 0xde, 0x10, 0x2a, 0x05, 0x35, 0xd5, 0x3b, 0xd3, 0x5a, 0x4f, 0x79, 0x34, 0xad, 0xf4, 0xf4,
	0xd8, 0x11, 0x54, 0x51, 0x70, 0x82, 0x1b, 0x9c, 0xa9, 0xe2, 0xc4, 0x05, 0x38, 0x71, 0x85, 0xca,
	0x89, 0x13, 0xc7, 0x2d, 0x0e, 0x54, 0x28, 0x2e, 0xac, 0xf7, 0xc2, 0x31, 0xfc, 0x07, 0xd4, 0x74,
	0xf7, 0x8c, 0xa4, 0x19, 0x8d, 0x3c, 0x63, 0x27, 0x37, 0x4d, 0xcf, 0xfb, 0x9e, 0xf7, 0x7e, 0xfd,
	0xde, 0x13, 0x5c, 0xe7, 0x64, 0x30, 0xa4, 0x0c, 0xbb, 0x6d, 0x3c, 0x74, 0xda, 0x16, 0x1d, 0x0c,
	0xb0, 0x67, 0xb7, 0x4f, 0x6e, 0xb5, 0x07, 0xc4, 0xf7, 0xf1, 0x13, 0xd2, 0x1a, 0x32, 0xca, 0xa9,
	0xf1, 0x52, 0x44, 0xd6, 0xc2, 0x43, 0xa7, 0xa5, 0xc8, 0x5a, 0x27, 0xb7, 0x36, 0x5e, 0x9d, 0xe2,
	0x27, 0x5e, 0x30, 0xf0, 0x43, 0xee, 0x53, 0xca, 0x8e, 0xfb, 0x2e, 0x3d, 0x95, 0xec, 0x1b, 0xcd,
	0xd9, 0x54, 0x4a, 0x8e, 0xc9, 0x47, 0x43, 0xa5, 0x28, 0x21, 0x2f, 0x24, 0xa0, 0x5e, 0xca, 0x9c,
	0x8d, 0x69, 0xab, 0xfb, 0xd8, 0x71, 0x03, 0x46, 0xd2, 0x64, 0x5f, 0x99, 0x22, 0xe3, 0xd8, 0x3f,
	0xfe, 0x30, 0x20, 0x41, 0x9a, 0xb0, 0xf1, 0xb7, 0x65, 0xb8, 0x7e, 0x68, 0x1d, 0x11, 0x3b, 0x70,
	0xc9, 0x9e, 0xc5, 0x9d, 0x13, 0x87, 0x8f, 0x1e, 0x61, 0xff, 0xb8, 0x23, 0x0d, 0xdc, 0xe3, 0x9c,
	0x39, 0x8f, 0x03, 0x4e, 0x7c, 0x63, 0x1b, 0x2a, 0x58, 0x11, 0x98, 0x8e, 0x5d, 0xd3, 0x77, 0xf4,
	0x66, 0x19, 0x41, 0x74, 0xd4, 0xb3, 0x8d, 0x1e, 0xac, 0xc5, 0x04, 0xa1, 0x5f, 0xb5, 0x85, 0x1d,
	0xbd, 0x59, 0xb9, 0xfd, 0x6a, 0x2b, 0x15, 0x41, 0xea, 0xb5, 0x4e, 0x6e, 0xb5, 0x62, 0x75, 0xa3,
	0x21, 0x41, 0x55, 0x3c, 0xf1, 0x64, 0x6c, 0x42, 0xd9, 0xc3, 0x03, 0xe2, 0x0f, 0xb1, 0x45, 0x6a,
	0x8b, 0x42, 0xd3, 0xf8, 0xc0, 0xe8, 0x00, 0x84, 0x1e, 0x99, 0xc2, 0xa5, 0xda, 0xd2, 0x2c, 0x2d,
	0xb1, 0xc7, 0xa1, 0xa2, 0xd0, 0x9f, 0xef, 0x87, 0x0f, 0xa8, 0xcc, 0xa3, 0x9f, 0xc6, 0x5d, 0x58,
	0x39, 0x22, 0xd8, 0x26, 0xac, 0xb6, 0x2c, 0x04, 0xd4, 0xb3, 0xcc, 0xec, 0x0a, 0x2a, 0xa4, 0xa8,
	0x8d, 0xbb, 0xb0, 0xec, 0x78, 0xc3, 0x80, 0xd7, 0x56, 0x04, 0xdb, 0x4e, 0x16, 0xdb, 0x01, 0x1e,
	0xb9, 0x14, 0xdb, 0x3e, 0x92, 0xe4, 0x46, 0x17, 0xbe, 0xec, 0xab, 0x38, 0x9b, 0x9c, 0x9a, 0x96,
	0x4b, 0x7d, 0x62, 0x72, 0x67, 0x40, 0x68, 0xc0, 0x4d, 0x9f, 0x58, 0xd4, 0xb3, 0xfd, 0x5a, 0x69,
	0x47, 0x6f, 0x2e, 0xa3, 0xad, 0x88, 0xf0, 0x11, 0xed, 0x84, 0x64, 0x8f, 0x24, 0xd5, 0xa1, 0x24,
	0x4a, 0x4a, 0xf2, 0x39, 0x66, 0x3c, 0x25, 0x69, 0x35, 0x29, 0xe9, 0x30, 0x24, 0x4b, 0x48, 0xba,
	0x0f, 0x75, 0xc5, 0x9d, 0x65, 0x50, 0x59, 0x88, 0xd9, 0x10, 0x54, 0xb3, 0xad, 0xb9, 0x07, 0xd7,
	0x8e, 0x08, 0x66, 0xfc, 0x31, 0xc1, 0x69, 0x2b, 0x40, 0xb0, 0xbf, 0x14, 0x13, 0x24, 0x78, 0x1f,
	0x40, 0x95, 0x11, 0xce, 0x46, 0xe6, 0x90, 0xba, 0x8e, 0x35, 0xaa, 0x55, 0x44, 0x48, 0x5f, 0xc9,
	0x0a, 0x29, 0x0a, 0x69, 0x0f, 0x04, 0x29, 0xaa, 0xb0, 0xf1, 0x43, 0xe3, 0x03, 0xb8, 0x81, 0xc8,
	0x87, 0x01, 0xf1, 0x79, 0x07, 0x7b, 0x16, 0x71, 0xe7, 0x27, 0xf2, 0x2e, 0x18, 0x51, 0x58, 0x6c,
	0x93, 0x9c, 0x10, 0x8f, 0x47, 0xf9, 0xbc, 0x88, 0xae, 0xc4, 0x6f, 0xf6, 0xc3, 0x17, 0x3d, 0xbb,
	0xf1, 0x13, 0x78, 0x39, 0x0e, 0x1d, 0x4b, 0x0b, 0xbb, 0x06, 0xab, 0xa1, 0xd3, 0x6c, 0x5c, 0x12,
	0x25, 0xf1, 0xdc, 0xb3, 0x8d, 0x6f, 0xc3, 0x56, 0x1c, 0xdd, 0xbe, 0xc3, 0xd2, 0xc1, 0x5d, 0x10,
	0x2a, 0xaf, 0xa9, 0xe0, 0x3e, 0x70, 0x58, 0x22, 0xb6, 0x8d, 0x3e, 0xdc, 0xe8, 0xd0, 0xc1, 0xd0,
	0x25, 0x9c, 0xbc, 0xaf, 0x60, 0x65, 0xff, 0x23, 0x62, 0x05, 0xdc, 0xa1, 0x5e, 0xda, 0x94, 0xb7,
	0x60, 0x85, 0x11, 0x3f, 0x70, 0xb9, 0x30, 0x24, 0x4f, 0x6a, 0x2a, 0xfa, 0x86, 0x0d, 0xaf, 0x3d,
	0xc0, 0x8e, 0x9b, 0x43, 0xc7, 0x3d, 0x28, 0x29, 0xcc, 0x99, 0xad, 0x44, 0xbd, 0x0c, 0xb5, 0x3c,
	0x90, 0x3f, 0x51, 0xc4, 0xd0, 0xf8, 0x3a, 0x6c, 0xca, 0xcf, 0x53, 0x38, 0x94, 0x8d, 0x3e, 0x34,
	0x25, 0x6b, 0x3e, 0x13, 0x6d, 0xc2, 0xb1, 0xe3, 0xfa, 0xb9, 0xe3, 0x10, 0x31, 0x34, 0xfe, 0xa5,
	0xc3, 0x9b, 0x53, 0x99, 0xb4, 0xff, 0x11, 0x27, 0xcc, 0xc3, 0x79, 0xf4, 0x4e, 0x61, 0x96, 0x9e,
	0xc4, 0xac, 0x6d, 0xa8, 0x44, 0x37, 0x43, 0xe8, 0xdf, 0x82, 0x44, 0xcf, 0xe8, 0xa8, 0x67, 0x1b,
	0x2f, 0xc2, 0x0a, 0x0b, 0xbc, 0xf0, 0x9d, 0xc4, 0xbb, 0x65, 0x16, 0x78, 0x3d, 0xdb, 0xa8, 0x41,
	0xc9, 0xa2, 0x1e, 0x67, 0xd4, 0x15, 0x40, 0x57, 0x46, 0xd1, 0xa3, 0xd1, 0x82, 0x17, 0xac, 0x23,
	0xc7, 0xb5, 0xcd, 0x58, 0x2e, 0xf5, 0xdc, 0x91, 0x40, 0xb3, 0x55, 0x74, 0x55, 0xbc, 0x8a, 0xac,
	0xfe, 0x9e, 0xe7, 0x8e, 0x1a, 0x1f, 0x2f, 0xc0, 0xcd, 0x43, 0xe7, 0x89, 0x87, 0x3f, 0x3b, 0xa7,
	0xbe, 0x0b, 0x65, 0x12, 0xf1, 0x2a, 0xb4, 0x7f, 0x3d, 0x2b, 0xd8, 0x29, 0x65, 0x68, 0xcc, 0x1b,
	0x46, 0xc7, 0x17, 0xa6, 0x99, 0xa1, 0x70, 0x15, 0x01, 0x90, 0x47, 0xef, 0xe2, 0x01, 0x19, 0xa3,
	0xee, 0x52, 0x31, 0xd4, 0x9d, 0x08, 0xdf, 0x72, 0xae, 0xf0, 0xad, 0x64, 0x85, 0xef, 0x57, 0x3a,
	0xb4, 0xdf, 0x1b, 0xfa, 0x84, 0xf1, 0xe8, 0xf8, 0x90, 0x60, 0x66, 0x1d, 0x8d, 0x83, 0x95, 0x8e,
	0xde, 0x7b, 0x70, 0xd5, 0x17, 0x44, 0x26, 0x8e, 0x0f, 0x55, 0x52, 0x36, 0xb3, 0x3c, 0x48, 0x4a,
	0x45, 0x57, 0xfc, 0xc4, 0x49, 0xe3, 0x7f, 0x0b, 0xb0, 0x85, 0x88, 0x45, 0x99, 0xfd, 0x10, 0xb3,
	0xe3, 0x59, 0xa5, 0xb4, 0x0d, 0x95, 0x81, 0x78, 0x25, 0xe3, 0xa9, 0xee, 0x6a, 0x79, 0x24, 0xe2,
	0xf9, 0xe3, 0x71, 0x91, 0x2c, 0xec, 0x2c, 0x36, 0x2b, 0xb7, 0x3b, 0xad, 0x8c, 0x3e, 0xa7, 0x35,
	0x57, 0x53, 0xeb, 0x3b, 0x52, 0xca, 0xbe, 0xc7, 0xd9, 0x28, 0xae, 0xa3, 0x89, 0xcb, 0x75, 0xb1,
	0xd0, 0xe5, 0x3a, 0x01, 0x2f, 0x4b, 0x05, 0xe1, 0x65, 0xe3, 0x47, 0x50, 0x9d, 0x34, 0xc6, 0xb8,
	0x02, 0x8b, 0xc7, 0x64, 0xa4, 0x7c, 0x0f, 0x7f, 0x86, 0x49, 0x74, 0x82, 0xdd, 0x20, 0x6a, 0x4c,
	0x72, 0x24, 0x91, 0x20, 0xbf, 0xb7, 0xf0, 0x96, 0xde, 0xf8, 0x67, 0x09, 0xda, 0x1d, 0xea, 0x71,
	0xc7, 0x0b, 0xc8, 0x9e, 0xff, 0x2e, 0x39, 0xcd, 0x51, 0x3c, 0x3d, 0x58, 0x8b, 0x93, 0x4b, 0x34,
	0x44, 0xfa, 0xfc, 0x86, 0x28, 0x12, 0x29, 0x1b, 0xa2, 0xd3, 0x89, 0xa7, 0x44, 0xcb, 0xb3, 0x70,
	0xd1, 0x96, 0x47, 0x15, 0xd1, 0x62, 0xb1, 0x22, 0x7a, 0x1b, 0x36, 0x63, 0x3f, 0x42, 0x8c, 0x4a,
	0xde, 0x63, 0x4b, 0xe2, 0x96, 0xbf, 0x16, 0xd1, 0xa0, 0xc0, 0x4b, 0xdc, 0xf3, 0x7b, 0xb0, 0x35,
	0x0e, 0x44, 0xe8, 0x46, 0x52, 0xc2, 0xb2, 0x6c, 0x33, 0x62, 0x97, 0xb1, 0x7f, 0x9c, 0x6e, 0x7a,
	0x1e, 0x63, 0xeb, 0x98, 0xf6, 0xfb, 0xaa, 0xe1, 0x71, 0x3c, 0x4e, 0xd8, 0x09, 0x76, 0x4d, 0xc7,
	0x8b, 0xc5, 0xac, 0xc8, 0xa6, 0x47, 0x11, 0x8a, 0x6b, 0xbb, 0xa7, 0xc8, 0x7a, 0x5e, 0x56, 0xd3,
	0x51, 0xba, 0x58, 0xd3, 0x61, 0xbc, 0x03, 0x65, 0xc7, 0x73, 0xb8, 0x83, 0x39, 0x65, 0xa2, 0xdd,
	0x5a, 0xbf, 0xfd, 0xd5, 0x69, 0x21, 0xa2, 0xdb, 0x0f, 0x65, 0x4c, 0x25, 0x4e, 0x2f, 0x62, 0x42,
	0x63, 0xfe, 0xc9, 0xc4, 0x2f, 0x17, 0x4c, 0x7c, 0xe3, 0x07, 0xf0, 0x25, 0x17, 0xfb, 0xdc, 0xb4,
	0x64, 0xab, 0xe0, 0x50, 0xcf, 0x54, 0x7d, 0x00, 0xe4, 0xfc, 0xce, 0x5f, 0x0c, 0xf9, 0x3b, 0x31,
	0x3b, 0x12, 0xdc, 0xc6, 0x2b, 0xb0, 0x66, 0x31, 0xea, 0x99, 0x51, 0x4b, 0x24, 0xda, 0xb3, 0x32,
	0xaa, 0x86, 0x87, 0xd1, 0xc8, 0x30, 0x51, 0xe9, 0xd5, 0x42, 0x95, 0x7e, 0x13, 0x96, 0x06, 0x64,
	0x40, 0x6b, 0x6b, 0x82, 0x6b, 0x33, 0x8b, 0xeb, 0x21, 0x19, 0x50, 0x24, 0x28, 0x67, 0x83, 0xe9,
	0xfa, 0xa5, 0xc1, 0xf4, 0xd7, 0xab, 0xb0, 0x2b, 0x32, 0xa5, 0x33, 0x09, 0xf9, 0x9f, 0xdf, 0x3d,
	0x9f, 0x02, 0x85, 0xc5, 0xcf, 0x08, 0x14, 0x96, 0x2e, 0x09, 0x0a, 0xcb, 0xc5, 0x40, 0xe1, 0x1d,
	0x68, 0xc4, 0x7e, 0xc4, 0x17, 0x79, 0xaa, 0xb0, 0x65, 0x45, 0x6e, 0x9f, 0x26, 0xc3, 0x9a, 0xa8,
	0xee, 0xf3, 0x10, 0xa6, 0x74, 0x69, 0x84, 0x59, 0x3d, 0x17, 0x61, 0x7e, 0x08, 0x2f, 0x0c, 0x31,
	0x0b, 0xa7, 0x01, 0x39, 0x0a, 0x29, 0x78, 0x28, 0x8b, 0xca, 0x6e, 0x66, 0x54, 0xf6, 0x81, 0xe0,
	0x10, 0x73, 0x91, 0xc2, 0x88, 0xab, 0xc3, 0xe4, 0xd1, 0x64, 0x13, 0x02, 0xd3, 0x4d, 0x08, 0x81,
	0xda, 0x44, 0xb6, 0x98, 0x8c, 0x04, 0x63, 0xc5, 0x15, 0xa1, 0x78, 0x37, 0x43, 0xf1, 0xfb, 0x71,
	0x46, 0xa1, 0x90, 0x49, 0x29, 0x7f, 0xf1, 0x74, 0xd6, 0x71, 0x0a, 0xf2, 0xaa, 0x17, 0x84, 0xbc,
	0x14, 0x22, 0xac, 0xcd, 0x45, 0x84, 0xf5, 0x0b, 0x21, 0xc2, 0x17, 0x2e, 0x87, 0x08, 0x57, 0x2e,
	0x8d, 0x08, 0xff, 0xbe, 0x0a, 0x25, 0x55, 0xf6, 0xc6, 0x3e, 0x54, 0x27, 0x57, 0x35, 0xa2, 0xde,
	0xd7, 0x6f, 0x37, 0x32, 0x71, 0x5e, 0x90, 0x8a, 0x52, 0xad, 0x58, 0xe3, 0x07, 0xe3, 0xb7, 0x3a,
	0xbc, 0x1e, 0xcf, 0xec, 0xe3, 0x25, 0x49, 0x98, 0xa8, 0x91, 0xf8, 0x09, 0x17, 0xe4, 0xf5, 0xfe,
	0xad, 0xcc, 0x8e, 0x2c, 0xd7, 0xbe, 0xa6, 0xab, 0xa1, 0xeb, 0x7e, 0xae, 0xc5, 0xce, 0x4f, 0xe3,
	0x2d, 0x80, 0x98, 0xbe, 0x66, 0x18, 0x24, 0x21, 0xea, 0x8d, 0x6c, 0x83, 0xb2, 0x07, 0xe4, 0xae,
	0x86, 0x5e, 0xf6, 0xe7, 0xcc, 0xcf, 0x7f, 0xd4, 0xa1, 0xa5, 0x2e, 0x2e, 0x62, 0xce, 0x00, 0x94,
	0x19, 0xd6, 0x48, 0xa0, 0xcb, 0x6e, 0x58, 0xf3, 0x8f, 0xcc, 0x5d, 0x0d, 0xdd, 0xb0, 0xf2, 0x0f,
	0xd8, 0xbf, 0xd3, 0xe1, 0x46, 0x78, 0xe9, 0xe6, 0xb4, 0x53, 0x02, 0xea, 0xdb, 0x99, 0x76, 0xe6,
	0x1b, 0xb9, 0xbb, 0x1a, 0x7a, 0xad, 0x9f, 0x6f, 0x38, 0xff, 0x93, 0x0e, 0x6d, 0x26, 0xa7, 0x57,
	0xd3, 0x12, 0xe3, 0xeb, 0xf9, 0xb9, 0xb6, 0x72, 0x4e, 0x30, 0xf3, 0xef, 0x55, 0xc2, 0x60, 0xb2,
	0xfc, 0x5b, 0x98, 0x9f, 0xc1, 0xb6, 0xb2, 0x31, 0x33, 0xed, 0x64, 0x67, 0x76, 0x27, 0xfb, 0x43,
	0xcf, 0xd9, 0x26, 0x74, 0x35, 0xb4, 0x69, 0xcd, 0xdb, 0x36, 0xfc, 0x5e, 0x87, 0x5d, 0x65, 0x40,
	0xbe, 0xcf, 0xb9, 0x2a, 0xac, 0xd9, 0x3b, 0xc7, 0x9a, 0x5c, 0x1f, 0xb4, 0x69, 0xe5, 0x5d, 0x66,
	0xfc, 0x43, 0x87, 0x6f, 0x26, 0x3e, 0x29, 0x51, 0xd3, 0x7b, 0x4e, 0xb3, 0x65, 0x3b, 0x79, 0x90,
	0xef, 0x03, 0xe7, 0xdf, 0x0c, 0x74, 0x35, 0xf4, 0x26, 0xbb, 0xe0, 0xa6, 0xe4, 0x17, 0x3a, 0xec,
	0x30, 0x31, 0x55, 0x9a, 0x6a, 0x4a, 0x9d, 0x61, 0xb7, 0xec, 0x5d, 0xef, 0x5e, 0x6c, 0x2c, 0xed,
	0x6a, 0x68, 0x8b, 0xcd, 0x9d, 0x90, 0xff, 0xaa, 0xc3, 0x1d, 0x4b, 0xb5, 0xe5, 0x26, 0xf6, 0x4d,
	0x8f, 0x9c, 0xe6, 0x0c, 0xa8, 0x5c, 0x52, 0x76, 0xe7, 0xc0, 0x4f, 0xa1, 0x29, 0xb1, 0xab, 0xa1,
	0xb6, 0x55, 0x70, 0xb0, 0xfc, 0xb3, 0x0e, 0xb7, 0x24, 0x64, 0x27, 0x56, 0x18, 0x73, 0x0d, 0x97,
	0xb7, 0xfe, 0xfe, 0x7c, 0x14, 0xcf, 0xd9, 0x05, 0x77, 0x35, 0xb4, 0xeb, 0x17, 0xe9, 0x9a, 0x3f,
	0xd6, 0xe1, 0x8e, 0x5a, 0xf1, 0x14, 0x4c, 0x60, 0x39, 0x21, 0xf4, 0xb2, 0xcd, 0x2e, 0xb8, 0xd3,
	0xea, 0x6a, 0xe8, 0xa6, 0x5f, 0x74, 0x0f, 0xf6, 0x17, 0x1d, 0xde, 0x08, 0xc4, 0xf6, 0x67, 0x6c,
	0x75, 0xaa, 0xf7, 0x98, 0x65, 0xfd, 0xfa, 0x39, 0xd9, 0x52, 0x70, 0xa5, 0x14, 0x66, 0x4b, 0x50,
	0x8c, 0xe5, 0x7e, 0x15, 0x60, 0x6c, 0xd0, 0xfd, 0x5f, 0xea, 0x4f, 0x9f, 0xd5, 0xb5, 0x4f, 0x9e,
	0xd5, 0xb5, 0x4f, 0x9f, 0xd5, 0xf5, 0x9f, 0x9f, 0xd5, 0xf5, 0x3f, 0x9c, 0xd5, 0xf5, 0xbf, 0x9f,
	0xd5, 0xf5, 0xa7, 0x67, 0x75, 0xfd, 0x3f, 0x67, 0x75, 0xfd, 0xbf, 0x67, 0x75, 0xed, 0xd3, 0xb3,
	0xba, 0xfe, 0x9b, 0xe7, 0x75, 0xed, 0xe9, 0xf3, 0xba, 0xf6, 0xc9, 0xf3, 0xba, 0x06, 0x1b, 0x0e,
	0xcd, 0xf2, 0xe1, 0x7e, 0xf5, 0xa1, 0xfc, 0x4b, 0xe9, 0x80, 0x51, 0x4e, 0x0f, 0xf4, 0x0f, 0xae,
	0x3f, 0x99, 0xa0, 0x75, 0x68, 0xe2, 0xff, 0xb5, 0x6f, 0xa8, 0x9f, 0x8f, 0x57, 0xc4, 0x3f, 0x50,
	0x5f, 0xfb, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x78, 0x47, 0x14, 0xc2, 0x89, 0x1b, 0x00, 0x00,
}

func (this *ScheduleActivityTaskCommandAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ScheduleActivityTaskCommandAttributes)
	if !ok {
		that2, ok := that.(ScheduleActivityTaskCommandAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ActivityId != that1.ActivityId {
		return false
	}
	if !this.ActivityType.Equal(that1.ActivityType) {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if !this.TaskQueue.Equal(that1.TaskQueue) {
		return false
	}
	if !this.Header.Equal(that1.Header) {
		return false
	}
	if !this.Input.Equal(that1.Input) {
		return false
	}
	if this.ScheduleToCloseTimeoutSeconds != that1.ScheduleToCloseTimeoutSeconds {
		return false
	}
	if this.ScheduleToStartTimeoutSeconds != that1.ScheduleToStartTimeoutSeconds {
		return false
	}
	if this.StartToCloseTimeoutSeconds != that1.StartToCloseTimeoutSeconds {
		return false
	}
	if this.HeartbeatTimeoutSeconds != that1.HeartbeatTimeoutSeconds {
		return false
	}
	if !this.RetryPolicy.Equal(that1.RetryPolicy) {
		return false
	}
	return true
}
func (this *RequestCancelActivityTaskCommandAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestCancelActivityTaskCommandAttributes)
	if !ok {
		that2, ok := that.(RequestCancelActivityTaskCommandAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ScheduledEventId != that1.ScheduledEventId {
		return false
	}
	return true
}
func (this *StartTimerCommandAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StartTimerCommandAttributes)
	if !ok {
		that2, ok := that.(StartTimerCommandAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TimerId != that1.TimerId {
		return false
	}
	if this.StartToFireTimeoutSeconds != that1.StartToFireTimeoutSeconds {
		return false
	}
	return true
}
func (this *CompleteWorkflowExecutionCommandAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CompleteWorkflowExecutionCommandAttributes)
	if !ok {
		that2, ok := that.(CompleteWorkflowExecutionCommandAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Result.Equal(that1.Result) {
		return false
	}
	return true
}
func (this *FailWorkflowExecutionCommandAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FailWorkflowExecutionCommandAttributes)
	if !ok {
		that2, ok := that.(FailWorkflowExecutionCommandAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Failure.Equal(that1.Failure) {
		return false
	}
	return true
}
func (this *CancelTimerCommandAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CancelTimerCommandAttributes)
	if !ok {
		that2, ok := that.(CancelTimerCommandAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TimerId != that1.TimerId {
		return false
	}
	return true
}
func (this *CancelWorkflowExecutionCommandAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CancelWorkflowExecutionCommandAttributes)
	if !ok {
		that2, ok := that.(CancelWorkflowExecutionCommandAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Details.Equal(that1.Details) {
		return false
	}
	return true
}
func (this *RequestCancelExternalWorkflowExecutionCommandAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestCancelExternalWorkflowExecutionCommandAttributes)
	if !ok {
		that2, ok := that.(RequestCancelExternalWorkflowExecutionCommandAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.WorkflowId != that1.WorkflowId {
		return false
	}
	if this.RunId != that1.RunId {
		return false
	}
	if this.Control != that1.Control {
		return false
	}
	if this.ChildWorkflowOnly != that1.ChildWorkflowOnly {
		return false
	}
	return true
}
func (this *SignalExternalWorkflowExecutionCommandAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignalExternalWorkflowExecutionCommandAttributes)
	if !ok {
		that2, ok := that.(SignalExternalWorkflowExecutionCommandAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if !this.Execution.Equal(that1.Execution) {
		return false
	}
	if this.SignalName != that1.SignalName {
		return false
	}
	if !this.Input.Equal(that1.Input) {
		return false
	}
	if this.Control != that1.Control {
		return false
	}
	if this.ChildWorkflowOnly != that1.ChildWorkflowOnly {
		return false
	}
	return true
}
func (this *UpsertWorkflowSearchAttributesCommandAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpsertWorkflowSearchAttributesCommandAttributes)
	if !ok {
		that2, ok := that.(UpsertWorkflowSearchAttributesCommandAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SearchAttributes.Equal(that1.SearchAttributes) {
		return false
	}
	return true
}
func (this *RecordMarkerCommandAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RecordMarkerCommandAttributes)
	if !ok {
		that2, ok := that.(RecordMarkerCommandAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MarkerName != that1.MarkerName {
		return false
	}
	if len(this.Details) != len(that1.Details) {
		return false
	}
	for i := range this.Details {
		if !this.Details[i].Equal(that1.Details[i]) {
			return false
		}
	}
	if !this.Header.Equal(that1.Header) {
		return false
	}
	if !this.Failure.Equal(that1.Failure) {
		return false
	}
	return true
}
func (this *ContinueAsNewWorkflowExecutionCommandAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ContinueAsNewWorkflowExecutionCommandAttributes)
	if !ok {
		that2, ok := that.(ContinueAsNewWorkflowExecutionCommandAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WorkflowType.Equal(that1.WorkflowType) {
		return false
	}
	if !this.TaskQueue.Equal(that1.TaskQueue) {
		return false
	}
	if !this.Input.Equal(that1.Input) {
		return false
	}
	if this.WorkflowRunTimeoutSeconds != that1.WorkflowRunTimeoutSeconds {
		return false
	}
	if this.WorkflowTaskTimeoutSeconds != that1.WorkflowTaskTimeoutSeconds {
		return false
	}
	if this.BackoffStartIntervalInSeconds != that1.BackoffStartIntervalInSeconds {
		return false
	}
	if !this.RetryPolicy.Equal(that1.RetryPolicy) {
		return false
	}
	if this.Initiator != that1.Initiator {
		return false
	}
	if !this.Failure.Equal(that1.Failure) {
		return false
	}
	if !this.LastCompletionResult.Equal(that1.LastCompletionResult) {
		return false
	}
	if this.CronSchedule != that1.CronSchedule {
		return false
	}
	if !this.Header.Equal(that1.Header) {
		return false
	}
	if !this.Memo.Equal(that1.Memo) {
		return false
	}
	if !this.SearchAttributes.Equal(that1.SearchAttributes) {
		return false
	}
	return true
}
func (this *StartChildWorkflowExecutionCommandAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StartChildWorkflowExecutionCommandAttributes)
	if !ok {
		that2, ok := that.(StartChildWorkflowExecutionCommandAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.WorkflowId != that1.WorkflowId {
		return false
	}
	if !this.WorkflowType.Equal(that1.WorkflowType) {
		return false
	}
	if !this.TaskQueue.Equal(that1.TaskQueue) {
		return false
	}
	if !this.Input.Equal(that1.Input) {
		return false
	}
	if this.WorkflowExecutionTimeoutSeconds != that1.WorkflowExecutionTimeoutSeconds {
		return false
	}
	if this.WorkflowRunTimeoutSeconds != that1.WorkflowRunTimeoutSeconds {
		return false
	}
	if this.WorkflowTaskTimeoutSeconds != that1.WorkflowTaskTimeoutSeconds {
		return false
	}
	if this.ParentClosePolicy != that1.ParentClosePolicy {
		return false
	}
	if this.Control != that1.Control {
		return false
	}
	if this.WorkflowIdReusePolicy != that1.WorkflowIdReusePolicy {
		return false
	}
	if !this.RetryPolicy.Equal(that1.RetryPolicy) {
		return false
	}
	if this.CronSchedule != that1.CronSchedule {
		return false
	}
	if !this.Header.Equal(that1.Header) {
		return false
	}
	if !this.Memo.Equal(that1.Memo) {
		return false
	}
	if !this.SearchAttributes.Equal(that1.SearchAttributes) {
		return false
	}
	return true
}
func (this *Command) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Command)
	if !ok {
		that2, ok := that.(Command)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CommandType != that1.CommandType {
		return false
	}
	if that1.Attributes == nil {
		if this.Attributes != nil {
			return false
		}
	} else if this.Attributes == nil {
		return false
	} else if !this.Attributes.Equal(that1.Attributes) {
		return false
	}
	return true
}
func (this *Command_ScheduleActivityTaskCommandAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Command_ScheduleActivityTaskCommandAttributes)
	if !ok {
		that2, ok := that.(Command_ScheduleActivityTaskCommandAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ScheduleActivityTaskCommandAttributes.Equal(that1.ScheduleActivityTaskCommandAttributes) {
		return false
	}
	return true
}
func (this *Command_StartTimerCommandAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Command_StartTimerCommandAttributes)
	if !ok {
		that2, ok := that.(Command_StartTimerCommandAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StartTimerCommandAttributes.Equal(that1.StartTimerCommandAttributes) {
		return false
	}
	return true
}
func (this *Command_CompleteWorkflowExecutionCommandAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Command_CompleteWorkflowExecutionCommandAttributes)
	if !ok {
		that2, ok := that.(Command_CompleteWorkflowExecutionCommandAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CompleteWorkflowExecutionCommandAttributes.Equal(that1.CompleteWorkflowExecutionCommandAttributes) {
		return false
	}
	return true
}
func (this *Command_FailWorkflowExecutionCommandAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Command_FailWorkflowExecutionCommandAttributes)
	if !ok {
		that2, ok := that.(Command_FailWorkflowExecutionCommandAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FailWorkflowExecutionCommandAttributes.Equal(that1.FailWorkflowExecutionCommandAttributes) {
		return false
	}
	return true
}
func (this *Command_RequestCancelActivityTaskCommandAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Command_RequestCancelActivityTaskCommandAttributes)
	if !ok {
		that2, ok := that.(Command_RequestCancelActivityTaskCommandAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RequestCancelActivityTaskCommandAttributes.Equal(that1.RequestCancelActivityTaskCommandAttributes) {
		return false
	}
	return true
}
func (this *Command_CancelTimerCommandAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Command_CancelTimerCommandAttributes)
	if !ok {
		that2, ok := that.(Command_CancelTimerCommandAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CancelTimerCommandAttributes.Equal(that1.CancelTimerCommandAttributes) {
		return false
	}
	return true
}
func (this *Command_CancelWorkflowExecutionCommandAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Command_CancelWorkflowExecutionCommandAttributes)
	if !ok {
		that2, ok := that.(Command_CancelWorkflowExecutionCommandAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CancelWorkflowExecutionCommandAttributes.Equal(that1.CancelWorkflowExecutionCommandAttributes) {
		return false
	}
	return true
}
func (this *Command_RequestCancelExternalWorkflowExecutionCommandAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Command_RequestCancelExternalWorkflowExecutionCommandAttributes)
	if !ok {
		that2, ok := that.(Command_RequestCancelExternalWorkflowExecutionCommandAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RequestCancelExternalWorkflowExecutionCommandAttributes.Equal(that1.RequestCancelExternalWorkflowExecutionCommandAttributes) {
		return false
	}
	return true
}
func (this *Command_RecordMarkerCommandAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Command_RecordMarkerCommandAttributes)
	if !ok {
		that2, ok := that.(Command_RecordMarkerCommandAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RecordMarkerCommandAttributes.Equal(that1.RecordMarkerCommandAttributes) {
		return false
	}
	return true
}
func (this *Command_ContinueAsNewWorkflowExecutionCommandAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Command_ContinueAsNewWorkflowExecutionCommandAttributes)
	if !ok {
		that2, ok := that.(Command_ContinueAsNewWorkflowExecutionCommandAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ContinueAsNewWorkflowExecutionCommandAttributes.Equal(that1.ContinueAsNewWorkflowExecutionCommandAttributes) {
		return false
	}
	return true
}
func (this *Command_StartChildWorkflowExecutionCommandAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Command_StartChildWorkflowExecutionCommandAttributes)
	if !ok {
		that2, ok := that.(Command_StartChildWorkflowExecutionCommandAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StartChildWorkflowExecutionCommandAttributes.Equal(that1.StartChildWorkflowExecutionCommandAttributes) {
		return false
	}
	return true
}
func (this *Command_SignalExternalWorkflowExecutionCommandAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Command_SignalExternalWorkflowExecutionCommandAttributes)
	if !ok {
		that2, ok := that.(Command_SignalExternalWorkflowExecutionCommandAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SignalExternalWorkflowExecutionCommandAttributes.Equal(that1.SignalExternalWorkflowExecutionCommandAttributes) {
		return false
	}
	return true
}
func (this *Command_UpsertWorkflowSearchAttributesCommandAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Command_UpsertWorkflowSearchAttributesCommandAttributes)
	if !ok {
		that2, ok := that.(Command_UpsertWorkflowSearchAttributesCommandAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpsertWorkflowSearchAttributesCommandAttributes.Equal(that1.UpsertWorkflowSearchAttributesCommandAttributes) {
		return false
	}
	return true
}
func (this *ScheduleActivityTaskCommandAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&command.ScheduleActivityTaskCommandAttributes{")
	s = append(s, "ActivityId: "+fmt.Sprintf("%#v", this.ActivityId)+",\n")
	if this.ActivityType != nil {
		s = append(s, "ActivityType: "+fmt.Sprintf("%#v", this.ActivityType)+",\n")
	}
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	if this.TaskQueue != nil {
		s = append(s, "TaskQueue: "+fmt.Sprintf("%#v", this.TaskQueue)+",\n")
	}
	if this.Header != nil {
		s = append(s, "Header: "+fmt.Sprintf("%#v", this.Header)+",\n")
	}
	if this.Input != nil {
		s = append(s, "Input: "+fmt.Sprintf("%#v", this.Input)+",\n")
	}
	s = append(s, "ScheduleToCloseTimeoutSeconds: "+fmt.Sprintf("%#v", this.ScheduleToCloseTimeoutSeconds)+",\n")
	s = append(s, "ScheduleToStartTimeoutSeconds: "+fmt.Sprintf("%#v", this.ScheduleToStartTimeoutSeconds)+",\n")
	s = append(s, "StartToCloseTimeoutSeconds: "+fmt.Sprintf("%#v", this.StartToCloseTimeoutSeconds)+",\n")
	s = append(s, "HeartbeatTimeoutSeconds: "+fmt.Sprintf("%#v", this.HeartbeatTimeoutSeconds)+",\n")
	if this.RetryPolicy != nil {
		s = append(s, "RetryPolicy: "+fmt.Sprintf("%#v", this.RetryPolicy)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestCancelActivityTaskCommandAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&command.RequestCancelActivityTaskCommandAttributes{")
	s = append(s, "ScheduledEventId: "+fmt.Sprintf("%#v", this.ScheduledEventId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StartTimerCommandAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&command.StartTimerCommandAttributes{")
	s = append(s, "TimerId: "+fmt.Sprintf("%#v", this.TimerId)+",\n")
	s = append(s, "StartToFireTimeoutSeconds: "+fmt.Sprintf("%#v", this.StartToFireTimeoutSeconds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CompleteWorkflowExecutionCommandAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&command.CompleteWorkflowExecutionCommandAttributes{")
	if this.Result != nil {
		s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FailWorkflowExecutionCommandAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&command.FailWorkflowExecutionCommandAttributes{")
	if this.Failure != nil {
		s = append(s, "Failure: "+fmt.Sprintf("%#v", this.Failure)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CancelTimerCommandAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&command.CancelTimerCommandAttributes{")
	s = append(s, "TimerId: "+fmt.Sprintf("%#v", this.TimerId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CancelWorkflowExecutionCommandAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&command.CancelWorkflowExecutionCommandAttributes{")
	if this.Details != nil {
		s = append(s, "Details: "+fmt.Sprintf("%#v", this.Details)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestCancelExternalWorkflowExecutionCommandAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&command.RequestCancelExternalWorkflowExecutionCommandAttributes{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "WorkflowId: "+fmt.Sprintf("%#v", this.WorkflowId)+",\n")
	s = append(s, "RunId: "+fmt.Sprintf("%#v", this.RunId)+",\n")
	s = append(s, "Control: "+fmt.Sprintf("%#v", this.Control)+",\n")
	s = append(s, "ChildWorkflowOnly: "+fmt.Sprintf("%#v", this.ChildWorkflowOnly)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SignalExternalWorkflowExecutionCommandAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&command.SignalExternalWorkflowExecutionCommandAttributes{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	if this.Execution != nil {
		s = append(s, "Execution: "+fmt.Sprintf("%#v", this.Execution)+",\n")
	}
	s = append(s, "SignalName: "+fmt.Sprintf("%#v", this.SignalName)+",\n")
	if this.Input != nil {
		s = append(s, "Input: "+fmt.Sprintf("%#v", this.Input)+",\n")
	}
	s = append(s, "Control: "+fmt.Sprintf("%#v", this.Control)+",\n")
	s = append(s, "ChildWorkflowOnly: "+fmt.Sprintf("%#v", this.ChildWorkflowOnly)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpsertWorkflowSearchAttributesCommandAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&command.UpsertWorkflowSearchAttributesCommandAttributes{")
	if this.SearchAttributes != nil {
		s = append(s, "SearchAttributes: "+fmt.Sprintf("%#v", this.SearchAttributes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RecordMarkerCommandAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&command.RecordMarkerCommandAttributes{")
	s = append(s, "MarkerName: "+fmt.Sprintf("%#v", this.MarkerName)+",\n")
	keysForDetails := make([]string, 0, len(this.Details))
	for k, _ := range this.Details {
		keysForDetails = append(keysForDetails, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForDetails)
	mapStringForDetails := "map[string]*v1.Payloads{"
	for _, k := range keysForDetails {
		mapStringForDetails += fmt.Sprintf("%#v: %#v,", k, this.Details[k])
	}
	mapStringForDetails += "}"
	if this.Details != nil {
		s = append(s, "Details: "+mapStringForDetails+",\n")
	}
	if this.Header != nil {
		s = append(s, "Header: "+fmt.Sprintf("%#v", this.Header)+",\n")
	}
	if this.Failure != nil {
		s = append(s, "Failure: "+fmt.Sprintf("%#v", this.Failure)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ContinueAsNewWorkflowExecutionCommandAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 18)
	s = append(s, "&command.ContinueAsNewWorkflowExecutionCommandAttributes{")
	if this.WorkflowType != nil {
		s = append(s, "WorkflowType: "+fmt.Sprintf("%#v", this.WorkflowType)+",\n")
	}
	if this.TaskQueue != nil {
		s = append(s, "TaskQueue: "+fmt.Sprintf("%#v", this.TaskQueue)+",\n")
	}
	if this.Input != nil {
		s = append(s, "Input: "+fmt.Sprintf("%#v", this.Input)+",\n")
	}
	s = append(s, "WorkflowRunTimeoutSeconds: "+fmt.Sprintf("%#v", this.WorkflowRunTimeoutSeconds)+",\n")
	s = append(s, "WorkflowTaskTimeoutSeconds: "+fmt.Sprintf("%#v", this.WorkflowTaskTimeoutSeconds)+",\n")
	s = append(s, "BackoffStartIntervalInSeconds: "+fmt.Sprintf("%#v", this.BackoffStartIntervalInSeconds)+",\n")
	if this.RetryPolicy != nil {
		s = append(s, "RetryPolicy: "+fmt.Sprintf("%#v", this.RetryPolicy)+",\n")
	}
	s = append(s, "Initiator: "+fmt.Sprintf("%#v", this.Initiator)+",\n")
	if this.Failure != nil {
		s = append(s, "Failure: "+fmt.Sprintf("%#v", this.Failure)+",\n")
	}
	if this.LastCompletionResult != nil {
		s = append(s, "LastCompletionResult: "+fmt.Sprintf("%#v", this.LastCompletionResult)+",\n")
	}
	s = append(s, "CronSchedule: "+fmt.Sprintf("%#v", this.CronSchedule)+",\n")
	if this.Header != nil {
		s = append(s, "Header: "+fmt.Sprintf("%#v", this.Header)+",\n")
	}
	if this.Memo != nil {
		s = append(s, "Memo: "+fmt.Sprintf("%#v", this.Memo)+",\n")
	}
	if this.SearchAttributes != nil {
		s = append(s, "SearchAttributes: "+fmt.Sprintf("%#v", this.SearchAttributes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StartChildWorkflowExecutionCommandAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 20)
	s = append(s, "&command.StartChildWorkflowExecutionCommandAttributes{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "WorkflowId: "+fmt.Sprintf("%#v", this.WorkflowId)+",\n")
	if this.WorkflowType != nil {
		s = append(s, "WorkflowType: "+fmt.Sprintf("%#v", this.WorkflowType)+",\n")
	}
	if this.TaskQueue != nil {
		s = append(s, "TaskQueue: "+fmt.Sprintf("%#v", this.TaskQueue)+",\n")
	}
	if this.Input != nil {
		s = append(s, "Input: "+fmt.Sprintf("%#v", this.Input)+",\n")
	}
	s = append(s, "WorkflowExecutionTimeoutSeconds: "+fmt.Sprintf("%#v", this.WorkflowExecutionTimeoutSeconds)+",\n")
	s = append(s, "WorkflowRunTimeoutSeconds: "+fmt.Sprintf("%#v", this.WorkflowRunTimeoutSeconds)+",\n")
	s = append(s, "WorkflowTaskTimeoutSeconds: "+fmt.Sprintf("%#v", this.WorkflowTaskTimeoutSeconds)+",\n")
	s = append(s, "ParentClosePolicy: "+fmt.Sprintf("%#v", this.ParentClosePolicy)+",\n")
	s = append(s, "Control: "+fmt.Sprintf("%#v", this.Control)+",\n")
	s = append(s, "WorkflowIdReusePolicy: "+fmt.Sprintf("%#v", this.WorkflowIdReusePolicy)+",\n")
	if this.RetryPolicy != nil {
		s = append(s, "RetryPolicy: "+fmt.Sprintf("%#v", this.RetryPolicy)+",\n")
	}
	s = append(s, "CronSchedule: "+fmt.Sprintf("%#v", this.CronSchedule)+",\n")
	if this.Header != nil {
		s = append(s, "Header: "+fmt.Sprintf("%#v", this.Header)+",\n")
	}
	if this.Memo != nil {
		s = append(s, "Memo: "+fmt.Sprintf("%#v", this.Memo)+",\n")
	}
	if this.SearchAttributes != nil {
		s = append(s, "SearchAttributes: "+fmt.Sprintf("%#v", this.SearchAttributes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Command) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 18)
	s = append(s, "&command.Command{")
	s = append(s, "CommandType: "+fmt.Sprintf("%#v", this.CommandType)+",\n")
	if this.Attributes != nil {
		s = append(s, "Attributes: "+fmt.Sprintf("%#v", this.Attributes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Command_ScheduleActivityTaskCommandAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&command.Command_ScheduleActivityTaskCommandAttributes{` +
		`ScheduleActivityTaskCommandAttributes:` + fmt.Sprintf("%#v", this.ScheduleActivityTaskCommandAttributes) + `}`}, ", ")
	return s
}
func (this *Command_StartTimerCommandAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&command.Command_StartTimerCommandAttributes{` +
		`StartTimerCommandAttributes:` + fmt.Sprintf("%#v", this.StartTimerCommandAttributes) + `}`}, ", ")
	return s
}
func (this *Command_CompleteWorkflowExecutionCommandAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&command.Command_CompleteWorkflowExecutionCommandAttributes{` +
		`CompleteWorkflowExecutionCommandAttributes:` + fmt.Sprintf("%#v", this.CompleteWorkflowExecutionCommandAttributes) + `}`}, ", ")
	return s
}
func (this *Command_FailWorkflowExecutionCommandAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&command.Command_FailWorkflowExecutionCommandAttributes{` +
		`FailWorkflowExecutionCommandAttributes:` + fmt.Sprintf("%#v", this.FailWorkflowExecutionCommandAttributes) + `}`}, ", ")
	return s
}
func (this *Command_RequestCancelActivityTaskCommandAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&command.Command_RequestCancelActivityTaskCommandAttributes{` +
		`RequestCancelActivityTaskCommandAttributes:` + fmt.Sprintf("%#v", this.RequestCancelActivityTaskCommandAttributes) + `}`}, ", ")
	return s
}
func (this *Command_CancelTimerCommandAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&command.Command_CancelTimerCommandAttributes{` +
		`CancelTimerCommandAttributes:` + fmt.Sprintf("%#v", this.CancelTimerCommandAttributes) + `}`}, ", ")
	return s
}
func (this *Command_CancelWorkflowExecutionCommandAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&command.Command_CancelWorkflowExecutionCommandAttributes{` +
		`CancelWorkflowExecutionCommandAttributes:` + fmt.Sprintf("%#v", this.CancelWorkflowExecutionCommandAttributes) + `}`}, ", ")
	return s
}
func (this *Command_RequestCancelExternalWorkflowExecutionCommandAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&command.Command_RequestCancelExternalWorkflowExecutionCommandAttributes{` +
		`RequestCancelExternalWorkflowExecutionCommandAttributes:` + fmt.Sprintf("%#v", this.RequestCancelExternalWorkflowExecutionCommandAttributes) + `}`}, ", ")
	return s
}
func (this *Command_RecordMarkerCommandAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&command.Command_RecordMarkerCommandAttributes{` +
		`RecordMarkerCommandAttributes:` + fmt.Sprintf("%#v", this.RecordMarkerCommandAttributes) + `}`}, ", ")
	return s
}
func (this *Command_ContinueAsNewWorkflowExecutionCommandAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&command.Command_ContinueAsNewWorkflowExecutionCommandAttributes{` +
		`ContinueAsNewWorkflowExecutionCommandAttributes:` + fmt.Sprintf("%#v", this.ContinueAsNewWorkflowExecutionCommandAttributes) + `}`}, ", ")
	return s
}
func (this *Command_StartChildWorkflowExecutionCommandAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&command.Command_StartChildWorkflowExecutionCommandAttributes{` +
		`StartChildWorkflowExecutionCommandAttributes:` + fmt.Sprintf("%#v", this.StartChildWorkflowExecutionCommandAttributes) + `}`}, ", ")
	return s
}
func (this *Command_SignalExternalWorkflowExecutionCommandAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&command.Command_SignalExternalWorkflowExecutionCommandAttributes{` +
		`SignalExternalWorkflowExecutionCommandAttributes:` + fmt.Sprintf("%#v", this.SignalExternalWorkflowExecutionCommandAttributes) + `}`}, ", ")
	return s
}
func (this *Command_UpsertWorkflowSearchAttributesCommandAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&command.Command_UpsertWorkflowSearchAttributesCommandAttributes{` +
		`UpsertWorkflowSearchAttributesCommandAttributes:` + fmt.Sprintf("%#v", this.UpsertWorkflowSearchAttributesCommandAttributes) + `}`}, ", ")
	return s
}
func valueToGoStringMessage(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ScheduleActivityTaskCommandAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScheduleActivityTaskCommandAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScheduleActivityTaskCommandAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RetryPolicy != nil {
		{
			size, err := m.RetryPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.HeartbeatTimeoutSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.HeartbeatTimeoutSeconds))
		i--
		dAtA[i] = 0x50
	}
	if m.StartToCloseTimeoutSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartToCloseTimeoutSeconds))
		i--
		dAtA[i] = 0x48
	}
	if m.ScheduleToStartTimeoutSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ScheduleToStartTimeoutSeconds))
		i--
		dAtA[i] = 0x40
	}
	if m.ScheduleToCloseTimeoutSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ScheduleToCloseTimeoutSeconds))
		i--
		dAtA[i] = 0x38
	}
	if m.Input != nil {
		{
			size, err := m.Input.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.TaskQueue != nil {
		{
			size, err := m.TaskQueue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ActivityType != nil {
		{
			size, err := m.ActivityType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ActivityId) > 0 {
		i -= len(m.ActivityId)
		copy(dAtA[i:], m.ActivityId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ActivityId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestCancelActivityTaskCommandAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestCancelActivityTaskCommandAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestCancelActivityTaskCommandAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ScheduledEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ScheduledEventId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StartTimerCommandAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartTimerCommandAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartTimerCommandAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StartToFireTimeoutSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartToFireTimeoutSeconds))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TimerId) > 0 {
		i -= len(m.TimerId)
		copy(dAtA[i:], m.TimerId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TimerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CompleteWorkflowExecutionCommandAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompleteWorkflowExecutionCommandAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompleteWorkflowExecutionCommandAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FailWorkflowExecutionCommandAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FailWorkflowExecutionCommandAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailWorkflowExecutionCommandAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Failure != nil {
		{
			size, err := m.Failure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CancelTimerCommandAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelTimerCommandAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CancelTimerCommandAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TimerId) > 0 {
		i -= len(m.TimerId)
		copy(dAtA[i:], m.TimerId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TimerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CancelWorkflowExecutionCommandAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelWorkflowExecutionCommandAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CancelWorkflowExecutionCommandAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Details != nil {
		{
			size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestCancelExternalWorkflowExecutionCommandAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestCancelExternalWorkflowExecutionCommandAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestCancelExternalWorkflowExecutionCommandAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChildWorkflowOnly {
		i--
		if m.ChildWorkflowOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Control) > 0 {
		i -= len(m.Control)
		copy(dAtA[i:], m.Control)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Control)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RunId) > 0 {
		i -= len(m.RunId)
		copy(dAtA[i:], m.RunId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.RunId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WorkflowId) > 0 {
		i -= len(m.WorkflowId)
		copy(dAtA[i:], m.WorkflowId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.WorkflowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignalExternalWorkflowExecutionCommandAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignalExternalWorkflowExecutionCommandAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignalExternalWorkflowExecutionCommandAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChildWorkflowOnly {
		i--
		if m.ChildWorkflowOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.Control) > 0 {
		i -= len(m.Control)
		copy(dAtA[i:], m.Control)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Control)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Input != nil {
		{
			size, err := m.Input.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.SignalName) > 0 {
		i -= len(m.SignalName)
		copy(dAtA[i:], m.SignalName)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.SignalName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Execution != nil {
		{
			size, err := m.Execution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpsertWorkflowSearchAttributesCommandAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertWorkflowSearchAttributesCommandAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpsertWorkflowSearchAttributesCommandAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SearchAttributes != nil {
		{
			size, err := m.SearchAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecordMarkerCommandAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordMarkerCommandAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordMarkerCommandAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Failure != nil {
		{
			size, err := m.Failure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Details) > 0 {
		for k := range m.Details {
			v := m.Details[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintMessage(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMessage(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMessage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.MarkerName) > 0 {
		i -= len(m.MarkerName)
		copy(dAtA[i:], m.MarkerName)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.MarkerName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContinueAsNewWorkflowExecutionCommandAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContinueAsNewWorkflowExecutionCommandAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContinueAsNewWorkflowExecutionCommandAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SearchAttributes != nil {
		{
			size, err := m.SearchAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.Memo != nil {
		{
			size, err := m.Memo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if len(m.CronSchedule) > 0 {
		i -= len(m.CronSchedule)
		copy(dAtA[i:], m.CronSchedule)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.CronSchedule)))
		i--
		dAtA[i] = 0x5a
	}
	if m.LastCompletionResult != nil {
		{
			size, err := m.LastCompletionResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Failure != nil {
		{
			size, err := m.Failure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Initiator != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Initiator))
		i--
		dAtA[i] = 0x40
	}
	if m.RetryPolicy != nil {
		{
			size, err := m.RetryPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.BackoffStartIntervalInSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.BackoffStartIntervalInSeconds))
		i--
		dAtA[i] = 0x30
	}
	if m.WorkflowTaskTimeoutSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.WorkflowTaskTimeoutSeconds))
		i--
		dAtA[i] = 0x28
	}
	if m.WorkflowRunTimeoutSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.WorkflowRunTimeoutSeconds))
		i--
		dAtA[i] = 0x20
	}
	if m.Input != nil {
		{
			size, err := m.Input.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.TaskQueue != nil {
		{
			size, err := m.TaskQueue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.WorkflowType != nil {
		{
			size, err := m.WorkflowType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StartChildWorkflowExecutionCommandAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartChildWorkflowExecutionCommandAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartChildWorkflowExecutionCommandAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SearchAttributes != nil {
		{
			size, err := m.SearchAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Memo != nil {
		{
			size, err := m.Memo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if len(m.CronSchedule) > 0 {
		i -= len(m.CronSchedule)
		copy(dAtA[i:], m.CronSchedule)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.CronSchedule)))
		i--
		dAtA[i] = 0x6a
	}
	if m.RetryPolicy != nil {
		{
			size, err := m.RetryPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.WorkflowIdReusePolicy != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.WorkflowIdReusePolicy))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Control) > 0 {
		i -= len(m.Control)
		copy(dAtA[i:], m.Control)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Control)))
		i--
		dAtA[i] = 0x52
	}
	if m.ParentClosePolicy != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ParentClosePolicy))
		i--
		dAtA[i] = 0x48
	}
	if m.WorkflowTaskTimeoutSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.WorkflowTaskTimeoutSeconds))
		i--
		dAtA[i] = 0x40
	}
	if m.WorkflowRunTimeoutSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.WorkflowRunTimeoutSeconds))
		i--
		dAtA[i] = 0x38
	}
	if m.WorkflowExecutionTimeoutSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.WorkflowExecutionTimeoutSeconds))
		i--
		dAtA[i] = 0x30
	}
	if m.Input != nil {
		{
			size, err := m.Input.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.TaskQueue != nil {
		{
			size, err := m.TaskQueue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.WorkflowType != nil {
		{
			size, err := m.WorkflowType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WorkflowId) > 0 {
		i -= len(m.WorkflowId)
		copy(dAtA[i:], m.WorkflowId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.WorkflowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Command) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Command) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Attributes != nil {
		{
			size := m.Attributes.Size()
			i -= size
			if _, err := m.Attributes.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.CommandType != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.CommandType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Command_ScheduleActivityTaskCommandAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_ScheduleActivityTaskCommandAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ScheduleActivityTaskCommandAttributes != nil {
		{
			size, err := m.ScheduleActivityTaskCommandAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Command_StartTimerCommandAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_StartTimerCommandAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StartTimerCommandAttributes != nil {
		{
			size, err := m.StartTimerCommandAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Command_CompleteWorkflowExecutionCommandAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_CompleteWorkflowExecutionCommandAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CompleteWorkflowExecutionCommandAttributes != nil {
		{
			size, err := m.CompleteWorkflowExecutionCommandAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Command_FailWorkflowExecutionCommandAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_FailWorkflowExecutionCommandAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FailWorkflowExecutionCommandAttributes != nil {
		{
			size, err := m.FailWorkflowExecutionCommandAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Command_RequestCancelActivityTaskCommandAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_RequestCancelActivityTaskCommandAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RequestCancelActivityTaskCommandAttributes != nil {
		{
			size, err := m.RequestCancelActivityTaskCommandAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *Command_CancelTimerCommandAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_CancelTimerCommandAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CancelTimerCommandAttributes != nil {
		{
			size, err := m.CancelTimerCommandAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *Command_CancelWorkflowExecutionCommandAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_CancelWorkflowExecutionCommandAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CancelWorkflowExecutionCommandAttributes != nil {
		{
			size, err := m.CancelWorkflowExecutionCommandAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *Command_RequestCancelExternalWorkflowExecutionCommandAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_RequestCancelExternalWorkflowExecutionCommandAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RequestCancelExternalWorkflowExecutionCommandAttributes != nil {
		{
			size, err := m.RequestCancelExternalWorkflowExecutionCommandAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *Command_RecordMarkerCommandAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_RecordMarkerCommandAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RecordMarkerCommandAttributes != nil {
		{
			size, err := m.RecordMarkerCommandAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *Command_ContinueAsNewWorkflowExecutionCommandAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_ContinueAsNewWorkflowExecutionCommandAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ContinueAsNewWorkflowExecutionCommandAttributes != nil {
		{
			size, err := m.ContinueAsNewWorkflowExecutionCommandAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *Command_StartChildWorkflowExecutionCommandAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_StartChildWorkflowExecutionCommandAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StartChildWorkflowExecutionCommandAttributes != nil {
		{
			size, err := m.StartChildWorkflowExecutionCommandAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *Command_SignalExternalWorkflowExecutionCommandAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_SignalExternalWorkflowExecutionCommandAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SignalExternalWorkflowExecutionCommandAttributes != nil {
		{
			size, err := m.SignalExternalWorkflowExecutionCommandAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *Command_UpsertWorkflowSearchAttributesCommandAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_UpsertWorkflowSearchAttributesCommandAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpsertWorkflowSearchAttributesCommandAttributes != nil {
		{
			size, err := m.UpsertWorkflowSearchAttributesCommandAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ScheduleActivityTaskCommandAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ActivityId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ActivityType != nil {
		l = m.ActivityType.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.TaskQueue != nil {
		l = m.TaskQueue.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Input != nil {
		l = m.Input.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ScheduleToCloseTimeoutSeconds != 0 {
		n += 1 + sovMessage(uint64(m.ScheduleToCloseTimeoutSeconds))
	}
	if m.ScheduleToStartTimeoutSeconds != 0 {
		n += 1 + sovMessage(uint64(m.ScheduleToStartTimeoutSeconds))
	}
	if m.StartToCloseTimeoutSeconds != 0 {
		n += 1 + sovMessage(uint64(m.StartToCloseTimeoutSeconds))
	}
	if m.HeartbeatTimeoutSeconds != 0 {
		n += 1 + sovMessage(uint64(m.HeartbeatTimeoutSeconds))
	}
	if m.RetryPolicy != nil {
		l = m.RetryPolicy.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *RequestCancelActivityTaskCommandAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScheduledEventId != 0 {
		n += 1 + sovMessage(uint64(m.ScheduledEventId))
	}
	return n
}

func (m *StartTimerCommandAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TimerId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.StartToFireTimeoutSeconds != 0 {
		n += 1 + sovMessage(uint64(m.StartToFireTimeoutSeconds))
	}
	return n
}

func (m *CompleteWorkflowExecutionCommandAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *FailWorkflowExecutionCommandAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Failure != nil {
		l = m.Failure.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *CancelTimerCommandAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TimerId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *CancelWorkflowExecutionCommandAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *RequestCancelExternalWorkflowExecutionCommandAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.WorkflowId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.RunId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Control)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ChildWorkflowOnly {
		n += 2
	}
	return n
}

func (m *SignalExternalWorkflowExecutionCommandAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Execution != nil {
		l = m.Execution.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.SignalName)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Input != nil {
		l = m.Input.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Control)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ChildWorkflowOnly {
		n += 2
	}
	return n
}

func (m *UpsertWorkflowSearchAttributesCommandAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SearchAttributes != nil {
		l = m.SearchAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *RecordMarkerCommandAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarkerName)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if len(m.Details) > 0 {
		for k, v := range m.Details {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMessage(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovMessage(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovMessage(uint64(mapEntrySize))
		}
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Failure != nil {
		l = m.Failure.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *ContinueAsNewWorkflowExecutionCommandAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkflowType != nil {
		l = m.WorkflowType.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.TaskQueue != nil {
		l = m.TaskQueue.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Input != nil {
		l = m.Input.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowRunTimeoutSeconds != 0 {
		n += 1 + sovMessage(uint64(m.WorkflowRunTimeoutSeconds))
	}
	if m.WorkflowTaskTimeoutSeconds != 0 {
		n += 1 + sovMessage(uint64(m.WorkflowTaskTimeoutSeconds))
	}
	if m.BackoffStartIntervalInSeconds != 0 {
		n += 1 + sovMessage(uint64(m.BackoffStartIntervalInSeconds))
	}
	if m.RetryPolicy != nil {
		l = m.RetryPolicy.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Initiator != 0 {
		n += 1 + sovMessage(uint64(m.Initiator))
	}
	if m.Failure != nil {
		l = m.Failure.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.LastCompletionResult != nil {
		l = m.LastCompletionResult.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.CronSchedule)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Memo != nil {
		l = m.Memo.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.SearchAttributes != nil {
		l = m.SearchAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *StartChildWorkflowExecutionCommandAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.WorkflowId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowType != nil {
		l = m.WorkflowType.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.TaskQueue != nil {
		l = m.TaskQueue.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Input != nil {
		l = m.Input.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowExecutionTimeoutSeconds != 0 {
		n += 1 + sovMessage(uint64(m.WorkflowExecutionTimeoutSeconds))
	}
	if m.WorkflowRunTimeoutSeconds != 0 {
		n += 1 + sovMessage(uint64(m.WorkflowRunTimeoutSeconds))
	}
	if m.WorkflowTaskTimeoutSeconds != 0 {
		n += 1 + sovMessage(uint64(m.WorkflowTaskTimeoutSeconds))
	}
	if m.ParentClosePolicy != 0 {
		n += 1 + sovMessage(uint64(m.ParentClosePolicy))
	}
	l = len(m.Control)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowIdReusePolicy != 0 {
		n += 1 + sovMessage(uint64(m.WorkflowIdReusePolicy))
	}
	if m.RetryPolicy != nil {
		l = m.RetryPolicy.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.CronSchedule)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Memo != nil {
		l = m.Memo.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.SearchAttributes != nil {
		l = m.SearchAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *Command) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommandType != 0 {
		n += 1 + sovMessage(uint64(m.CommandType))
	}
	if m.Attributes != nil {
		n += m.Attributes.Size()
	}
	return n
}

func (m *Command_ScheduleActivityTaskCommandAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScheduleActivityTaskCommandAttributes != nil {
		l = m.ScheduleActivityTaskCommandAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Command_StartTimerCommandAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartTimerCommandAttributes != nil {
		l = m.StartTimerCommandAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Command_CompleteWorkflowExecutionCommandAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CompleteWorkflowExecutionCommandAttributes != nil {
		l = m.CompleteWorkflowExecutionCommandAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Command_FailWorkflowExecutionCommandAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FailWorkflowExecutionCommandAttributes != nil {
		l = m.FailWorkflowExecutionCommandAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Command_RequestCancelActivityTaskCommandAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestCancelActivityTaskCommandAttributes != nil {
		l = m.RequestCancelActivityTaskCommandAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Command_CancelTimerCommandAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CancelTimerCommandAttributes != nil {
		l = m.CancelTimerCommandAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Command_CancelWorkflowExecutionCommandAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CancelWorkflowExecutionCommandAttributes != nil {
		l = m.CancelWorkflowExecutionCommandAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Command_RequestCancelExternalWorkflowExecutionCommandAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestCancelExternalWorkflowExecutionCommandAttributes != nil {
		l = m.RequestCancelExternalWorkflowExecutionCommandAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Command_RecordMarkerCommandAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RecordMarkerCommandAttributes != nil {
		l = m.RecordMarkerCommandAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Command_ContinueAsNewWorkflowExecutionCommandAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ContinueAsNewWorkflowExecutionCommandAttributes != nil {
		l = m.ContinueAsNewWorkflowExecutionCommandAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Command_StartChildWorkflowExecutionCommandAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartChildWorkflowExecutionCommandAttributes != nil {
		l = m.StartChildWorkflowExecutionCommandAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Command_SignalExternalWorkflowExecutionCommandAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignalExternalWorkflowExecutionCommandAttributes != nil {
		l = m.SignalExternalWorkflowExecutionCommandAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Command_UpsertWorkflowSearchAttributesCommandAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpsertWorkflowSearchAttributesCommandAttributes != nil {
		l = m.UpsertWorkflowSearchAttributesCommandAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ScheduleActivityTaskCommandAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScheduleActivityTaskCommandAttributes{`,
		`ActivityId:` + fmt.Sprintf("%v", this.ActivityId) + `,`,
		`ActivityType:` + strings.Replace(fmt.Sprintf("%v", this.ActivityType), "ActivityType", "v1.ActivityType", 1) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`TaskQueue:` + strings.Replace(fmt.Sprintf("%v", this.TaskQueue), "TaskQueue", "v11.TaskQueue", 1) + `,`,
		`Header:` + strings.Replace(fmt.Sprintf("%v", this.Header), "Header", "v1.Header", 1) + `,`,
		`Input:` + strings.Replace(fmt.Sprintf("%v", this.Input), "Payloads", "v1.Payloads", 1) + `,`,
		`ScheduleToCloseTimeoutSeconds:` + fmt.Sprintf("%v", this.ScheduleToCloseTimeoutSeconds) + `,`,
		`ScheduleToStartTimeoutSeconds:` + fmt.Sprintf("%v", this.ScheduleToStartTimeoutSeconds) + `,`,
		`StartToCloseTimeoutSeconds:` + fmt.Sprintf("%v", this.StartToCloseTimeoutSeconds) + `,`,
		`HeartbeatTimeoutSeconds:` + fmt.Sprintf("%v", this.HeartbeatTimeoutSeconds) + `,`,
		`RetryPolicy:` + strings.Replace(fmt.Sprintf("%v", this.RetryPolicy), "RetryPolicy", "v1.RetryPolicy", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestCancelActivityTaskCommandAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestCancelActivityTaskCommandAttributes{`,
		`ScheduledEventId:` + fmt.Sprintf("%v", this.ScheduledEventId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StartTimerCommandAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StartTimerCommandAttributes{`,
		`TimerId:` + fmt.Sprintf("%v", this.TimerId) + `,`,
		`StartToFireTimeoutSeconds:` + fmt.Sprintf("%v", this.StartToFireTimeoutSeconds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CompleteWorkflowExecutionCommandAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CompleteWorkflowExecutionCommandAttributes{`,
		`Result:` + strings.Replace(fmt.Sprintf("%v", this.Result), "Payloads", "v1.Payloads", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FailWorkflowExecutionCommandAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FailWorkflowExecutionCommandAttributes{`,
		`Failure:` + strings.Replace(fmt.Sprintf("%v", this.Failure), "Failure", "v12.Failure", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CancelTimerCommandAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CancelTimerCommandAttributes{`,
		`TimerId:` + fmt.Sprintf("%v", this.TimerId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CancelWorkflowExecutionCommandAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CancelWorkflowExecutionCommandAttributes{`,
		`Details:` + strings.Replace(fmt.Sprintf("%v", this.Details), "Payloads", "v1.Payloads", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestCancelExternalWorkflowExecutionCommandAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestCancelExternalWorkflowExecutionCommandAttributes{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`WorkflowId:` + fmt.Sprintf("%v", this.WorkflowId) + `,`,
		`RunId:` + fmt.Sprintf("%v", this.RunId) + `,`,
		`Control:` + fmt.Sprintf("%v", this.Control) + `,`,
		`ChildWorkflowOnly:` + fmt.Sprintf("%v", this.ChildWorkflowOnly) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SignalExternalWorkflowExecutionCommandAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignalExternalWorkflowExecutionCommandAttributes{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Execution:` + strings.Replace(fmt.Sprintf("%v", this.Execution), "WorkflowExecution", "v1.WorkflowExecution", 1) + `,`,
		`SignalName:` + fmt.Sprintf("%v", this.SignalName) + `,`,
		`Input:` + strings.Replace(fmt.Sprintf("%v", this.Input), "Payloads", "v1.Payloads", 1) + `,`,
		`Control:` + fmt.Sprintf("%v", this.Control) + `,`,
		`ChildWorkflowOnly:` + fmt.Sprintf("%v", this.ChildWorkflowOnly) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpsertWorkflowSearchAttributesCommandAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpsertWorkflowSearchAttributesCommandAttributes{`,
		`SearchAttributes:` + strings.Replace(fmt.Sprintf("%v", this.SearchAttributes), "SearchAttributes", "v1.SearchAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecordMarkerCommandAttributes) String() string {
	if this == nil {
		return "nil"
	}
	keysForDetails := make([]string, 0, len(this.Details))
	for k, _ := range this.Details {
		keysForDetails = append(keysForDetails, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForDetails)
	mapStringForDetails := "map[string]*v1.Payloads{"
	for _, k := range keysForDetails {
		mapStringForDetails += fmt.Sprintf("%v: %v,", k, this.Details[k])
	}
	mapStringForDetails += "}"
	s := strings.Join([]string{`&RecordMarkerCommandAttributes{`,
		`MarkerName:` + fmt.Sprintf("%v", this.MarkerName) + `,`,
		`Details:` + mapStringForDetails + `,`,
		`Header:` + strings.Replace(fmt.Sprintf("%v", this.Header), "Header", "v1.Header", 1) + `,`,
		`Failure:` + strings.Replace(fmt.Sprintf("%v", this.Failure), "Failure", "v12.Failure", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ContinueAsNewWorkflowExecutionCommandAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ContinueAsNewWorkflowExecutionCommandAttributes{`,
		`WorkflowType:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowType), "WorkflowType", "v1.WorkflowType", 1) + `,`,
		`TaskQueue:` + strings.Replace(fmt.Sprintf("%v", this.TaskQueue), "TaskQueue", "v11.TaskQueue", 1) + `,`,
		`Input:` + strings.Replace(fmt.Sprintf("%v", this.Input), "Payloads", "v1.Payloads", 1) + `,`,
		`WorkflowRunTimeoutSeconds:` + fmt.Sprintf("%v", this.WorkflowRunTimeoutSeconds) + `,`,
		`WorkflowTaskTimeoutSeconds:` + fmt.Sprintf("%v", this.WorkflowTaskTimeoutSeconds) + `,`,
		`BackoffStartIntervalInSeconds:` + fmt.Sprintf("%v", this.BackoffStartIntervalInSeconds) + `,`,
		`RetryPolicy:` + strings.Replace(fmt.Sprintf("%v", this.RetryPolicy), "RetryPolicy", "v1.RetryPolicy", 1) + `,`,
		`Initiator:` + fmt.Sprintf("%v", this.Initiator) + `,`,
		`Failure:` + strings.Replace(fmt.Sprintf("%v", this.Failure), "Failure", "v12.Failure", 1) + `,`,
		`LastCompletionResult:` + strings.Replace(fmt.Sprintf("%v", this.LastCompletionResult), "Payloads", "v1.Payloads", 1) + `,`,
		`CronSchedule:` + fmt.Sprintf("%v", this.CronSchedule) + `,`,
		`Header:` + strings.Replace(fmt.Sprintf("%v", this.Header), "Header", "v1.Header", 1) + `,`,
		`Memo:` + strings.Replace(fmt.Sprintf("%v", this.Memo), "Memo", "v1.Memo", 1) + `,`,
		`SearchAttributes:` + strings.Replace(fmt.Sprintf("%v", this.SearchAttributes), "SearchAttributes", "v1.SearchAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StartChildWorkflowExecutionCommandAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StartChildWorkflowExecutionCommandAttributes{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`WorkflowId:` + fmt.Sprintf("%v", this.WorkflowId) + `,`,
		`WorkflowType:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowType), "WorkflowType", "v1.WorkflowType", 1) + `,`,
		`TaskQueue:` + strings.Replace(fmt.Sprintf("%v", this.TaskQueue), "TaskQueue", "v11.TaskQueue", 1) + `,`,
		`Input:` + strings.Replace(fmt.Sprintf("%v", this.Input), "Payloads", "v1.Payloads", 1) + `,`,
		`WorkflowExecutionTimeoutSeconds:` + fmt.Sprintf("%v", this.WorkflowExecutionTimeoutSeconds) + `,`,
		`WorkflowRunTimeoutSeconds:` + fmt.Sprintf("%v", this.WorkflowRunTimeoutSeconds) + `,`,
		`WorkflowTaskTimeoutSeconds:` + fmt.Sprintf("%v", this.WorkflowTaskTimeoutSeconds) + `,`,
		`ParentClosePolicy:` + fmt.Sprintf("%v", this.ParentClosePolicy) + `,`,
		`Control:` + fmt.Sprintf("%v", this.Control) + `,`,
		`WorkflowIdReusePolicy:` + fmt.Sprintf("%v", this.WorkflowIdReusePolicy) + `,`,
		`RetryPolicy:` + strings.Replace(fmt.Sprintf("%v", this.RetryPolicy), "RetryPolicy", "v1.RetryPolicy", 1) + `,`,
		`CronSchedule:` + fmt.Sprintf("%v", this.CronSchedule) + `,`,
		`Header:` + strings.Replace(fmt.Sprintf("%v", this.Header), "Header", "v1.Header", 1) + `,`,
		`Memo:` + strings.Replace(fmt.Sprintf("%v", this.Memo), "Memo", "v1.Memo", 1) + `,`,
		`SearchAttributes:` + strings.Replace(fmt.Sprintf("%v", this.SearchAttributes), "SearchAttributes", "v1.SearchAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Command) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Command{`,
		`CommandType:` + fmt.Sprintf("%v", this.CommandType) + `,`,
		`Attributes:` + fmt.Sprintf("%v", this.Attributes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Command_ScheduleActivityTaskCommandAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Command_ScheduleActivityTaskCommandAttributes{`,
		`ScheduleActivityTaskCommandAttributes:` + strings.Replace(fmt.Sprintf("%v", this.ScheduleActivityTaskCommandAttributes), "ScheduleActivityTaskCommandAttributes", "ScheduleActivityTaskCommandAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Command_StartTimerCommandAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Command_StartTimerCommandAttributes{`,
		`StartTimerCommandAttributes:` + strings.Replace(fmt.Sprintf("%v", this.StartTimerCommandAttributes), "StartTimerCommandAttributes", "StartTimerCommandAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Command_CompleteWorkflowExecutionCommandAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Command_CompleteWorkflowExecutionCommandAttributes{`,
		`CompleteWorkflowExecutionCommandAttributes:` + strings.Replace(fmt.Sprintf("%v", this.CompleteWorkflowExecutionCommandAttributes), "CompleteWorkflowExecutionCommandAttributes", "CompleteWorkflowExecutionCommandAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Command_FailWorkflowExecutionCommandAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Command_FailWorkflowExecutionCommandAttributes{`,
		`FailWorkflowExecutionCommandAttributes:` + strings.Replace(fmt.Sprintf("%v", this.FailWorkflowExecutionCommandAttributes), "FailWorkflowExecutionCommandAttributes", "FailWorkflowExecutionCommandAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Command_RequestCancelActivityTaskCommandAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Command_RequestCancelActivityTaskCommandAttributes{`,
		`RequestCancelActivityTaskCommandAttributes:` + strings.Replace(fmt.Sprintf("%v", this.RequestCancelActivityTaskCommandAttributes), "RequestCancelActivityTaskCommandAttributes", "RequestCancelActivityTaskCommandAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Command_CancelTimerCommandAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Command_CancelTimerCommandAttributes{`,
		`CancelTimerCommandAttributes:` + strings.Replace(fmt.Sprintf("%v", this.CancelTimerCommandAttributes), "CancelTimerCommandAttributes", "CancelTimerCommandAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Command_CancelWorkflowExecutionCommandAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Command_CancelWorkflowExecutionCommandAttributes{`,
		`CancelWorkflowExecutionCommandAttributes:` + strings.Replace(fmt.Sprintf("%v", this.CancelWorkflowExecutionCommandAttributes), "CancelWorkflowExecutionCommandAttributes", "CancelWorkflowExecutionCommandAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Command_RequestCancelExternalWorkflowExecutionCommandAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Command_RequestCancelExternalWorkflowExecutionCommandAttributes{`,
		`RequestCancelExternalWorkflowExecutionCommandAttributes:` + strings.Replace(fmt.Sprintf("%v", this.RequestCancelExternalWorkflowExecutionCommandAttributes), "RequestCancelExternalWorkflowExecutionCommandAttributes", "RequestCancelExternalWorkflowExecutionCommandAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Command_RecordMarkerCommandAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Command_RecordMarkerCommandAttributes{`,
		`RecordMarkerCommandAttributes:` + strings.Replace(fmt.Sprintf("%v", this.RecordMarkerCommandAttributes), "RecordMarkerCommandAttributes", "RecordMarkerCommandAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Command_ContinueAsNewWorkflowExecutionCommandAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Command_ContinueAsNewWorkflowExecutionCommandAttributes{`,
		`ContinueAsNewWorkflowExecutionCommandAttributes:` + strings.Replace(fmt.Sprintf("%v", this.ContinueAsNewWorkflowExecutionCommandAttributes), "ContinueAsNewWorkflowExecutionCommandAttributes", "ContinueAsNewWorkflowExecutionCommandAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Command_StartChildWorkflowExecutionCommandAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Command_StartChildWorkflowExecutionCommandAttributes{`,
		`StartChildWorkflowExecutionCommandAttributes:` + strings.Replace(fmt.Sprintf("%v", this.StartChildWorkflowExecutionCommandAttributes), "StartChildWorkflowExecutionCommandAttributes", "StartChildWorkflowExecutionCommandAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Command_SignalExternalWorkflowExecutionCommandAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Command_SignalExternalWorkflowExecutionCommandAttributes{`,
		`SignalExternalWorkflowExecutionCommandAttributes:` + strings.Replace(fmt.Sprintf("%v", this.SignalExternalWorkflowExecutionCommandAttributes), "SignalExternalWorkflowExecutionCommandAttributes", "SignalExternalWorkflowExecutionCommandAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Command_UpsertWorkflowSearchAttributesCommandAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Command_UpsertWorkflowSearchAttributesCommandAttributes{`,
		`UpsertWorkflowSearchAttributesCommandAttributes:` + strings.Replace(fmt.Sprintf("%v", this.UpsertWorkflowSearchAttributesCommandAttributes), "UpsertWorkflowSearchAttributesCommandAttributes", "UpsertWorkflowSearchAttributesCommandAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ScheduleActivityTaskCommandAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScheduleActivityTaskCommandAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScheduleActivityTaskCommandAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActivityType == nil {
				m.ActivityType = &v1.ActivityType{}
			}
			if err := m.ActivityType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskQueue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskQueue == nil {
				m.TaskQueue = &v11.TaskQueue{}
			}
			if err := m.TaskQueue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &v1.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Input == nil {
				m.Input = &v1.Payloads{}
			}
			if err := m.Input.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleToCloseTimeoutSeconds", wireType)
			}
			m.ScheduleToCloseTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduleToCloseTimeoutSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleToStartTimeoutSeconds", wireType)
			}
			m.ScheduleToStartTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduleToStartTimeoutSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartToCloseTimeoutSeconds", wireType)
			}
			m.StartToCloseTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartToCloseTimeoutSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatTimeoutSeconds", wireType)
			}
			m.HeartbeatTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeartbeatTimeoutSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RetryPolicy == nil {
				m.RetryPolicy = &v1.RetryPolicy{}
			}
			if err := m.RetryPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestCancelActivityTaskCommandAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestCancelActivityTaskCommandAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestCancelActivityTaskCommandAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledEventId", wireType)
			}
			m.ScheduledEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduledEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartTimerCommandAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartTimerCommandAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartTimerCommandAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartToFireTimeoutSeconds", wireType)
			}
			m.StartToFireTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartToFireTimeoutSeconds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompleteWorkflowExecutionCommandAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompleteWorkflowExecutionCommandAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompleteWorkflowExecutionCommandAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &v1.Payloads{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FailWorkflowExecutionCommandAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FailWorkflowExecutionCommandAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FailWorkflowExecutionCommandAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Failure == nil {
				m.Failure = &v12.Failure{}
			}
			if err := m.Failure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelTimerCommandAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelTimerCommandAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelTimerCommandAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelWorkflowExecutionCommandAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelWorkflowExecutionCommandAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelWorkflowExecutionCommandAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &v1.Payloads{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestCancelExternalWorkflowExecutionCommandAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestCancelExternalWorkflowExecutionCommandAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestCancelExternalWorkflowExecutionCommandAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Control", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Control = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildWorkflowOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChildWorkflowOnly = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignalExternalWorkflowExecutionCommandAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignalExternalWorkflowExecutionCommandAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignalExternalWorkflowExecutionCommandAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Execution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Execution == nil {
				m.Execution = &v1.WorkflowExecution{}
			}
			if err := m.Execution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignalName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Input == nil {
				m.Input = &v1.Payloads{}
			}
			if err := m.Input.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Control", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Control = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildWorkflowOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChildWorkflowOnly = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertWorkflowSearchAttributesCommandAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertWorkflowSearchAttributesCommandAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertWorkflowSearchAttributesCommandAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SearchAttributes == nil {
				m.SearchAttributes = &v1.SearchAttributes{}
			}
			if err := m.SearchAttributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordMarkerCommandAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordMarkerCommandAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordMarkerCommandAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarkerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarkerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = make(map[string]*v1.Payloads)
			}
			var mapkey string
			var mapvalue *v1.Payloads
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMessage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMessage
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMessage
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthMessage
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &v1.Payloads{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Details[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &v1.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Failure == nil {
				m.Failure = &v12.Failure{}
			}
			if err := m.Failure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContinueAsNewWorkflowExecutionCommandAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContinueAsNewWorkflowExecutionCommandAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContinueAsNewWorkflowExecutionCommandAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowType == nil {
				m.WorkflowType = &v1.WorkflowType{}
			}
			if err := m.WorkflowType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskQueue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskQueue == nil {
				m.TaskQueue = &v11.TaskQueue{}
			}
			if err := m.TaskQueue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Input == nil {
				m.Input = &v1.Payloads{}
			}
			if err := m.Input.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowRunTimeoutSeconds", wireType)
			}
			m.WorkflowRunTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkflowRunTimeoutSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowTaskTimeoutSeconds", wireType)
			}
			m.WorkflowTaskTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkflowTaskTimeoutSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackoffStartIntervalInSeconds", wireType)
			}
			m.BackoffStartIntervalInSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BackoffStartIntervalInSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RetryPolicy == nil {
				m.RetryPolicy = &v1.RetryPolicy{}
			}
			if err := m.RetryPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Initiator", wireType)
			}
			m.Initiator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Initiator |= v13.ContinueAsNewInitiator(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Failure == nil {
				m.Failure = &v12.Failure{}
			}
			if err := m.Failure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastCompletionResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastCompletionResult == nil {
				m.LastCompletionResult = &v1.Payloads{}
			}
			if err := m.LastCompletionResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CronSchedule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CronSchedule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &v1.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Memo == nil {
				m.Memo = &v1.Memo{}
			}
			if err := m.Memo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SearchAttributes == nil {
				m.SearchAttributes = &v1.SearchAttributes{}
			}
			if err := m.SearchAttributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartChildWorkflowExecutionCommandAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartChildWorkflowExecutionCommandAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartChildWorkflowExecutionCommandAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowType == nil {
				m.WorkflowType = &v1.WorkflowType{}
			}
			if err := m.WorkflowType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskQueue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskQueue == nil {
				m.TaskQueue = &v11.TaskQueue{}
			}
			if err := m.TaskQueue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Input == nil {
				m.Input = &v1.Payloads{}
			}
			if err := m.Input.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecutionTimeoutSeconds", wireType)
			}
			m.WorkflowExecutionTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkflowExecutionTimeoutSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowRunTimeoutSeconds", wireType)
			}
			m.WorkflowRunTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkflowRunTimeoutSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowTaskTimeoutSeconds", wireType)
			}
			m.WorkflowTaskTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkflowTaskTimeoutSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentClosePolicy", wireType)
			}
			m.ParentClosePolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentClosePolicy |= v13.ParentClosePolicy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Control", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Control = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowIdReusePolicy", wireType)
			}
			m.WorkflowIdReusePolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkflowIdReusePolicy |= v13.WorkflowIdReusePolicy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RetryPolicy == nil {
				m.RetryPolicy = &v1.RetryPolicy{}
			}
			if err := m.RetryPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CronSchedule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CronSchedule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &v1.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Memo == nil {
				m.Memo = &v1.Memo{}
			}
			if err := m.Memo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SearchAttributes == nil {
				m.SearchAttributes = &v1.SearchAttributes{}
			}
			if err := m.SearchAttributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Command) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Command: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Command: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommandType", wireType)
			}
			m.CommandType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommandType |= v13.CommandType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleActivityTaskCommandAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ScheduleActivityTaskCommandAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &Command_ScheduleActivityTaskCommandAttributes{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimerCommandAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StartTimerCommandAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &Command_StartTimerCommandAttributes{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteWorkflowExecutionCommandAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CompleteWorkflowExecutionCommandAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &Command_CompleteWorkflowExecutionCommandAttributes{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailWorkflowExecutionCommandAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FailWorkflowExecutionCommandAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &Command_FailWorkflowExecutionCommandAttributes{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestCancelActivityTaskCommandAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestCancelActivityTaskCommandAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &Command_RequestCancelActivityTaskCommandAttributes{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelTimerCommandAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CancelTimerCommandAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &Command_CancelTimerCommandAttributes{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelWorkflowExecutionCommandAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CancelWorkflowExecutionCommandAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &Command_CancelWorkflowExecutionCommandAttributes{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestCancelExternalWorkflowExecutionCommandAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestCancelExternalWorkflowExecutionCommandAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &Command_RequestCancelExternalWorkflowExecutionCommandAttributes{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordMarkerCommandAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RecordMarkerCommandAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &Command_RecordMarkerCommandAttributes{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContinueAsNewWorkflowExecutionCommandAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ContinueAsNewWorkflowExecutionCommandAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &Command_ContinueAsNewWorkflowExecutionCommandAttributes{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartChildWorkflowExecutionCommandAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StartChildWorkflowExecutionCommandAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &Command_StartChildWorkflowExecutionCommandAttributes{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalExternalWorkflowExecutionCommandAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SignalExternalWorkflowExecutionCommandAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &Command_SignalExternalWorkflowExecutionCommandAttributes{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpsertWorkflowSearchAttributesCommandAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpsertWorkflowSearchAttributesCommandAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &Command_UpsertWorkflowSearchAttributesCommandAttributes{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)

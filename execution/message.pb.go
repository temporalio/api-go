// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: execution/message.proto

package execution

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	common "go.temporal.io/temporal-proto/common"
	failure "go.temporal.io/temporal-proto/failure"
	tasklist "go.temporal.io/temporal-proto/tasklist"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type WorkflowExecutionInfo struct {
	Execution         *common.WorkflowExecution `protobuf:"bytes,1,opt,name=execution,proto3" json:"execution,omitempty"`
	Type              *common.WorkflowType      `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	StartTime         *types.Int64Value         `protobuf:"bytes,3,opt,name=startTime,proto3" json:"startTime,omitempty"`
	CloseTime         *types.Int64Value         `protobuf:"bytes,4,opt,name=closeTime,proto3" json:"closeTime,omitempty"`
	Status            WorkflowExecutionStatus   `protobuf:"varint,5,opt,name=status,proto3,enum=execution.WorkflowExecutionStatus" json:"status,omitempty"`
	HistoryLength     int64                     `protobuf:"varint,6,opt,name=historyLength,proto3" json:"historyLength,omitempty"`
	ParentNamespaceId string                    `protobuf:"bytes,7,opt,name=parentNamespaceId,proto3" json:"parentNamespaceId,omitempty"`
	ParentExecution   *common.WorkflowExecution `protobuf:"bytes,8,opt,name=parentExecution,proto3" json:"parentExecution,omitempty"`
	ExecutionTime     int64                     `protobuf:"varint,9,opt,name=executionTime,proto3" json:"executionTime,omitempty"`
	Memo              *common.Memo              `protobuf:"bytes,10,opt,name=memo,proto3" json:"memo,omitempty"`
	SearchAttributes  *common.SearchAttributes  `protobuf:"bytes,11,opt,name=searchAttributes,proto3" json:"searchAttributes,omitempty"`
	AutoResetPoints   *ResetPoints              `protobuf:"bytes,12,opt,name=autoResetPoints,proto3" json:"autoResetPoints,omitempty"`
	TaskList          string                    `protobuf:"bytes,13,opt,name=taskList,proto3" json:"taskList,omitempty"`
}

func (m *WorkflowExecutionInfo) Reset()      { *m = WorkflowExecutionInfo{} }
func (*WorkflowExecutionInfo) ProtoMessage() {}
func (*WorkflowExecutionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d24648e509083b5, []int{0}
}
func (m *WorkflowExecutionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowExecutionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowExecutionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowExecutionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowExecutionInfo.Merge(m, src)
}
func (m *WorkflowExecutionInfo) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowExecutionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowExecutionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowExecutionInfo proto.InternalMessageInfo

func (m *WorkflowExecutionInfo) GetExecution() *common.WorkflowExecution {
	if m != nil {
		return m.Execution
	}
	return nil
}

func (m *WorkflowExecutionInfo) GetType() *common.WorkflowType {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *WorkflowExecutionInfo) GetStartTime() *types.Int64Value {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *WorkflowExecutionInfo) GetCloseTime() *types.Int64Value {
	if m != nil {
		return m.CloseTime
	}
	return nil
}

func (m *WorkflowExecutionInfo) GetStatus() WorkflowExecutionStatus {
	if m != nil {
		return m.Status
	}
	return WORKFLOW_EXECUTION_STATUS_UNSPECIFIED
}

func (m *WorkflowExecutionInfo) GetHistoryLength() int64 {
	if m != nil {
		return m.HistoryLength
	}
	return 0
}

func (m *WorkflowExecutionInfo) GetParentNamespaceId() string {
	if m != nil {
		return m.ParentNamespaceId
	}
	return ""
}

func (m *WorkflowExecutionInfo) GetParentExecution() *common.WorkflowExecution {
	if m != nil {
		return m.ParentExecution
	}
	return nil
}

func (m *WorkflowExecutionInfo) GetExecutionTime() int64 {
	if m != nil {
		return m.ExecutionTime
	}
	return 0
}

func (m *WorkflowExecutionInfo) GetMemo() *common.Memo {
	if m != nil {
		return m.Memo
	}
	return nil
}

func (m *WorkflowExecutionInfo) GetSearchAttributes() *common.SearchAttributes {
	if m != nil {
		return m.SearchAttributes
	}
	return nil
}

func (m *WorkflowExecutionInfo) GetAutoResetPoints() *ResetPoints {
	if m != nil {
		return m.AutoResetPoints
	}
	return nil
}

func (m *WorkflowExecutionInfo) GetTaskList() string {
	if m != nil {
		return m.TaskList
	}
	return ""
}

type WorkflowExecutionConfiguration struct {
	TaskList                        *tasklist.TaskList `protobuf:"bytes,1,opt,name=taskList,proto3" json:"taskList,omitempty"`
	WorkflowExecutionTimeoutSeconds int32              `protobuf:"varint,2,opt,name=workflowExecutionTimeoutSeconds,proto3" json:"workflowExecutionTimeoutSeconds,omitempty"`
	WorkflowRunTimeoutSeconds       int32              `protobuf:"varint,3,opt,name=workflowRunTimeoutSeconds,proto3" json:"workflowRunTimeoutSeconds,omitempty"`
	WorkflowTaskTimeoutSeconds      int32              `protobuf:"varint,4,opt,name=workflowTaskTimeoutSeconds,proto3" json:"workflowTaskTimeoutSeconds,omitempty"`
}

func (m *WorkflowExecutionConfiguration) Reset()      { *m = WorkflowExecutionConfiguration{} }
func (*WorkflowExecutionConfiguration) ProtoMessage() {}
func (*WorkflowExecutionConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d24648e509083b5, []int{1}
}
func (m *WorkflowExecutionConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowExecutionConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowExecutionConfiguration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowExecutionConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowExecutionConfiguration.Merge(m, src)
}
func (m *WorkflowExecutionConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowExecutionConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowExecutionConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowExecutionConfiguration proto.InternalMessageInfo

func (m *WorkflowExecutionConfiguration) GetTaskList() *tasklist.TaskList {
	if m != nil {
		return m.TaskList
	}
	return nil
}

func (m *WorkflowExecutionConfiguration) GetWorkflowExecutionTimeoutSeconds() int32 {
	if m != nil {
		return m.WorkflowExecutionTimeoutSeconds
	}
	return 0
}

func (m *WorkflowExecutionConfiguration) GetWorkflowRunTimeoutSeconds() int32 {
	if m != nil {
		return m.WorkflowRunTimeoutSeconds
	}
	return 0
}

func (m *WorkflowExecutionConfiguration) GetWorkflowTaskTimeoutSeconds() int32 {
	if m != nil {
		return m.WorkflowTaskTimeoutSeconds
	}
	return 0
}

type PendingActivityInfo struct {
	ActivityId             string               `protobuf:"bytes,1,opt,name=activityId,proto3" json:"activityId,omitempty"`
	ActivityType           *common.ActivityType `protobuf:"bytes,2,opt,name=activityType,proto3" json:"activityType,omitempty"`
	State                  PendingActivityState `protobuf:"varint,3,opt,name=state,proto3,enum=execution.PendingActivityState" json:"state,omitempty"`
	HeartbeatDetails       *common.Payloads     `protobuf:"bytes,4,opt,name=heartbeatDetails,proto3" json:"heartbeatDetails,omitempty"`
	LastHeartbeatTimestamp int64                `protobuf:"varint,5,opt,name=lastHeartbeatTimestamp,proto3" json:"lastHeartbeatTimestamp,omitempty"`
	LastStartedTimestamp   int64                `protobuf:"varint,6,opt,name=lastStartedTimestamp,proto3" json:"lastStartedTimestamp,omitempty"`
	Attempt                int32                `protobuf:"varint,7,opt,name=attempt,proto3" json:"attempt,omitempty"`
	MaximumAttempts        int32                `protobuf:"varint,8,opt,name=maximumAttempts,proto3" json:"maximumAttempts,omitempty"`
	ScheduledTimestamp     int64                `protobuf:"varint,9,opt,name=scheduledTimestamp,proto3" json:"scheduledTimestamp,omitempty"`
	ExpirationTimestamp    int64                `protobuf:"varint,10,opt,name=expirationTimestamp,proto3" json:"expirationTimestamp,omitempty"`
	LastFailure            *failure.Failure     `protobuf:"bytes,11,opt,name=lastFailure,proto3" json:"lastFailure,omitempty"`
	LastWorkerIdentity     string               `protobuf:"bytes,12,opt,name=lastWorkerIdentity,proto3" json:"lastWorkerIdentity,omitempty"`
}

func (m *PendingActivityInfo) Reset()      { *m = PendingActivityInfo{} }
func (*PendingActivityInfo) ProtoMessage() {}
func (*PendingActivityInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d24648e509083b5, []int{2}
}
func (m *PendingActivityInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingActivityInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendingActivityInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PendingActivityInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingActivityInfo.Merge(m, src)
}
func (m *PendingActivityInfo) XXX_Size() int {
	return m.Size()
}
func (m *PendingActivityInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingActivityInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PendingActivityInfo proto.InternalMessageInfo

func (m *PendingActivityInfo) GetActivityId() string {
	if m != nil {
		return m.ActivityId
	}
	return ""
}

func (m *PendingActivityInfo) GetActivityType() *common.ActivityType {
	if m != nil {
		return m.ActivityType
	}
	return nil
}

func (m *PendingActivityInfo) GetState() PendingActivityState {
	if m != nil {
		return m.State
	}
	return PENDING_ACTIVITY_STATE_UNSPECIFIED
}

func (m *PendingActivityInfo) GetHeartbeatDetails() *common.Payloads {
	if m != nil {
		return m.HeartbeatDetails
	}
	return nil
}

func (m *PendingActivityInfo) GetLastHeartbeatTimestamp() int64 {
	if m != nil {
		return m.LastHeartbeatTimestamp
	}
	return 0
}

func (m *PendingActivityInfo) GetLastStartedTimestamp() int64 {
	if m != nil {
		return m.LastStartedTimestamp
	}
	return 0
}

func (m *PendingActivityInfo) GetAttempt() int32 {
	if m != nil {
		return m.Attempt
	}
	return 0
}

func (m *PendingActivityInfo) GetMaximumAttempts() int32 {
	if m != nil {
		return m.MaximumAttempts
	}
	return 0
}

func (m *PendingActivityInfo) GetScheduledTimestamp() int64 {
	if m != nil {
		return m.ScheduledTimestamp
	}
	return 0
}

func (m *PendingActivityInfo) GetExpirationTimestamp() int64 {
	if m != nil {
		return m.ExpirationTimestamp
	}
	return 0
}

func (m *PendingActivityInfo) GetLastFailure() *failure.Failure {
	if m != nil {
		return m.LastFailure
	}
	return nil
}

func (m *PendingActivityInfo) GetLastWorkerIdentity() string {
	if m != nil {
		return m.LastWorkerIdentity
	}
	return ""
}

type PendingChildExecutionInfo struct {
	WorkflowId        string                   `protobuf:"bytes,1,opt,name=workflowId,proto3" json:"workflowId,omitempty"`
	RunId             string                   `protobuf:"bytes,2,opt,name=runId,proto3" json:"runId,omitempty"`
	WorkflowTypName   string                   `protobuf:"bytes,3,opt,name=workflowTypName,proto3" json:"workflowTypName,omitempty"`
	InitiatedId       int64                    `protobuf:"varint,4,opt,name=initiatedId,proto3" json:"initiatedId,omitempty"`
	ParentClosePolicy common.ParentClosePolicy `protobuf:"varint,5,opt,name=parentClosePolicy,proto3,enum=common.ParentClosePolicy" json:"parentClosePolicy,omitempty"`
}

func (m *PendingChildExecutionInfo) Reset()      { *m = PendingChildExecutionInfo{} }
func (*PendingChildExecutionInfo) ProtoMessage() {}
func (*PendingChildExecutionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d24648e509083b5, []int{3}
}
func (m *PendingChildExecutionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingChildExecutionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendingChildExecutionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PendingChildExecutionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingChildExecutionInfo.Merge(m, src)
}
func (m *PendingChildExecutionInfo) XXX_Size() int {
	return m.Size()
}
func (m *PendingChildExecutionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingChildExecutionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PendingChildExecutionInfo proto.InternalMessageInfo

func (m *PendingChildExecutionInfo) GetWorkflowId() string {
	if m != nil {
		return m.WorkflowId
	}
	return ""
}

func (m *PendingChildExecutionInfo) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

func (m *PendingChildExecutionInfo) GetWorkflowTypName() string {
	if m != nil {
		return m.WorkflowTypName
	}
	return ""
}

func (m *PendingChildExecutionInfo) GetInitiatedId() int64 {
	if m != nil {
		return m.InitiatedId
	}
	return 0
}

func (m *PendingChildExecutionInfo) GetParentClosePolicy() common.ParentClosePolicy {
	if m != nil {
		return m.ParentClosePolicy
	}
	return common.PARENT_CLOSE_POLICY_UNSPECIFIED
}

type ResetPoints struct {
	Points []*ResetPointInfo `protobuf:"bytes,1,rep,name=points,proto3" json:"points,omitempty"`
}

func (m *ResetPoints) Reset()      { *m = ResetPoints{} }
func (*ResetPoints) ProtoMessage() {}
func (*ResetPoints) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d24648e509083b5, []int{4}
}
func (m *ResetPoints) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResetPoints) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResetPoints.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResetPoints) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResetPoints.Merge(m, src)
}
func (m *ResetPoints) XXX_Size() int {
	return m.Size()
}
func (m *ResetPoints) XXX_DiscardUnknown() {
	xxx_messageInfo_ResetPoints.DiscardUnknown(m)
}

var xxx_messageInfo_ResetPoints proto.InternalMessageInfo

func (m *ResetPoints) GetPoints() []*ResetPointInfo {
	if m != nil {
		return m.Points
	}
	return nil
}

type ResetPointInfo struct {
	BinaryChecksum           string `protobuf:"bytes,1,opt,name=binaryChecksum,proto3" json:"binaryChecksum,omitempty"`
	RunId                    string `protobuf:"bytes,2,opt,name=runId,proto3" json:"runId,omitempty"`
	FirstDecisionCompletedId int64  `protobuf:"varint,3,opt,name=firstDecisionCompletedId,proto3" json:"firstDecisionCompletedId,omitempty"`
	CreatedTimeNano          int64  `protobuf:"varint,4,opt,name=createdTimeNano,proto3" json:"createdTimeNano,omitempty"`
	// The time that the run is deleted due to retention.
	ExpiringTimeNano int64 `protobuf:"varint,5,opt,name=expiringTimeNano,proto3" json:"expiringTimeNano,omitempty"`
	// false if the reset point has pending childWFs/reqCancels/signalExternals.
	Resettable bool `protobuf:"varint,6,opt,name=resettable,proto3" json:"resettable,omitempty"`
}

func (m *ResetPointInfo) Reset()      { *m = ResetPointInfo{} }
func (*ResetPointInfo) ProtoMessage() {}
func (*ResetPointInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d24648e509083b5, []int{5}
}
func (m *ResetPointInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResetPointInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResetPointInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResetPointInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResetPointInfo.Merge(m, src)
}
func (m *ResetPointInfo) XXX_Size() int {
	return m.Size()
}
func (m *ResetPointInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ResetPointInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ResetPointInfo proto.InternalMessageInfo

func (m *ResetPointInfo) GetBinaryChecksum() string {
	if m != nil {
		return m.BinaryChecksum
	}
	return ""
}

func (m *ResetPointInfo) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

func (m *ResetPointInfo) GetFirstDecisionCompletedId() int64 {
	if m != nil {
		return m.FirstDecisionCompletedId
	}
	return 0
}

func (m *ResetPointInfo) GetCreatedTimeNano() int64 {
	if m != nil {
		return m.CreatedTimeNano
	}
	return 0
}

func (m *ResetPointInfo) GetExpiringTimeNano() int64 {
	if m != nil {
		return m.ExpiringTimeNano
	}
	return 0
}

func (m *ResetPointInfo) GetResettable() bool {
	if m != nil {
		return m.Resettable
	}
	return false
}

func init() {
	proto.RegisterType((*WorkflowExecutionInfo)(nil), "execution.WorkflowExecutionInfo")
	proto.RegisterType((*WorkflowExecutionConfiguration)(nil), "execution.WorkflowExecutionConfiguration")
	proto.RegisterType((*PendingActivityInfo)(nil), "execution.PendingActivityInfo")
	proto.RegisterType((*PendingChildExecutionInfo)(nil), "execution.PendingChildExecutionInfo")
	proto.RegisterType((*ResetPoints)(nil), "execution.ResetPoints")
	proto.RegisterType((*ResetPointInfo)(nil), "execution.ResetPointInfo")
}

func init() { proto.RegisterFile("execution/message.proto", fileDescriptor_9d24648e509083b5) }

var fileDescriptor_9d24648e509083b5 = []byte{
	// 1033 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0x41, 0x6f, 0xe3, 0x44,
	0x14, 0x8e, 0x37, 0x4d, 0xb7, 0x79, 0xed, 0xb6, 0xdd, 0xd9, 0x6c, 0x71, 0xb3, 0x92, 0x37, 0x8a,
	0x10, 0x44, 0x08, 0x1c, 0x08, 0xb0, 0xc0, 0x6a, 0x85, 0xb6, 0xa4, 0xc0, 0x46, 0x5a, 0x56, 0xd1,
	0xb4, 0x02, 0x89, 0xdb, 0xc4, 0x9e, 0x24, 0xa3, 0xda, 0x1e, 0xcb, 0x33, 0xa6, 0x8d, 0xc4, 0x61,
	0x7f, 0x02, 0x47, 0x7e, 0x02, 0x57, 0xfe, 0x05, 0xc7, 0x1e, 0x57, 0x9c, 0x68, 0x2a, 0x21, 0x8e,
	0xfb, 0x13, 0xd0, 0x8c, 0xed, 0xd8, 0x71, 0x52, 0x96, 0x5b, 0xe6, 0xfb, 0xbe, 0x37, 0x79, 0xfe,
	0xfc, 0xbe, 0x67, 0x78, 0x8b, 0x5e, 0x50, 0x27, 0x96, 0x8c, 0x07, 0x5d, 0x9f, 0x0a, 0x41, 0x26,
	0xd4, 0x0e, 0x23, 0x2e, 0x39, 0xaa, 0x2f, 0x88, 0x66, 0x23, 0xd7, 0xd0, 0x20, 0xf6, 0x13, 0x41,
	0xf3, 0xae, 0xc3, 0x7d, 0x7f, 0x19, 0x6a, 0xa4, 0xd0, 0xd2, 0x4d, 0xcd, 0xfb, 0x63, 0xc2, 0xbc,
	0x38, 0xa2, 0x25, 0xf8, 0x40, 0x12, 0x71, 0xe6, 0x31, 0x21, 0x4b, 0xb8, 0x35, 0xe1, 0x7c, 0xe2,
	0xd1, 0xae, 0x3e, 0x8d, 0xe2, 0x71, 0xf7, 0x3c, 0x22, 0x61, 0x48, 0x23, 0x91, 0xf0, 0xed, 0xdf,
	0x6b, 0x70, 0xff, 0x07, 0x1e, 0x9d, 0x8d, 0x3d, 0x7e, 0xfe, 0x75, 0xd6, 0xd8, 0x20, 0x18, 0x73,
	0xf4, 0x19, 0xe4, 0x4d, 0x9b, 0x46, 0xcb, 0xe8, 0x6c, 0xf7, 0x0e, 0xed, 0xa4, 0x25, 0x7b, 0xa5,
	0x02, 0xe7, 0x5a, 0xd4, 0x81, 0x0d, 0x39, 0x0b, 0xa9, 0x79, 0x4b, 0xd7, 0x34, 0xca, 0x35, 0xa7,
	0xb3, 0x90, 0x62, 0xad, 0x40, 0x5f, 0x40, 0x5d, 0x48, 0x12, 0xc9, 0x53, 0xe6, 0x53, 0xb3, 0xaa,
	0xe5, 0x0f, 0xec, 0xa4, 0x61, 0x3b, 0x6b, 0xd8, 0x1e, 0x04, 0xf2, 0xd1, 0x27, 0xdf, 0x13, 0x2f,
	0xa6, 0x38, 0x57, 0xab, 0x52, 0xc7, 0xe3, 0x82, 0xea, 0xd2, 0x8d, 0xff, 0x51, 0xba, 0x50, 0xa3,
	0xc7, 0xb0, 0x29, 0x24, 0x91, 0xb1, 0x30, 0x6b, 0x2d, 0xa3, 0xb3, 0xdb, 0x6b, 0xdb, 0x8b, 0xde,
	0x57, 0x1f, 0xec, 0x44, 0x2b, 0x71, 0x5a, 0x81, 0xde, 0x86, 0x3b, 0x53, 0x26, 0x24, 0x8f, 0x66,
	0xcf, 0x69, 0x30, 0x91, 0x53, 0x73, 0xb3, 0x65, 0x74, 0xaa, 0x78, 0x19, 0x44, 0xef, 0xc3, 0xdd,
	0x90, 0x44, 0x34, 0x90, 0x2f, 0x88, 0x4f, 0x45, 0x48, 0x1c, 0x3a, 0x70, 0xcd, 0xdb, 0x2d, 0xa3,
	0x53, 0xc7, 0xab, 0x04, 0xea, 0xc3, 0x5e, 0x02, 0x2e, 0xfe, 0xd4, 0xdc, 0x7a, 0x93, 0xdd, 0xe5,
	0x0a, 0xd5, 0xd8, 0xe2, 0x29, 0xb4, 0x27, 0xf5, 0xa4, 0xb1, 0x25, 0x10, 0xb5, 0x60, 0xc3, 0xa7,
	0x3e, 0x37, 0x41, 0xdf, 0xbf, 0x93, 0xdd, 0xff, 0x1d, 0xf5, 0x39, 0xd6, 0x0c, 0x3a, 0x86, 0x7d,
	0x41, 0x49, 0xe4, 0x4c, 0x8f, 0xa4, 0x8c, 0xd8, 0x28, 0x96, 0x54, 0x98, 0xdb, 0x5a, 0x6d, 0x66,
	0xea, 0x93, 0x12, 0x8f, 0x57, 0x2a, 0xd0, 0x53, 0xd8, 0x23, 0xb1, 0xe4, 0x98, 0x0a, 0x2a, 0x87,
	0x9c, 0x05, 0x52, 0x98, 0x3b, 0xfa, 0x92, 0x83, 0x82, 0xd7, 0x05, 0x16, 0x97, 0xe5, 0xa8, 0x09,
	0x5b, 0x6a, 0xa2, 0x9f, 0x33, 0x21, 0xcd, 0x3b, 0xda, 0xb9, 0xc5, 0xb9, 0xfd, 0xeb, 0x2d, 0xb0,
	0x56, 0x2c, 0xe9, 0xf3, 0x60, 0xcc, 0x26, 0x71, 0x44, 0xb4, 0x1d, 0x76, 0xa1, 0x3c, 0x99, 0x5d,
	0x64, 0x67, 0x09, 0xb1, 0x4f, 0x53, 0x26, 0xbf, 0x12, 0x3d, 0x83, 0x87, 0xe7, 0xe5, 0x1b, 0x95,
	0x63, 0x3c, 0x96, 0x27, 0xd4, 0xe1, 0x81, 0x2b, 0xf4, 0x38, 0xd7, 0xf0, 0x9b, 0x64, 0xe8, 0x09,
	0x1c, 0x66, 0x12, 0x1c, 0x97, 0xef, 0xa8, 0xea, 0x3b, 0x6e, 0x16, 0xa0, 0x2f, 0xa1, 0x99, 0x91,
	0xaa, 0xcb, 0x52, 0xf9, 0x86, 0x2e, 0xff, 0x0f, 0x45, 0xfb, 0xcf, 0x0d, 0xb8, 0x37, 0xa4, 0x81,
	0xcb, 0x82, 0xc9, 0x91, 0x23, 0xd9, 0x4f, 0x4c, 0xce, 0x74, 0x98, 0x2d, 0x00, 0x92, 0x9d, 0x5d,
	0xed, 0x48, 0x1d, 0x17, 0x10, 0xf4, 0x39, 0xec, 0x64, 0xa7, 0xd3, 0x35, 0xd9, 0x3d, 0x2a, 0x70,
	0x78, 0x49, 0x89, 0x3e, 0x85, 0x9a, 0xca, 0x46, 0x92, 0xdf, 0xdd, 0xde, 0xc3, 0xc2, 0x0b, 0x2e,
	0x35, 0xa2, 0xa2, 0x44, 0x71, 0xa2, 0x46, 0x4f, 0x60, 0x7f, 0x4a, 0x49, 0x24, 0x47, 0x94, 0xc8,
	0x63, 0x2a, 0x09, 0xf3, 0x44, 0x1a, 0xe3, 0xfd, 0xec, 0x4f, 0x87, 0x64, 0xe6, 0x71, 0xe2, 0x0a,
	0xbc, 0xa2, 0x44, 0x8f, 0xe0, 0xc0, 0x23, 0x42, 0x3e, 0xcb, 0x70, 0xe5, 0x82, 0x90, 0xc4, 0x0f,
	0x75, 0xa4, 0xab, 0xf8, 0x06, 0x16, 0xf5, 0xa0, 0xa1, 0x98, 0x13, 0xb5, 0x46, 0xa8, 0x9b, 0x57,
	0x25, 0x29, 0x5e, 0xcb, 0x21, 0x13, 0x6e, 0x13, 0x29, 0xa9, 0x1f, 0x4a, 0x1d, 0xe1, 0x1a, 0xce,
	0x8e, 0xa8, 0x03, 0x7b, 0x3e, 0xb9, 0x60, 0x7e, 0xec, 0x1f, 0x25, 0x88, 0xd0, 0xc1, 0xad, 0xe1,
	0x32, 0x8c, 0x6c, 0x40, 0xc2, 0x99, 0x52, 0x37, 0xf6, 0x8a, 0xff, 0x9a, 0x44, 0x74, 0x0d, 0x83,
	0x3e, 0x84, 0x7b, 0xf4, 0x22, 0x64, 0xc9, 0x30, 0xe7, 0x05, 0xa0, 0x0b, 0xd6, 0x51, 0xa8, 0x07,
	0xdb, 0xaa, 0xfb, 0x6f, 0x92, 0x8f, 0x43, 0x1a, 0xd9, 0x7d, 0x3b, 0xfd, 0x58, 0xd8, 0x29, 0x8e,
	0x8b, 0x22, 0xd5, 0x95, 0x3a, 0xaa, 0x28, 0xd1, 0x68, 0xe0, 0xd2, 0x40, 0x32, 0x39, 0xd3, 0x41,
	0xad, 0xe3, 0x35, 0x4c, 0xfb, 0x6f, 0x03, 0x0e, 0xd3, 0x77, 0xda, 0x9f, 0x32, 0xcf, 0x5d, 0xfe,
	0x5e, 0x58, 0x00, 0xd9, 0x60, 0xe6, 0x23, 0x96, 0x23, 0xa8, 0x01, 0xb5, 0x28, 0x0e, 0x06, 0xae,
	0x9e, 0xad, 0x3a, 0x4e, 0x0e, 0xca, 0xc3, 0xf3, 0xfc, 0xc3, 0xa0, 0xd6, 0xa2, 0x1e, 0xa4, 0x3a,
	0x2e, 0xc3, 0xa8, 0x05, 0xdb, 0x2c, 0x60, 0x92, 0x11, 0x49, 0xdd, 0x81, 0xab, 0x87, 0xa5, 0x8a,
	0x8b, 0x10, 0xfa, 0x36, 0x5b, 0xbb, 0x7d, 0xb5, 0xeb, 0x87, 0xdc, 0x63, 0xce, 0x2c, 0xdd, 0xf1,
	0x87, 0xf9, 0x50, 0x95, 0x04, 0x78, 0xb5, 0xa6, 0xfd, 0x14, 0xb6, 0x8b, 0xbb, 0xe8, 0x23, 0xd8,
	0x0c, 0x93, 0x25, 0x66, 0xb4, 0xaa, 0x7a, 0x2f, 0xaf, 0x5b, 0x62, 0xca, 0x04, 0x9c, 0x0a, 0xdb,
	0x2f, 0x6f, 0xc1, 0xee, 0x32, 0x85, 0xde, 0x81, 0xdd, 0x11, 0x0b, 0x48, 0x34, 0xeb, 0x4f, 0xa9,
	0x73, 0x26, 0x62, 0x3f, 0xf5, 0xa8, 0x84, 0xde, 0xe0, 0xd3, 0x63, 0x30, 0xc7, 0x2c, 0x12, 0xf2,
	0x98, 0x3a, 0x4c, 0xe8, 0x75, 0xe7, 0x87, 0x1e, 0x4d, 0xac, 0xa8, 0x6a, 0x2b, 0x6e, 0xe4, 0x95,
	0xc7, 0x4e, 0x44, 0x49, 0x3a, 0xd5, 0x2f, 0x48, 0xc0, 0x53, 0xf7, 0xca, 0x30, 0x7a, 0x0f, 0xf6,
	0xf5, 0x70, 0xb1, 0x60, 0xb2, 0x90, 0x26, 0x89, 0x5a, 0xc1, 0xd5, 0xfb, 0x8e, 0xd4, 0x13, 0x4a,
	0x32, 0xf2, 0xa8, 0x4e, 0xd0, 0x16, 0x2e, 0x20, 0x5f, 0xfd, 0x7c, 0x79, 0x65, 0x55, 0x5e, 0x5d,
	0x59, 0x95, 0xd7, 0x57, 0x96, 0xf1, 0x72, 0x6e, 0x19, 0xbf, 0xcd, 0x2d, 0xe3, 0x8f, 0xb9, 0x65,
	0x5c, 0xce, 0x2d, 0xe3, 0xaf, 0xb9, 0x65, 0xfc, 0x33, 0xb7, 0x2a, 0xaf, 0xe7, 0x96, 0xf1, 0xcb,
	0xb5, 0x55, 0xb9, 0xbc, 0xb6, 0x2a, 0xaf, 0xae, 0xad, 0x0a, 0x3c, 0x60, 0xdc, 0x56, 0xa1, 0xe1,
	0x11, 0xf1, 0x92, 0x0f, 0x79, 0x6e, 0xf6, 0xd0, 0xf8, 0xf1, 0xdd, 0x49, 0x81, 0x66, 0xbc, 0x9b,
	0xfd, 0xfe, 0x40, 0x4b, 0xbb, 0x0b, 0xe9, 0x68, 0x53, 0x03, 0x1f, 0xff, 0x1b, 0x00, 0x00, 0xff,
	0xff, 0x72, 0x1f, 0x87, 0x8b, 0x92, 0x09, 0x00, 0x00,
}

func (this *WorkflowExecutionInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkflowExecutionInfo)
	if !ok {
		that2, ok := that.(WorkflowExecutionInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Execution.Equal(that1.Execution) {
		return false
	}
	if !this.Type.Equal(that1.Type) {
		return false
	}
	if !this.StartTime.Equal(that1.StartTime) {
		return false
	}
	if !this.CloseTime.Equal(that1.CloseTime) {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.HistoryLength != that1.HistoryLength {
		return false
	}
	if this.ParentNamespaceId != that1.ParentNamespaceId {
		return false
	}
	if !this.ParentExecution.Equal(that1.ParentExecution) {
		return false
	}
	if this.ExecutionTime != that1.ExecutionTime {
		return false
	}
	if !this.Memo.Equal(that1.Memo) {
		return false
	}
	if !this.SearchAttributes.Equal(that1.SearchAttributes) {
		return false
	}
	if !this.AutoResetPoints.Equal(that1.AutoResetPoints) {
		return false
	}
	if this.TaskList != that1.TaskList {
		return false
	}
	return true
}
func (this *WorkflowExecutionConfiguration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkflowExecutionConfiguration)
	if !ok {
		that2, ok := that.(WorkflowExecutionConfiguration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TaskList.Equal(that1.TaskList) {
		return false
	}
	if this.WorkflowExecutionTimeoutSeconds != that1.WorkflowExecutionTimeoutSeconds {
		return false
	}
	if this.WorkflowRunTimeoutSeconds != that1.WorkflowRunTimeoutSeconds {
		return false
	}
	if this.WorkflowTaskTimeoutSeconds != that1.WorkflowTaskTimeoutSeconds {
		return false
	}
	return true
}
func (this *PendingActivityInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PendingActivityInfo)
	if !ok {
		that2, ok := that.(PendingActivityInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ActivityId != that1.ActivityId {
		return false
	}
	if !this.ActivityType.Equal(that1.ActivityType) {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if !this.HeartbeatDetails.Equal(that1.HeartbeatDetails) {
		return false
	}
	if this.LastHeartbeatTimestamp != that1.LastHeartbeatTimestamp {
		return false
	}
	if this.LastStartedTimestamp != that1.LastStartedTimestamp {
		return false
	}
	if this.Attempt != that1.Attempt {
		return false
	}
	if this.MaximumAttempts != that1.MaximumAttempts {
		return false
	}
	if this.ScheduledTimestamp != that1.ScheduledTimestamp {
		return false
	}
	if this.ExpirationTimestamp != that1.ExpirationTimestamp {
		return false
	}
	if !this.LastFailure.Equal(that1.LastFailure) {
		return false
	}
	if this.LastWorkerIdentity != that1.LastWorkerIdentity {
		return false
	}
	return true
}
func (this *PendingChildExecutionInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PendingChildExecutionInfo)
	if !ok {
		that2, ok := that.(PendingChildExecutionInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.WorkflowId != that1.WorkflowId {
		return false
	}
	if this.RunId != that1.RunId {
		return false
	}
	if this.WorkflowTypName != that1.WorkflowTypName {
		return false
	}
	if this.InitiatedId != that1.InitiatedId {
		return false
	}
	if this.ParentClosePolicy != that1.ParentClosePolicy {
		return false
	}
	return true
}
func (this *ResetPoints) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResetPoints)
	if !ok {
		that2, ok := that.(ResetPoints)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Points) != len(that1.Points) {
		return false
	}
	for i := range this.Points {
		if !this.Points[i].Equal(that1.Points[i]) {
			return false
		}
	}
	return true
}
func (this *ResetPointInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResetPointInfo)
	if !ok {
		that2, ok := that.(ResetPointInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BinaryChecksum != that1.BinaryChecksum {
		return false
	}
	if this.RunId != that1.RunId {
		return false
	}
	if this.FirstDecisionCompletedId != that1.FirstDecisionCompletedId {
		return false
	}
	if this.CreatedTimeNano != that1.CreatedTimeNano {
		return false
	}
	if this.ExpiringTimeNano != that1.ExpiringTimeNano {
		return false
	}
	if this.Resettable != that1.Resettable {
		return false
	}
	return true
}
func (this *WorkflowExecutionInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&execution.WorkflowExecutionInfo{")
	if this.Execution != nil {
		s = append(s, "Execution: "+fmt.Sprintf("%#v", this.Execution)+",\n")
	}
	if this.Type != nil {
		s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	}
	if this.StartTime != nil {
		s = append(s, "StartTime: "+fmt.Sprintf("%#v", this.StartTime)+",\n")
	}
	if this.CloseTime != nil {
		s = append(s, "CloseTime: "+fmt.Sprintf("%#v", this.CloseTime)+",\n")
	}
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "HistoryLength: "+fmt.Sprintf("%#v", this.HistoryLength)+",\n")
	s = append(s, "ParentNamespaceId: "+fmt.Sprintf("%#v", this.ParentNamespaceId)+",\n")
	if this.ParentExecution != nil {
		s = append(s, "ParentExecution: "+fmt.Sprintf("%#v", this.ParentExecution)+",\n")
	}
	s = append(s, "ExecutionTime: "+fmt.Sprintf("%#v", this.ExecutionTime)+",\n")
	if this.Memo != nil {
		s = append(s, "Memo: "+fmt.Sprintf("%#v", this.Memo)+",\n")
	}
	if this.SearchAttributes != nil {
		s = append(s, "SearchAttributes: "+fmt.Sprintf("%#v", this.SearchAttributes)+",\n")
	}
	if this.AutoResetPoints != nil {
		s = append(s, "AutoResetPoints: "+fmt.Sprintf("%#v", this.AutoResetPoints)+",\n")
	}
	s = append(s, "TaskList: "+fmt.Sprintf("%#v", this.TaskList)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WorkflowExecutionConfiguration) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&execution.WorkflowExecutionConfiguration{")
	if this.TaskList != nil {
		s = append(s, "TaskList: "+fmt.Sprintf("%#v", this.TaskList)+",\n")
	}
	s = append(s, "WorkflowExecutionTimeoutSeconds: "+fmt.Sprintf("%#v", this.WorkflowExecutionTimeoutSeconds)+",\n")
	s = append(s, "WorkflowRunTimeoutSeconds: "+fmt.Sprintf("%#v", this.WorkflowRunTimeoutSeconds)+",\n")
	s = append(s, "WorkflowTaskTimeoutSeconds: "+fmt.Sprintf("%#v", this.WorkflowTaskTimeoutSeconds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PendingActivityInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&execution.PendingActivityInfo{")
	s = append(s, "ActivityId: "+fmt.Sprintf("%#v", this.ActivityId)+",\n")
	if this.ActivityType != nil {
		s = append(s, "ActivityType: "+fmt.Sprintf("%#v", this.ActivityType)+",\n")
	}
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	if this.HeartbeatDetails != nil {
		s = append(s, "HeartbeatDetails: "+fmt.Sprintf("%#v", this.HeartbeatDetails)+",\n")
	}
	s = append(s, "LastHeartbeatTimestamp: "+fmt.Sprintf("%#v", this.LastHeartbeatTimestamp)+",\n")
	s = append(s, "LastStartedTimestamp: "+fmt.Sprintf("%#v", this.LastStartedTimestamp)+",\n")
	s = append(s, "Attempt: "+fmt.Sprintf("%#v", this.Attempt)+",\n")
	s = append(s, "MaximumAttempts: "+fmt.Sprintf("%#v", this.MaximumAttempts)+",\n")
	s = append(s, "ScheduledTimestamp: "+fmt.Sprintf("%#v", this.ScheduledTimestamp)+",\n")
	s = append(s, "ExpirationTimestamp: "+fmt.Sprintf("%#v", this.ExpirationTimestamp)+",\n")
	if this.LastFailure != nil {
		s = append(s, "LastFailure: "+fmt.Sprintf("%#v", this.LastFailure)+",\n")
	}
	s = append(s, "LastWorkerIdentity: "+fmt.Sprintf("%#v", this.LastWorkerIdentity)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PendingChildExecutionInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&execution.PendingChildExecutionInfo{")
	s = append(s, "WorkflowId: "+fmt.Sprintf("%#v", this.WorkflowId)+",\n")
	s = append(s, "RunId: "+fmt.Sprintf("%#v", this.RunId)+",\n")
	s = append(s, "WorkflowTypName: "+fmt.Sprintf("%#v", this.WorkflowTypName)+",\n")
	s = append(s, "InitiatedId: "+fmt.Sprintf("%#v", this.InitiatedId)+",\n")
	s = append(s, "ParentClosePolicy: "+fmt.Sprintf("%#v", this.ParentClosePolicy)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResetPoints) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&execution.ResetPoints{")
	if this.Points != nil {
		s = append(s, "Points: "+fmt.Sprintf("%#v", this.Points)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResetPointInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&execution.ResetPointInfo{")
	s = append(s, "BinaryChecksum: "+fmt.Sprintf("%#v", this.BinaryChecksum)+",\n")
	s = append(s, "RunId: "+fmt.Sprintf("%#v", this.RunId)+",\n")
	s = append(s, "FirstDecisionCompletedId: "+fmt.Sprintf("%#v", this.FirstDecisionCompletedId)+",\n")
	s = append(s, "CreatedTimeNano: "+fmt.Sprintf("%#v", this.CreatedTimeNano)+",\n")
	s = append(s, "ExpiringTimeNano: "+fmt.Sprintf("%#v", this.ExpiringTimeNano)+",\n")
	s = append(s, "Resettable: "+fmt.Sprintf("%#v", this.Resettable)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMessage(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *WorkflowExecutionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowExecutionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowExecutionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TaskList) > 0 {
		i -= len(m.TaskList)
		copy(dAtA[i:], m.TaskList)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TaskList)))
		i--
		dAtA[i] = 0x6a
	}
	if m.AutoResetPoints != nil {
		{
			size, err := m.AutoResetPoints.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.SearchAttributes != nil {
		{
			size, err := m.SearchAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Memo != nil {
		{
			size, err := m.Memo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.ExecutionTime != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ExecutionTime))
		i--
		dAtA[i] = 0x48
	}
	if m.ParentExecution != nil {
		{
			size, err := m.ParentExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.ParentNamespaceId) > 0 {
		i -= len(m.ParentNamespaceId)
		copy(dAtA[i:], m.ParentNamespaceId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ParentNamespaceId)))
		i--
		dAtA[i] = 0x3a
	}
	if m.HistoryLength != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.HistoryLength))
		i--
		dAtA[i] = 0x30
	}
	if m.Status != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if m.CloseTime != nil {
		{
			size, err := m.CloseTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.StartTime != nil {
		{
			size, err := m.StartTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != nil {
		{
			size, err := m.Type.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Execution != nil {
		{
			size, err := m.Execution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkflowExecutionConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowExecutionConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowExecutionConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WorkflowTaskTimeoutSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.WorkflowTaskTimeoutSeconds))
		i--
		dAtA[i] = 0x20
	}
	if m.WorkflowRunTimeoutSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.WorkflowRunTimeoutSeconds))
		i--
		dAtA[i] = 0x18
	}
	if m.WorkflowExecutionTimeoutSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.WorkflowExecutionTimeoutSeconds))
		i--
		dAtA[i] = 0x10
	}
	if m.TaskList != nil {
		{
			size, err := m.TaskList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PendingActivityInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingActivityInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PendingActivityInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LastWorkerIdentity) > 0 {
		i -= len(m.LastWorkerIdentity)
		copy(dAtA[i:], m.LastWorkerIdentity)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.LastWorkerIdentity)))
		i--
		dAtA[i] = 0x62
	}
	if m.LastFailure != nil {
		{
			size, err := m.LastFailure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.ExpirationTimestamp != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ExpirationTimestamp))
		i--
		dAtA[i] = 0x50
	}
	if m.ScheduledTimestamp != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ScheduledTimestamp))
		i--
		dAtA[i] = 0x48
	}
	if m.MaximumAttempts != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.MaximumAttempts))
		i--
		dAtA[i] = 0x40
	}
	if m.Attempt != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Attempt))
		i--
		dAtA[i] = 0x38
	}
	if m.LastStartedTimestamp != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.LastStartedTimestamp))
		i--
		dAtA[i] = 0x30
	}
	if m.LastHeartbeatTimestamp != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.LastHeartbeatTimestamp))
		i--
		dAtA[i] = 0x28
	}
	if m.HeartbeatDetails != nil {
		{
			size, err := m.HeartbeatDetails.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.State != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if m.ActivityType != nil {
		{
			size, err := m.ActivityType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ActivityId) > 0 {
		i -= len(m.ActivityId)
		copy(dAtA[i:], m.ActivityId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ActivityId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PendingChildExecutionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingChildExecutionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PendingChildExecutionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ParentClosePolicy != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ParentClosePolicy))
		i--
		dAtA[i] = 0x28
	}
	if m.InitiatedId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.InitiatedId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.WorkflowTypName) > 0 {
		i -= len(m.WorkflowTypName)
		copy(dAtA[i:], m.WorkflowTypName)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.WorkflowTypName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RunId) > 0 {
		i -= len(m.RunId)
		copy(dAtA[i:], m.RunId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.RunId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.WorkflowId) > 0 {
		i -= len(m.WorkflowId)
		copy(dAtA[i:], m.WorkflowId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.WorkflowId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResetPoints) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResetPoints) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResetPoints) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Points) > 0 {
		for iNdEx := len(m.Points) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Points[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ResetPointInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResetPointInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResetPointInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Resettable {
		i--
		if m.Resettable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.ExpiringTimeNano != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ExpiringTimeNano))
		i--
		dAtA[i] = 0x28
	}
	if m.CreatedTimeNano != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.CreatedTimeNano))
		i--
		dAtA[i] = 0x20
	}
	if m.FirstDecisionCompletedId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.FirstDecisionCompletedId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.RunId) > 0 {
		i -= len(m.RunId)
		copy(dAtA[i:], m.RunId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.RunId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BinaryChecksum) > 0 {
		i -= len(m.BinaryChecksum)
		copy(dAtA[i:], m.BinaryChecksum)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.BinaryChecksum)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WorkflowExecutionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Execution != nil {
		l = m.Execution.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Type != nil {
		l = m.Type.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.StartTime != nil {
		l = m.StartTime.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.CloseTime != nil {
		l = m.CloseTime.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovMessage(uint64(m.Status))
	}
	if m.HistoryLength != 0 {
		n += 1 + sovMessage(uint64(m.HistoryLength))
	}
	l = len(m.ParentNamespaceId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ParentExecution != nil {
		l = m.ParentExecution.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ExecutionTime != 0 {
		n += 1 + sovMessage(uint64(m.ExecutionTime))
	}
	if m.Memo != nil {
		l = m.Memo.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.SearchAttributes != nil {
		l = m.SearchAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.AutoResetPoints != nil {
		l = m.AutoResetPoints.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.TaskList)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *WorkflowExecutionConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskList != nil {
		l = m.TaskList.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowExecutionTimeoutSeconds != 0 {
		n += 1 + sovMessage(uint64(m.WorkflowExecutionTimeoutSeconds))
	}
	if m.WorkflowRunTimeoutSeconds != 0 {
		n += 1 + sovMessage(uint64(m.WorkflowRunTimeoutSeconds))
	}
	if m.WorkflowTaskTimeoutSeconds != 0 {
		n += 1 + sovMessage(uint64(m.WorkflowTaskTimeoutSeconds))
	}
	return n
}

func (m *PendingActivityInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ActivityId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ActivityType != nil {
		l = m.ActivityType.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovMessage(uint64(m.State))
	}
	if m.HeartbeatDetails != nil {
		l = m.HeartbeatDetails.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.LastHeartbeatTimestamp != 0 {
		n += 1 + sovMessage(uint64(m.LastHeartbeatTimestamp))
	}
	if m.LastStartedTimestamp != 0 {
		n += 1 + sovMessage(uint64(m.LastStartedTimestamp))
	}
	if m.Attempt != 0 {
		n += 1 + sovMessage(uint64(m.Attempt))
	}
	if m.MaximumAttempts != 0 {
		n += 1 + sovMessage(uint64(m.MaximumAttempts))
	}
	if m.ScheduledTimestamp != 0 {
		n += 1 + sovMessage(uint64(m.ScheduledTimestamp))
	}
	if m.ExpirationTimestamp != 0 {
		n += 1 + sovMessage(uint64(m.ExpirationTimestamp))
	}
	if m.LastFailure != nil {
		l = m.LastFailure.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.LastWorkerIdentity)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *PendingChildExecutionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WorkflowId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.RunId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.WorkflowTypName)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.InitiatedId != 0 {
		n += 1 + sovMessage(uint64(m.InitiatedId))
	}
	if m.ParentClosePolicy != 0 {
		n += 1 + sovMessage(uint64(m.ParentClosePolicy))
	}
	return n
}

func (m *ResetPoints) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Points) > 0 {
		for _, e := range m.Points {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	return n
}

func (m *ResetPointInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BinaryChecksum)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.RunId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.FirstDecisionCompletedId != 0 {
		n += 1 + sovMessage(uint64(m.FirstDecisionCompletedId))
	}
	if m.CreatedTimeNano != 0 {
		n += 1 + sovMessage(uint64(m.CreatedTimeNano))
	}
	if m.ExpiringTimeNano != 0 {
		n += 1 + sovMessage(uint64(m.ExpiringTimeNano))
	}
	if m.Resettable {
		n += 2
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *WorkflowExecutionInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkflowExecutionInfo{`,
		`Execution:` + strings.Replace(fmt.Sprintf("%v", this.Execution), "WorkflowExecution", "common.WorkflowExecution", 1) + `,`,
		`Type:` + strings.Replace(fmt.Sprintf("%v", this.Type), "WorkflowType", "common.WorkflowType", 1) + `,`,
		`StartTime:` + strings.Replace(fmt.Sprintf("%v", this.StartTime), "Int64Value", "types.Int64Value", 1) + `,`,
		`CloseTime:` + strings.Replace(fmt.Sprintf("%v", this.CloseTime), "Int64Value", "types.Int64Value", 1) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`HistoryLength:` + fmt.Sprintf("%v", this.HistoryLength) + `,`,
		`ParentNamespaceId:` + fmt.Sprintf("%v", this.ParentNamespaceId) + `,`,
		`ParentExecution:` + strings.Replace(fmt.Sprintf("%v", this.ParentExecution), "WorkflowExecution", "common.WorkflowExecution", 1) + `,`,
		`ExecutionTime:` + fmt.Sprintf("%v", this.ExecutionTime) + `,`,
		`Memo:` + strings.Replace(fmt.Sprintf("%v", this.Memo), "Memo", "common.Memo", 1) + `,`,
		`SearchAttributes:` + strings.Replace(fmt.Sprintf("%v", this.SearchAttributes), "SearchAttributes", "common.SearchAttributes", 1) + `,`,
		`AutoResetPoints:` + strings.Replace(this.AutoResetPoints.String(), "ResetPoints", "ResetPoints", 1) + `,`,
		`TaskList:` + fmt.Sprintf("%v", this.TaskList) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkflowExecutionConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkflowExecutionConfiguration{`,
		`TaskList:` + strings.Replace(fmt.Sprintf("%v", this.TaskList), "TaskList", "tasklist.TaskList", 1) + `,`,
		`WorkflowExecutionTimeoutSeconds:` + fmt.Sprintf("%v", this.WorkflowExecutionTimeoutSeconds) + `,`,
		`WorkflowRunTimeoutSeconds:` + fmt.Sprintf("%v", this.WorkflowRunTimeoutSeconds) + `,`,
		`WorkflowTaskTimeoutSeconds:` + fmt.Sprintf("%v", this.WorkflowTaskTimeoutSeconds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PendingActivityInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PendingActivityInfo{`,
		`ActivityId:` + fmt.Sprintf("%v", this.ActivityId) + `,`,
		`ActivityType:` + strings.Replace(fmt.Sprintf("%v", this.ActivityType), "ActivityType", "common.ActivityType", 1) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`HeartbeatDetails:` + strings.Replace(fmt.Sprintf("%v", this.HeartbeatDetails), "Payloads", "common.Payloads", 1) + `,`,
		`LastHeartbeatTimestamp:` + fmt.Sprintf("%v", this.LastHeartbeatTimestamp) + `,`,
		`LastStartedTimestamp:` + fmt.Sprintf("%v", this.LastStartedTimestamp) + `,`,
		`Attempt:` + fmt.Sprintf("%v", this.Attempt) + `,`,
		`MaximumAttempts:` + fmt.Sprintf("%v", this.MaximumAttempts) + `,`,
		`ScheduledTimestamp:` + fmt.Sprintf("%v", this.ScheduledTimestamp) + `,`,
		`ExpirationTimestamp:` + fmt.Sprintf("%v", this.ExpirationTimestamp) + `,`,
		`LastFailure:` + strings.Replace(fmt.Sprintf("%v", this.LastFailure), "Failure", "failure.Failure", 1) + `,`,
		`LastWorkerIdentity:` + fmt.Sprintf("%v", this.LastWorkerIdentity) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PendingChildExecutionInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PendingChildExecutionInfo{`,
		`WorkflowId:` + fmt.Sprintf("%v", this.WorkflowId) + `,`,
		`RunId:` + fmt.Sprintf("%v", this.RunId) + `,`,
		`WorkflowTypName:` + fmt.Sprintf("%v", this.WorkflowTypName) + `,`,
		`InitiatedId:` + fmt.Sprintf("%v", this.InitiatedId) + `,`,
		`ParentClosePolicy:` + fmt.Sprintf("%v", this.ParentClosePolicy) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResetPoints) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPoints := "[]*ResetPointInfo{"
	for _, f := range this.Points {
		repeatedStringForPoints += strings.Replace(f.String(), "ResetPointInfo", "ResetPointInfo", 1) + ","
	}
	repeatedStringForPoints += "}"
	s := strings.Join([]string{`&ResetPoints{`,
		`Points:` + repeatedStringForPoints + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResetPointInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResetPointInfo{`,
		`BinaryChecksum:` + fmt.Sprintf("%v", this.BinaryChecksum) + `,`,
		`RunId:` + fmt.Sprintf("%v", this.RunId) + `,`,
		`FirstDecisionCompletedId:` + fmt.Sprintf("%v", this.FirstDecisionCompletedId) + `,`,
		`CreatedTimeNano:` + fmt.Sprintf("%v", this.CreatedTimeNano) + `,`,
		`ExpiringTimeNano:` + fmt.Sprintf("%v", this.ExpiringTimeNano) + `,`,
		`Resettable:` + fmt.Sprintf("%v", this.Resettable) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *WorkflowExecutionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowExecutionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowExecutionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Execution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Execution == nil {
				m.Execution = &common.WorkflowExecution{}
			}
			if err := m.Execution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Type == nil {
				m.Type = &common.WorkflowType{}
			}
			if err := m.Type.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTime == nil {
				m.StartTime = &types.Int64Value{}
			}
			if err := m.StartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloseTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CloseTime == nil {
				m.CloseTime = &types.Int64Value{}
			}
			if err := m.CloseTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= WorkflowExecutionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryLength", wireType)
			}
			m.HistoryLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HistoryLength |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentNamespaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentNamespaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ParentExecution == nil {
				m.ParentExecution = &common.WorkflowExecution{}
			}
			if err := m.ParentExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionTime", wireType)
			}
			m.ExecutionTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecutionTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Memo == nil {
				m.Memo = &common.Memo{}
			}
			if err := m.Memo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SearchAttributes == nil {
				m.SearchAttributes = &common.SearchAttributes{}
			}
			if err := m.SearchAttributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoResetPoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AutoResetPoints == nil {
				m.AutoResetPoints = &ResetPoints{}
			}
			if err := m.AutoResetPoints.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskList = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkflowExecutionConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowExecutionConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowExecutionConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskList == nil {
				m.TaskList = &tasklist.TaskList{}
			}
			if err := m.TaskList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecutionTimeoutSeconds", wireType)
			}
			m.WorkflowExecutionTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkflowExecutionTimeoutSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowRunTimeoutSeconds", wireType)
			}
			m.WorkflowRunTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkflowRunTimeoutSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowTaskTimeoutSeconds", wireType)
			}
			m.WorkflowTaskTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkflowTaskTimeoutSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PendingActivityInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingActivityInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingActivityInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActivityType == nil {
				m.ActivityType = &common.ActivityType{}
			}
			if err := m.ActivityType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= PendingActivityState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HeartbeatDetails == nil {
				m.HeartbeatDetails = &common.Payloads{}
			}
			if err := m.HeartbeatDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeartbeatTimestamp", wireType)
			}
			m.LastHeartbeatTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastHeartbeatTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastStartedTimestamp", wireType)
			}
			m.LastStartedTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastStartedTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attempt", wireType)
			}
			m.Attempt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attempt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaximumAttempts", wireType)
			}
			m.MaximumAttempts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaximumAttempts |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledTimestamp", wireType)
			}
			m.ScheduledTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduledTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTimestamp", wireType)
			}
			m.ExpirationTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastFailure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastFailure == nil {
				m.LastFailure = &failure.Failure{}
			}
			if err := m.LastFailure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastWorkerIdentity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastWorkerIdentity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PendingChildExecutionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingChildExecutionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingChildExecutionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowTypName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowTypName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatedId", wireType)
			}
			m.InitiatedId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitiatedId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentClosePolicy", wireType)
			}
			m.ParentClosePolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentClosePolicy |= common.ParentClosePolicy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResetPoints) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResetPoints: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResetPoints: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Points", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Points = append(m.Points, &ResetPointInfo{})
			if err := m.Points[len(m.Points)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResetPointInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResetPointInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResetPointInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinaryChecksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BinaryChecksum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstDecisionCompletedId", wireType)
			}
			m.FirstDecisionCompletedId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstDecisionCompletedId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedTimeNano", wireType)
			}
			m.CreatedTimeNano = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedTimeNano |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiringTimeNano", wireType)
			}
			m.ExpiringTimeNano = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiringTimeNano |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resettable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Resettable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)

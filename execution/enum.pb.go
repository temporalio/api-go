// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: execution/enum.proto

package execution

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
	strconv "strconv"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type WorkflowExecutionStatus int32

const (
	WORKFLOW_EXECUTION_STATUS_UNSPECIFIED      WorkflowExecutionStatus = 0
	WORKFLOW_EXECUTION_STATUS_RUNNING          WorkflowExecutionStatus = 1
	WORKFLOW_EXECUTION_STATUS_COMPLETED        WorkflowExecutionStatus = 2
	WORKFLOW_EXECUTION_STATUS_FAILED           WorkflowExecutionStatus = 3
	WORKFLOW_EXECUTION_STATUS_CANCELED         WorkflowExecutionStatus = 4
	WORKFLOW_EXECUTION_STATUS_TERMINATED       WorkflowExecutionStatus = 5
	WORKFLOW_EXECUTION_STATUS_CONTINUED_AS_NEW WorkflowExecutionStatus = 6
	WORKFLOW_EXECUTION_STATUS_TIMED_OUT        WorkflowExecutionStatus = 7
)

var WorkflowExecutionStatus_name = map[int32]string{
	0: "Unspecified",
	1: "Running",
	2: "Completed",
	3: "Failed",
	4: "Canceled",
	5: "Terminated",
	6: "ContinuedAsNew",
	7: "TimedOut",
}

var WorkflowExecutionStatus_value = map[string]int32{
	"Unspecified":    0,
	"Running":        1,
	"Completed":      2,
	"Failed":         3,
	"Canceled":       4,
	"Terminated":     5,
	"ContinuedAsNew": 6,
	"TimedOut":       7,
}

func (WorkflowExecutionStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2297211ce2f9cb26, []int{0}
}

type PendingActivityState int32

const (
	PENDING_ACTIVITY_STATE_UNSPECIFIED      PendingActivityState = 0
	PENDING_ACTIVITY_STATE_SCHEDULED        PendingActivityState = 1
	PENDING_ACTIVITY_STATE_STARTED          PendingActivityState = 2
	PENDING_ACTIVITY_STATE_CANCEL_REQUESTED PendingActivityState = 3
)

var PendingActivityState_name = map[int32]string{
	0: "Unspecified",
	1: "Scheduled",
	2: "Started",
	3: "CancelRequested",
}

var PendingActivityState_value = map[string]int32{
	"Unspecified":     0,
	"Scheduled":       1,
	"Started":         2,
	"CancelRequested": 3,
}

func (PendingActivityState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2297211ce2f9cb26, []int{1}
}

func init() {
	proto.RegisterEnum("execution.WorkflowExecutionStatus", WorkflowExecutionStatus_name, WorkflowExecutionStatus_value)
	proto.RegisterEnum("execution.PendingActivityState", PendingActivityState_name, PendingActivityState_value)
}

func init() { proto.RegisterFile("execution/enum.proto", fileDescriptor_2297211ce2f9cb26) }

var fileDescriptor_2297211ce2f9cb26 = []byte{
	// 406 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0xd2, 0xcd, 0xae, 0xd2, 0x40,
	0x14, 0x07, 0xf0, 0xce, 0xbd, 0x7a, 0x8d, 0xb3, 0x6a, 0x26, 0x37, 0x71, 0x61, 0x32, 0x41, 0x04,
	0x51, 0x8c, 0x65, 0xe1, 0x13, 0x8c, 0xed, 0x01, 0x27, 0xc2, 0xb4, 0xb6, 0x33, 0x56, 0xdd, 0x4c,
	0x10, 0x2b, 0x69, 0x84, 0x0e, 0xc1, 0xe2, 0x47, 0xe2, 0xc2, 0x47, 0xf0, 0x31, 0x7c, 0x01, 0xdf,
	0xc1, 0x25, 0x4b, 0x96, 0x52, 0x62, 0xe2, 0x92, 0x47, 0x30, 0x85, 0x40, 0xcc, 0x4d, 0xca, 0x6e,
	0x72, 0xe6, 0x37, 0x1f, 0xe7, 0x9f, 0x83, 0x2f, 0x93, 0xcf, 0xc9, 0x68, 0x91, 0xa7, 0x26, 0xeb,
	0x24, 0xd9, 0x62, 0xea, 0xcc, 0xe6, 0x26, 0x37, 0xe4, 0xe6, 0xb1, 0xda, 0xfe, 0x73, 0x86, 0x6f,
	0xc5, 0x66, 0xfe, 0xfe, 0xdd, 0xc4, 0x7c, 0x82, 0x43, 0x35, 0xca, 0x87, 0xf9, 0xe2, 0x03, 0x79,
	0x80, 0x9b, 0xb1, 0x1f, 0x3e, 0xeb, 0xf6, 0xfd, 0x58, 0xc3, 0x4b, 0x70, 0x95, 0xe4, 0xbe, 0xd0,
	0x91, 0x64, 0x52, 0x45, 0x5a, 0x89, 0x28, 0x00, 0x97, 0x77, 0x39, 0x78, 0xb6, 0x45, 0x9a, 0xf8,
	0x4e, 0x35, 0x0d, 0x95, 0x10, 0x5c, 0xf4, 0x6c, 0x44, 0x5a, 0xf8, 0x6e, 0x35, 0x73, 0xfd, 0x41,
	0xd0, 0x07, 0x09, 0x9e, 0x7d, 0x46, 0x1a, 0xb8, 0x56, 0x0d, 0xbb, 0x8c, 0xf7, 0xc1, 0xb3, 0xcf,
	0xc9, 0x3d, 0x5c, 0x3f, 0x71, 0x1d, 0x13, 0x2e, 0x94, 0xee, 0x1a, 0xb9, 0x8f, 0x1b, 0xd5, 0x4e,
	0x42, 0x38, 0xe0, 0x82, 0x95, 0xef, 0x5e, 0x27, 0x0e, 0x6e, 0x9f, 0xfa, 0xa0, 0x90, 0x5c, 0x28,
	0xf0, 0x34, 0x8b, 0xb4, 0x80, 0xd8, 0xbe, 0x38, 0xdd, 0x90, 0xe4, 0x03, 0xf0, 0xb4, 0xaf, 0xa4,
	0x7d, 0xa3, 0xfd, 0x13, 0xe1, 0xcb, 0x20, 0xc9, 0xde, 0xa6, 0xd9, 0x98, 0x8d, 0xf2, 0xf4, 0x63,
	0x9a, 0x7f, 0x29, 0x53, 0x4e, 0xca, 0x1e, 0x02, 0x10, 0x1e, 0x17, 0x3d, 0xcd, 0x5c, 0xc9, 0x5f,
	0x70, 0xf9, 0x6a, 0x77, 0x1e, 0xae, 0x24, 0xdc, 0xc0, 0xb5, 0x0a, 0x17, 0xb9, 0x4f, 0xc1, 0x53,
	0x65, 0xa7, 0x88, 0xd4, 0x31, 0xad, 0x52, 0x92, 0x85, 0xfb, 0x6c, 0x1f, 0xe2, 0x56, 0x85, 0xd9,
	0x47, 0xa6, 0x43, 0x78, 0xae, 0x20, 0x2a, 0xf1, 0xf9, 0x93, 0xaf, 0xcb, 0x35, 0xb5, 0x56, 0x6b,
	0x6a, 0x6d, 0xd7, 0x14, 0x7d, 0x2b, 0x28, 0xfa, 0x51, 0x50, 0xf4, 0xab, 0xa0, 0x68, 0x59, 0x50,
	0xf4, 0xbb, 0xa0, 0xe8, 0x6f, 0x41, 0xad, 0x6d, 0x41, 0xd1, 0xf7, 0x0d, 0xb5, 0x96, 0x1b, 0x6a,
	0xad, 0x36, 0xd4, 0xc2, 0xb7, 0x53, 0xe3, 0xe4, 0xc9, 0x74, 0x66, 0xe6, 0xc3, 0xc9, 0x7e, 0xe6,
	0x9c, 0xe3, 0xc8, 0x05, 0xe8, 0x75, 0x6b, 0xfc, 0xdf, 0x76, 0x6a, 0x3a, 0x87, 0xf5, 0xa3, 0x1d,
	0xed, 0x1c, 0xe9, 0x9b, 0x8b, 0x5d, 0xe1, 0xf1, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1d, 0x2d,
	0xeb, 0x5e, 0xc7, 0x02, 0x00, 0x00,
}

func (x WorkflowExecutionStatus) String() string {
	s, ok := WorkflowExecutionStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x PendingActivityState) String() string {
	s, ok := PendingActivityState_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

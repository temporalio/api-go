// The MIT License (MIT)
//
// Copyright (c) 2020 Temporal Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: event/message.proto

package event

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	common "go.temporal.io/temporal-proto/common"
	execution "go.temporal.io/temporal-proto/execution"
	tasklist "go.temporal.io/temporal-proto/tasklist"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type WorkflowExecutionStartedEventAttributes struct {
	WorkflowType                        *common.WorkflowType          `protobuf:"bytes,1,opt,name=workflowType,proto3" json:"workflowType,omitempty"`
	ParentWorkflowNamespace             string                        `protobuf:"bytes,2,opt,name=parentWorkflowNamespace,proto3" json:"parentWorkflowNamespace,omitempty"`
	ParentWorkflowExecution             *execution.WorkflowExecution  `protobuf:"bytes,3,opt,name=parentWorkflowExecution,proto3" json:"parentWorkflowExecution,omitempty"`
	ParentInitiatedEventId              int64                         `protobuf:"varint,4,opt,name=parentInitiatedEventId,proto3" json:"parentInitiatedEventId,omitempty"`
	TaskList                            *tasklist.TaskList            `protobuf:"bytes,5,opt,name=taskList,proto3" json:"taskList,omitempty"`
	Input                               *common.Payload               `protobuf:"bytes,6,opt,name=input,proto3" json:"input,omitempty"`
	ExecutionStartToCloseTimeoutSeconds int32                         `protobuf:"varint,7,opt,name=executionStartToCloseTimeoutSeconds,proto3" json:"executionStartToCloseTimeoutSeconds,omitempty"`
	TaskStartToCloseTimeoutSeconds      int32                         `protobuf:"varint,8,opt,name=taskStartToCloseTimeoutSeconds,proto3" json:"taskStartToCloseTimeoutSeconds,omitempty"`
	ContinuedExecutionRunId             string                        `protobuf:"bytes,9,opt,name=continuedExecutionRunId,proto3" json:"continuedExecutionRunId,omitempty"`
	Initiator                           common.ContinueAsNewInitiator `protobuf:"varint,10,opt,name=initiator,proto3,enum=common.ContinueAsNewInitiator" json:"initiator,omitempty"`
	ContinuedFailureReason              string                        `protobuf:"bytes,11,opt,name=continuedFailureReason,proto3" json:"continuedFailureReason,omitempty"`
	ContinuedFailureDetails             *common.Payload               `protobuf:"bytes,12,opt,name=continuedFailureDetails,proto3" json:"continuedFailureDetails,omitempty"`
	LastCompletionResult                *common.Payload               `protobuf:"bytes,13,opt,name=lastCompletionResult,proto3" json:"lastCompletionResult,omitempty"`
	// This is the runId when the WorkflowExecutionStarted event is written.
	OriginalExecutionRunId string `protobuf:"bytes,14,opt,name=originalExecutionRunId,proto3" json:"originalExecutionRunId,omitempty"`
	Identity               string `protobuf:"bytes,15,opt,name=identity,proto3" json:"identity,omitempty"`
	// This is the very first runId along the chain of ContinueAsNew and Reset.
	FirstExecutionRunId             string                   `protobuf:"bytes,16,opt,name=firstExecutionRunId,proto3" json:"firstExecutionRunId,omitempty"`
	RetryPolicy                     *common.RetryPolicy      `protobuf:"bytes,17,opt,name=retryPolicy,proto3" json:"retryPolicy,omitempty"`
	Attempt                         int32                    `protobuf:"varint,18,opt,name=attempt,proto3" json:"attempt,omitempty"`
	ExpirationTimestamp             int64                    `protobuf:"varint,19,opt,name=expirationTimestamp,proto3" json:"expirationTimestamp,omitempty"`
	CronSchedule                    string                   `protobuf:"bytes,20,opt,name=cronSchedule,proto3" json:"cronSchedule,omitempty"`
	FirstDecisionTaskBackoffSeconds int32                    `protobuf:"varint,21,opt,name=firstDecisionTaskBackoffSeconds,proto3" json:"firstDecisionTaskBackoffSeconds,omitempty"`
	Memo                            *common.Memo             `protobuf:"bytes,22,opt,name=memo,proto3" json:"memo,omitempty"`
	SearchAttributes                *common.SearchAttributes `protobuf:"bytes,23,opt,name=searchAttributes,proto3" json:"searchAttributes,omitempty"`
	PrevAutoResetPoints             *execution.ResetPoints   `protobuf:"bytes,24,opt,name=prevAutoResetPoints,proto3" json:"prevAutoResetPoints,omitempty"`
	Header                          *common.Header           `protobuf:"bytes,25,opt,name=header,proto3" json:"header,omitempty"`
}

func (m *WorkflowExecutionStartedEventAttributes) Reset() {
	*m = WorkflowExecutionStartedEventAttributes{}
}
func (m *WorkflowExecutionStartedEventAttributes) String() string { return proto.CompactTextString(m) }
func (*WorkflowExecutionStartedEventAttributes) ProtoMessage()    {}
func (*WorkflowExecutionStartedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7135fdf3a2c9ba09, []int{0}
}
func (m *WorkflowExecutionStartedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowExecutionStartedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowExecutionStartedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowExecutionStartedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowExecutionStartedEventAttributes.Merge(m, src)
}
func (m *WorkflowExecutionStartedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowExecutionStartedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowExecutionStartedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowExecutionStartedEventAttributes proto.InternalMessageInfo

func (m *WorkflowExecutionStartedEventAttributes) GetWorkflowType() *common.WorkflowType {
	if m != nil {
		return m.WorkflowType
	}
	return nil
}

func (m *WorkflowExecutionStartedEventAttributes) GetParentWorkflowNamespace() string {
	if m != nil {
		return m.ParentWorkflowNamespace
	}
	return ""
}

func (m *WorkflowExecutionStartedEventAttributes) GetParentWorkflowExecution() *execution.WorkflowExecution {
	if m != nil {
		return m.ParentWorkflowExecution
	}
	return nil
}

func (m *WorkflowExecutionStartedEventAttributes) GetParentInitiatedEventId() int64 {
	if m != nil {
		return m.ParentInitiatedEventId
	}
	return 0
}

func (m *WorkflowExecutionStartedEventAttributes) GetTaskList() *tasklist.TaskList {
	if m != nil {
		return m.TaskList
	}
	return nil
}

func (m *WorkflowExecutionStartedEventAttributes) GetInput() *common.Payload {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *WorkflowExecutionStartedEventAttributes) GetExecutionStartToCloseTimeoutSeconds() int32 {
	if m != nil {
		return m.ExecutionStartToCloseTimeoutSeconds
	}
	return 0
}

func (m *WorkflowExecutionStartedEventAttributes) GetTaskStartToCloseTimeoutSeconds() int32 {
	if m != nil {
		return m.TaskStartToCloseTimeoutSeconds
	}
	return 0
}

func (m *WorkflowExecutionStartedEventAttributes) GetContinuedExecutionRunId() string {
	if m != nil {
		return m.ContinuedExecutionRunId
	}
	return ""
}

func (m *WorkflowExecutionStartedEventAttributes) GetInitiator() common.ContinueAsNewInitiator {
	if m != nil {
		return m.Initiator
	}
	return common.ContinueAsNewInitiator_Decider
}

func (m *WorkflowExecutionStartedEventAttributes) GetContinuedFailureReason() string {
	if m != nil {
		return m.ContinuedFailureReason
	}
	return ""
}

func (m *WorkflowExecutionStartedEventAttributes) GetContinuedFailureDetails() *common.Payload {
	if m != nil {
		return m.ContinuedFailureDetails
	}
	return nil
}

func (m *WorkflowExecutionStartedEventAttributes) GetLastCompletionResult() *common.Payload {
	if m != nil {
		return m.LastCompletionResult
	}
	return nil
}

func (m *WorkflowExecutionStartedEventAttributes) GetOriginalExecutionRunId() string {
	if m != nil {
		return m.OriginalExecutionRunId
	}
	return ""
}

func (m *WorkflowExecutionStartedEventAttributes) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *WorkflowExecutionStartedEventAttributes) GetFirstExecutionRunId() string {
	if m != nil {
		return m.FirstExecutionRunId
	}
	return ""
}

func (m *WorkflowExecutionStartedEventAttributes) GetRetryPolicy() *common.RetryPolicy {
	if m != nil {
		return m.RetryPolicy
	}
	return nil
}

func (m *WorkflowExecutionStartedEventAttributes) GetAttempt() int32 {
	if m != nil {
		return m.Attempt
	}
	return 0
}

func (m *WorkflowExecutionStartedEventAttributes) GetExpirationTimestamp() int64 {
	if m != nil {
		return m.ExpirationTimestamp
	}
	return 0
}

func (m *WorkflowExecutionStartedEventAttributes) GetCronSchedule() string {
	if m != nil {
		return m.CronSchedule
	}
	return ""
}

func (m *WorkflowExecutionStartedEventAttributes) GetFirstDecisionTaskBackoffSeconds() int32 {
	if m != nil {
		return m.FirstDecisionTaskBackoffSeconds
	}
	return 0
}

func (m *WorkflowExecutionStartedEventAttributes) GetMemo() *common.Memo {
	if m != nil {
		return m.Memo
	}
	return nil
}

func (m *WorkflowExecutionStartedEventAttributes) GetSearchAttributes() *common.SearchAttributes {
	if m != nil {
		return m.SearchAttributes
	}
	return nil
}

func (m *WorkflowExecutionStartedEventAttributes) GetPrevAutoResetPoints() *execution.ResetPoints {
	if m != nil {
		return m.PrevAutoResetPoints
	}
	return nil
}

func (m *WorkflowExecutionStartedEventAttributes) GetHeader() *common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

type WorkflowExecutionCompletedEventAttributes struct {
	Result                       *common.Payload `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	DecisionTaskCompletedEventId int64           `protobuf:"varint,2,opt,name=decisionTaskCompletedEventId,proto3" json:"decisionTaskCompletedEventId,omitempty"`
}

func (m *WorkflowExecutionCompletedEventAttributes) Reset() {
	*m = WorkflowExecutionCompletedEventAttributes{}
}
func (m *WorkflowExecutionCompletedEventAttributes) String() string {
	return proto.CompactTextString(m)
}
func (*WorkflowExecutionCompletedEventAttributes) ProtoMessage() {}
func (*WorkflowExecutionCompletedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7135fdf3a2c9ba09, []int{1}
}
func (m *WorkflowExecutionCompletedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowExecutionCompletedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowExecutionCompletedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowExecutionCompletedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowExecutionCompletedEventAttributes.Merge(m, src)
}
func (m *WorkflowExecutionCompletedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowExecutionCompletedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowExecutionCompletedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowExecutionCompletedEventAttributes proto.InternalMessageInfo

func (m *WorkflowExecutionCompletedEventAttributes) GetResult() *common.Payload {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *WorkflowExecutionCompletedEventAttributes) GetDecisionTaskCompletedEventId() int64 {
	if m != nil {
		return m.DecisionTaskCompletedEventId
	}
	return 0
}

type WorkflowExecutionFailedEventAttributes struct {
	Reason                       string          `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	Details                      *common.Payload `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	DecisionTaskCompletedEventId int64           `protobuf:"varint,3,opt,name=decisionTaskCompletedEventId,proto3" json:"decisionTaskCompletedEventId,omitempty"`
}

func (m *WorkflowExecutionFailedEventAttributes) Reset() {
	*m = WorkflowExecutionFailedEventAttributes{}
}
func (m *WorkflowExecutionFailedEventAttributes) String() string { return proto.CompactTextString(m) }
func (*WorkflowExecutionFailedEventAttributes) ProtoMessage()    {}
func (*WorkflowExecutionFailedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7135fdf3a2c9ba09, []int{2}
}
func (m *WorkflowExecutionFailedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowExecutionFailedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowExecutionFailedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowExecutionFailedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowExecutionFailedEventAttributes.Merge(m, src)
}
func (m *WorkflowExecutionFailedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowExecutionFailedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowExecutionFailedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowExecutionFailedEventAttributes proto.InternalMessageInfo

func (m *WorkflowExecutionFailedEventAttributes) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *WorkflowExecutionFailedEventAttributes) GetDetails() *common.Payload {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *WorkflowExecutionFailedEventAttributes) GetDecisionTaskCompletedEventId() int64 {
	if m != nil {
		return m.DecisionTaskCompletedEventId
	}
	return 0
}

type WorkflowExecutionTimedOutEventAttributes struct {
	TimeoutType TimeoutType `protobuf:"varint,2,opt,name=timeoutType,proto3,enum=event.TimeoutType" json:"timeoutType,omitempty"`
}

func (m *WorkflowExecutionTimedOutEventAttributes) Reset() {
	*m = WorkflowExecutionTimedOutEventAttributes{}
}
func (m *WorkflowExecutionTimedOutEventAttributes) String() string { return proto.CompactTextString(m) }
func (*WorkflowExecutionTimedOutEventAttributes) ProtoMessage()    {}
func (*WorkflowExecutionTimedOutEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7135fdf3a2c9ba09, []int{3}
}
func (m *WorkflowExecutionTimedOutEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowExecutionTimedOutEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowExecutionTimedOutEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowExecutionTimedOutEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowExecutionTimedOutEventAttributes.Merge(m, src)
}
func (m *WorkflowExecutionTimedOutEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowExecutionTimedOutEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowExecutionTimedOutEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowExecutionTimedOutEventAttributes proto.InternalMessageInfo

func (m *WorkflowExecutionTimedOutEventAttributes) GetTimeoutType() TimeoutType {
	if m != nil {
		return m.TimeoutType
	}
	return TimeoutType_StartToClose
}

type WorkflowExecutionContinuedAsNewEventAttributes struct {
	NewExecutionRunId                   string                        `protobuf:"bytes,1,opt,name=newExecutionRunId,proto3" json:"newExecutionRunId,omitempty"`
	WorkflowType                        *common.WorkflowType          `protobuf:"bytes,2,opt,name=workflowType,proto3" json:"workflowType,omitempty"`
	TaskList                            *tasklist.TaskList            `protobuf:"bytes,3,opt,name=taskList,proto3" json:"taskList,omitempty"`
	Input                               *common.Payload               `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`
	ExecutionStartToCloseTimeoutSeconds int32                         `protobuf:"varint,5,opt,name=executionStartToCloseTimeoutSeconds,proto3" json:"executionStartToCloseTimeoutSeconds,omitempty"`
	TaskStartToCloseTimeoutSeconds      int32                         `protobuf:"varint,6,opt,name=taskStartToCloseTimeoutSeconds,proto3" json:"taskStartToCloseTimeoutSeconds,omitempty"`
	DecisionTaskCompletedEventId        int64                         `protobuf:"varint,7,opt,name=decisionTaskCompletedEventId,proto3" json:"decisionTaskCompletedEventId,omitempty"`
	BackoffStartIntervalInSeconds       int32                         `protobuf:"varint,8,opt,name=backoffStartIntervalInSeconds,proto3" json:"backoffStartIntervalInSeconds,omitempty"`
	Initiator                           common.ContinueAsNewInitiator `protobuf:"varint,9,opt,name=initiator,proto3,enum=common.ContinueAsNewInitiator" json:"initiator,omitempty"`
	FailureReason                       string                        `protobuf:"bytes,10,opt,name=failureReason,proto3" json:"failureReason,omitempty"`
	FailureDetails                      *common.Payload               `protobuf:"bytes,11,opt,name=failureDetails,proto3" json:"failureDetails,omitempty"`
	LastCompletionResult                *common.Payload               `protobuf:"bytes,12,opt,name=lastCompletionResult,proto3" json:"lastCompletionResult,omitempty"`
	Header                              *common.Header                `protobuf:"bytes,13,opt,name=header,proto3" json:"header,omitempty"`
	Memo                                *common.Memo                  `protobuf:"bytes,14,opt,name=memo,proto3" json:"memo,omitempty"`
	SearchAttributes                    *common.SearchAttributes      `protobuf:"bytes,15,opt,name=searchAttributes,proto3" json:"searchAttributes,omitempty"`
}

func (m *WorkflowExecutionContinuedAsNewEventAttributes) Reset() {
	*m = WorkflowExecutionContinuedAsNewEventAttributes{}
}
func (m *WorkflowExecutionContinuedAsNewEventAttributes) String() string {
	return proto.CompactTextString(m)
}
func (*WorkflowExecutionContinuedAsNewEventAttributes) ProtoMessage() {}
func (*WorkflowExecutionContinuedAsNewEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7135fdf3a2c9ba09, []int{4}
}
func (m *WorkflowExecutionContinuedAsNewEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowExecutionContinuedAsNewEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowExecutionContinuedAsNewEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowExecutionContinuedAsNewEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowExecutionContinuedAsNewEventAttributes.Merge(m, src)
}
func (m *WorkflowExecutionContinuedAsNewEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowExecutionContinuedAsNewEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowExecutionContinuedAsNewEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowExecutionContinuedAsNewEventAttributes proto.InternalMessageInfo

func (m *WorkflowExecutionContinuedAsNewEventAttributes) GetNewExecutionRunId() string {
	if m != nil {
		return m.NewExecutionRunId
	}
	return ""
}

func (m *WorkflowExecutionContinuedAsNewEventAttributes) GetWorkflowType() *common.WorkflowType {
	if m != nil {
		return m.WorkflowType
	}
	return nil
}

func (m *WorkflowExecutionContinuedAsNewEventAttributes) GetTaskList() *tasklist.TaskList {
	if m != nil {
		return m.TaskList
	}
	return nil
}

func (m *WorkflowExecutionContinuedAsNewEventAttributes) GetInput() *common.Payload {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *WorkflowExecutionContinuedAsNewEventAttributes) GetExecutionStartToCloseTimeoutSeconds() int32 {
	if m != nil {
		return m.ExecutionStartToCloseTimeoutSeconds
	}
	return 0
}

func (m *WorkflowExecutionContinuedAsNewEventAttributes) GetTaskStartToCloseTimeoutSeconds() int32 {
	if m != nil {
		return m.TaskStartToCloseTimeoutSeconds
	}
	return 0
}

func (m *WorkflowExecutionContinuedAsNewEventAttributes) GetDecisionTaskCompletedEventId() int64 {
	if m != nil {
		return m.DecisionTaskCompletedEventId
	}
	return 0
}

func (m *WorkflowExecutionContinuedAsNewEventAttributes) GetBackoffStartIntervalInSeconds() int32 {
	if m != nil {
		return m.BackoffStartIntervalInSeconds
	}
	return 0
}

func (m *WorkflowExecutionContinuedAsNewEventAttributes) GetInitiator() common.ContinueAsNewInitiator {
	if m != nil {
		return m.Initiator
	}
	return common.ContinueAsNewInitiator_Decider
}

func (m *WorkflowExecutionContinuedAsNewEventAttributes) GetFailureReason() string {
	if m != nil {
		return m.FailureReason
	}
	return ""
}

func (m *WorkflowExecutionContinuedAsNewEventAttributes) GetFailureDetails() *common.Payload {
	if m != nil {
		return m.FailureDetails
	}
	return nil
}

func (m *WorkflowExecutionContinuedAsNewEventAttributes) GetLastCompletionResult() *common.Payload {
	if m != nil {
		return m.LastCompletionResult
	}
	return nil
}

func (m *WorkflowExecutionContinuedAsNewEventAttributes) GetHeader() *common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *WorkflowExecutionContinuedAsNewEventAttributes) GetMemo() *common.Memo {
	if m != nil {
		return m.Memo
	}
	return nil
}

func (m *WorkflowExecutionContinuedAsNewEventAttributes) GetSearchAttributes() *common.SearchAttributes {
	if m != nil {
		return m.SearchAttributes
	}
	return nil
}

type DecisionTaskScheduledEventAttributes struct {
	TaskList                   *tasklist.TaskList `protobuf:"bytes,1,opt,name=taskList,proto3" json:"taskList,omitempty"`
	StartToCloseTimeoutSeconds int32              `protobuf:"varint,2,opt,name=startToCloseTimeoutSeconds,proto3" json:"startToCloseTimeoutSeconds,omitempty"`
	Attempt                    int64              `protobuf:"varint,3,opt,name=attempt,proto3" json:"attempt,omitempty"`
}

func (m *DecisionTaskScheduledEventAttributes) Reset()         { *m = DecisionTaskScheduledEventAttributes{} }
func (m *DecisionTaskScheduledEventAttributes) String() string { return proto.CompactTextString(m) }
func (*DecisionTaskScheduledEventAttributes) ProtoMessage()    {}
func (*DecisionTaskScheduledEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7135fdf3a2c9ba09, []int{5}
}
func (m *DecisionTaskScheduledEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DecisionTaskScheduledEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DecisionTaskScheduledEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DecisionTaskScheduledEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DecisionTaskScheduledEventAttributes.Merge(m, src)
}
func (m *DecisionTaskScheduledEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *DecisionTaskScheduledEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_DecisionTaskScheduledEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_DecisionTaskScheduledEventAttributes proto.InternalMessageInfo

func (m *DecisionTaskScheduledEventAttributes) GetTaskList() *tasklist.TaskList {
	if m != nil {
		return m.TaskList
	}
	return nil
}

func (m *DecisionTaskScheduledEventAttributes) GetStartToCloseTimeoutSeconds() int32 {
	if m != nil {
		return m.StartToCloseTimeoutSeconds
	}
	return 0
}

func (m *DecisionTaskScheduledEventAttributes) GetAttempt() int64 {
	if m != nil {
		return m.Attempt
	}
	return 0
}

type DecisionTaskStartedEventAttributes struct {
	ScheduledEventId int64  `protobuf:"varint,1,opt,name=scheduledEventId,proto3" json:"scheduledEventId,omitempty"`
	Identity         string `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	RequestId        string `protobuf:"bytes,3,opt,name=requestId,proto3" json:"requestId,omitempty"`
}

func (m *DecisionTaskStartedEventAttributes) Reset()         { *m = DecisionTaskStartedEventAttributes{} }
func (m *DecisionTaskStartedEventAttributes) String() string { return proto.CompactTextString(m) }
func (*DecisionTaskStartedEventAttributes) ProtoMessage()    {}
func (*DecisionTaskStartedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7135fdf3a2c9ba09, []int{6}
}
func (m *DecisionTaskStartedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DecisionTaskStartedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DecisionTaskStartedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DecisionTaskStartedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DecisionTaskStartedEventAttributes.Merge(m, src)
}
func (m *DecisionTaskStartedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *DecisionTaskStartedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_DecisionTaskStartedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_DecisionTaskStartedEventAttributes proto.InternalMessageInfo

func (m *DecisionTaskStartedEventAttributes) GetScheduledEventId() int64 {
	if m != nil {
		return m.ScheduledEventId
	}
	return 0
}

func (m *DecisionTaskStartedEventAttributes) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *DecisionTaskStartedEventAttributes) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

type DecisionTaskCompletedEventAttributes struct {
	ScheduledEventId int64  `protobuf:"varint,1,opt,name=scheduledEventId,proto3" json:"scheduledEventId,omitempty"`
	StartedEventId   int64  `protobuf:"varint,2,opt,name=startedEventId,proto3" json:"startedEventId,omitempty"`
	Identity         string `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	BinaryChecksum   string `protobuf:"bytes,4,opt,name=binaryChecksum,proto3" json:"binaryChecksum,omitempty"`
}

func (m *DecisionTaskCompletedEventAttributes) Reset()         { *m = DecisionTaskCompletedEventAttributes{} }
func (m *DecisionTaskCompletedEventAttributes) String() string { return proto.CompactTextString(m) }
func (*DecisionTaskCompletedEventAttributes) ProtoMessage()    {}
func (*DecisionTaskCompletedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7135fdf3a2c9ba09, []int{7}
}
func (m *DecisionTaskCompletedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DecisionTaskCompletedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DecisionTaskCompletedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DecisionTaskCompletedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DecisionTaskCompletedEventAttributes.Merge(m, src)
}
func (m *DecisionTaskCompletedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *DecisionTaskCompletedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_DecisionTaskCompletedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_DecisionTaskCompletedEventAttributes proto.InternalMessageInfo

func (m *DecisionTaskCompletedEventAttributes) GetScheduledEventId() int64 {
	if m != nil {
		return m.ScheduledEventId
	}
	return 0
}

func (m *DecisionTaskCompletedEventAttributes) GetStartedEventId() int64 {
	if m != nil {
		return m.StartedEventId
	}
	return 0
}

func (m *DecisionTaskCompletedEventAttributes) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *DecisionTaskCompletedEventAttributes) GetBinaryChecksum() string {
	if m != nil {
		return m.BinaryChecksum
	}
	return ""
}

type DecisionTaskTimedOutEventAttributes struct {
	ScheduledEventId int64       `protobuf:"varint,1,opt,name=scheduledEventId,proto3" json:"scheduledEventId,omitempty"`
	StartedEventId   int64       `protobuf:"varint,2,opt,name=startedEventId,proto3" json:"startedEventId,omitempty"`
	TimeoutType      TimeoutType `protobuf:"varint,3,opt,name=timeoutType,proto3,enum=event.TimeoutType" json:"timeoutType,omitempty"`
}

func (m *DecisionTaskTimedOutEventAttributes) Reset()         { *m = DecisionTaskTimedOutEventAttributes{} }
func (m *DecisionTaskTimedOutEventAttributes) String() string { return proto.CompactTextString(m) }
func (*DecisionTaskTimedOutEventAttributes) ProtoMessage()    {}
func (*DecisionTaskTimedOutEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7135fdf3a2c9ba09, []int{8}
}
func (m *DecisionTaskTimedOutEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DecisionTaskTimedOutEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DecisionTaskTimedOutEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DecisionTaskTimedOutEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DecisionTaskTimedOutEventAttributes.Merge(m, src)
}
func (m *DecisionTaskTimedOutEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *DecisionTaskTimedOutEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_DecisionTaskTimedOutEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_DecisionTaskTimedOutEventAttributes proto.InternalMessageInfo

func (m *DecisionTaskTimedOutEventAttributes) GetScheduledEventId() int64 {
	if m != nil {
		return m.ScheduledEventId
	}
	return 0
}

func (m *DecisionTaskTimedOutEventAttributes) GetStartedEventId() int64 {
	if m != nil {
		return m.StartedEventId
	}
	return 0
}

func (m *DecisionTaskTimedOutEventAttributes) GetTimeoutType() TimeoutType {
	if m != nil {
		return m.TimeoutType
	}
	return TimeoutType_StartToClose
}

type DecisionTaskFailedEventAttributes struct {
	ScheduledEventId int64                   `protobuf:"varint,1,opt,name=scheduledEventId,proto3" json:"scheduledEventId,omitempty"`
	StartedEventId   int64                   `protobuf:"varint,2,opt,name=startedEventId,proto3" json:"startedEventId,omitempty"`
	Cause            DecisionTaskFailedCause `protobuf:"varint,3,opt,name=cause,proto3,enum=event.DecisionTaskFailedCause" json:"cause,omitempty"`
	Details          *common.Payload         `protobuf:"bytes,4,opt,name=details,proto3" json:"details,omitempty"`
	Identity         string                  `protobuf:"bytes,5,opt,name=identity,proto3" json:"identity,omitempty"`
	Reason           string                  `protobuf:"bytes,6,opt,name=reason,proto3" json:"reason,omitempty"`
	// for reset workflow
	BaseRunId        string `protobuf:"bytes,7,opt,name=baseRunId,proto3" json:"baseRunId,omitempty"`
	NewRunId         string `protobuf:"bytes,8,opt,name=newRunId,proto3" json:"newRunId,omitempty"`
	ForkEventVersion int64  `protobuf:"varint,9,opt,name=forkEventVersion,proto3" json:"forkEventVersion,omitempty"`
	BinaryChecksum   string `protobuf:"bytes,10,opt,name=binaryChecksum,proto3" json:"binaryChecksum,omitempty"`
}

func (m *DecisionTaskFailedEventAttributes) Reset()         { *m = DecisionTaskFailedEventAttributes{} }
func (m *DecisionTaskFailedEventAttributes) String() string { return proto.CompactTextString(m) }
func (*DecisionTaskFailedEventAttributes) ProtoMessage()    {}
func (*DecisionTaskFailedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7135fdf3a2c9ba09, []int{9}
}
func (m *DecisionTaskFailedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DecisionTaskFailedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DecisionTaskFailedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DecisionTaskFailedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DecisionTaskFailedEventAttributes.Merge(m, src)
}
func (m *DecisionTaskFailedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *DecisionTaskFailedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_DecisionTaskFailedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_DecisionTaskFailedEventAttributes proto.InternalMessageInfo

func (m *DecisionTaskFailedEventAttributes) GetScheduledEventId() int64 {
	if m != nil {
		return m.ScheduledEventId
	}
	return 0
}

func (m *DecisionTaskFailedEventAttributes) GetStartedEventId() int64 {
	if m != nil {
		return m.StartedEventId
	}
	return 0
}

func (m *DecisionTaskFailedEventAttributes) GetCause() DecisionTaskFailedCause {
	if m != nil {
		return m.Cause
	}
	return DecisionTaskFailedCause_UnhandledDecision
}

func (m *DecisionTaskFailedEventAttributes) GetDetails() *common.Payload {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *DecisionTaskFailedEventAttributes) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *DecisionTaskFailedEventAttributes) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *DecisionTaskFailedEventAttributes) GetBaseRunId() string {
	if m != nil {
		return m.BaseRunId
	}
	return ""
}

func (m *DecisionTaskFailedEventAttributes) GetNewRunId() string {
	if m != nil {
		return m.NewRunId
	}
	return ""
}

func (m *DecisionTaskFailedEventAttributes) GetForkEventVersion() int64 {
	if m != nil {
		return m.ForkEventVersion
	}
	return 0
}

func (m *DecisionTaskFailedEventAttributes) GetBinaryChecksum() string {
	if m != nil {
		return m.BinaryChecksum
	}
	return ""
}

type ActivityTaskScheduledEventAttributes struct {
	ActivityId                    string               `protobuf:"bytes,1,opt,name=activityId,proto3" json:"activityId,omitempty"`
	ActivityType                  *common.ActivityType `protobuf:"bytes,2,opt,name=activityType,proto3" json:"activityType,omitempty"`
	Namespace                     string               `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	TaskList                      *tasklist.TaskList   `protobuf:"bytes,4,opt,name=taskList,proto3" json:"taskList,omitempty"`
	Input                         *common.Payload      `protobuf:"bytes,5,opt,name=input,proto3" json:"input,omitempty"`
	ScheduleToCloseTimeoutSeconds int32                `protobuf:"varint,6,opt,name=scheduleToCloseTimeoutSeconds,proto3" json:"scheduleToCloseTimeoutSeconds,omitempty"`
	ScheduleToStartTimeoutSeconds int32                `protobuf:"varint,7,opt,name=scheduleToStartTimeoutSeconds,proto3" json:"scheduleToStartTimeoutSeconds,omitempty"`
	StartToCloseTimeoutSeconds    int32                `protobuf:"varint,8,opt,name=startToCloseTimeoutSeconds,proto3" json:"startToCloseTimeoutSeconds,omitempty"`
	HeartbeatTimeoutSeconds       int32                `protobuf:"varint,9,opt,name=heartbeatTimeoutSeconds,proto3" json:"heartbeatTimeoutSeconds,omitempty"`
	DecisionTaskCompletedEventId  int64                `protobuf:"varint,10,opt,name=decisionTaskCompletedEventId,proto3" json:"decisionTaskCompletedEventId,omitempty"`
	RetryPolicy                   *common.RetryPolicy  `protobuf:"bytes,11,opt,name=retryPolicy,proto3" json:"retryPolicy,omitempty"`
	Header                        *common.Header       `protobuf:"bytes,12,opt,name=header,proto3" json:"header,omitempty"`
}

func (m *ActivityTaskScheduledEventAttributes) Reset()         { *m = ActivityTaskScheduledEventAttributes{} }
func (m *ActivityTaskScheduledEventAttributes) String() string { return proto.CompactTextString(m) }
func (*ActivityTaskScheduledEventAttributes) ProtoMessage()    {}
func (*ActivityTaskScheduledEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7135fdf3a2c9ba09, []int{10}
}
func (m *ActivityTaskScheduledEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivityTaskScheduledEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivityTaskScheduledEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivityTaskScheduledEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityTaskScheduledEventAttributes.Merge(m, src)
}
func (m *ActivityTaskScheduledEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *ActivityTaskScheduledEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityTaskScheduledEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityTaskScheduledEventAttributes proto.InternalMessageInfo

func (m *ActivityTaskScheduledEventAttributes) GetActivityId() string {
	if m != nil {
		return m.ActivityId
	}
	return ""
}

func (m *ActivityTaskScheduledEventAttributes) GetActivityType() *common.ActivityType {
	if m != nil {
		return m.ActivityType
	}
	return nil
}

func (m *ActivityTaskScheduledEventAttributes) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ActivityTaskScheduledEventAttributes) GetTaskList() *tasklist.TaskList {
	if m != nil {
		return m.TaskList
	}
	return nil
}

func (m *ActivityTaskScheduledEventAttributes) GetInput() *common.Payload {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *ActivityTaskScheduledEventAttributes) GetScheduleToCloseTimeoutSeconds() int32 {
	if m != nil {
		return m.ScheduleToCloseTimeoutSeconds
	}
	return 0
}

func (m *ActivityTaskScheduledEventAttributes) GetScheduleToStartTimeoutSeconds() int32 {
	if m != nil {
		return m.ScheduleToStartTimeoutSeconds
	}
	return 0
}

func (m *ActivityTaskScheduledEventAttributes) GetStartToCloseTimeoutSeconds() int32 {
	if m != nil {
		return m.StartToCloseTimeoutSeconds
	}
	return 0
}

func (m *ActivityTaskScheduledEventAttributes) GetHeartbeatTimeoutSeconds() int32 {
	if m != nil {
		return m.HeartbeatTimeoutSeconds
	}
	return 0
}

func (m *ActivityTaskScheduledEventAttributes) GetDecisionTaskCompletedEventId() int64 {
	if m != nil {
		return m.DecisionTaskCompletedEventId
	}
	return 0
}

func (m *ActivityTaskScheduledEventAttributes) GetRetryPolicy() *common.RetryPolicy {
	if m != nil {
		return m.RetryPolicy
	}
	return nil
}

func (m *ActivityTaskScheduledEventAttributes) GetHeader() *common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

type ActivityTaskStartedEventAttributes struct {
	ScheduledEventId   int64           `protobuf:"varint,1,opt,name=scheduledEventId,proto3" json:"scheduledEventId,omitempty"`
	Identity           string          `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	RequestId          string          `protobuf:"bytes,3,opt,name=requestId,proto3" json:"requestId,omitempty"`
	Attempt            int32           `protobuf:"varint,4,opt,name=attempt,proto3" json:"attempt,omitempty"`
	LastFailureReason  string          `protobuf:"bytes,5,opt,name=lastFailureReason,proto3" json:"lastFailureReason,omitempty"`
	LastFailureDetails *common.Payload `protobuf:"bytes,6,opt,name=lastFailureDetails,proto3" json:"lastFailureDetails,omitempty"`
}

func (m *ActivityTaskStartedEventAttributes) Reset()         { *m = ActivityTaskStartedEventAttributes{} }
func (m *ActivityTaskStartedEventAttributes) String() string { return proto.CompactTextString(m) }
func (*ActivityTaskStartedEventAttributes) ProtoMessage()    {}
func (*ActivityTaskStartedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7135fdf3a2c9ba09, []int{11}
}
func (m *ActivityTaskStartedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivityTaskStartedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivityTaskStartedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivityTaskStartedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityTaskStartedEventAttributes.Merge(m, src)
}
func (m *ActivityTaskStartedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *ActivityTaskStartedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityTaskStartedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityTaskStartedEventAttributes proto.InternalMessageInfo

func (m *ActivityTaskStartedEventAttributes) GetScheduledEventId() int64 {
	if m != nil {
		return m.ScheduledEventId
	}
	return 0
}

func (m *ActivityTaskStartedEventAttributes) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *ActivityTaskStartedEventAttributes) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *ActivityTaskStartedEventAttributes) GetAttempt() int32 {
	if m != nil {
		return m.Attempt
	}
	return 0
}

func (m *ActivityTaskStartedEventAttributes) GetLastFailureReason() string {
	if m != nil {
		return m.LastFailureReason
	}
	return ""
}

func (m *ActivityTaskStartedEventAttributes) GetLastFailureDetails() *common.Payload {
	if m != nil {
		return m.LastFailureDetails
	}
	return nil
}

type ActivityTaskCompletedEventAttributes struct {
	Result           *common.Payload `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	ScheduledEventId int64           `protobuf:"varint,2,opt,name=scheduledEventId,proto3" json:"scheduledEventId,omitempty"`
	StartedEventId   int64           `protobuf:"varint,3,opt,name=startedEventId,proto3" json:"startedEventId,omitempty"`
	Identity         string          `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (m *ActivityTaskCompletedEventAttributes) Reset()         { *m = ActivityTaskCompletedEventAttributes{} }
func (m *ActivityTaskCompletedEventAttributes) String() string { return proto.CompactTextString(m) }
func (*ActivityTaskCompletedEventAttributes) ProtoMessage()    {}
func (*ActivityTaskCompletedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7135fdf3a2c9ba09, []int{12}
}
func (m *ActivityTaskCompletedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivityTaskCompletedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivityTaskCompletedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivityTaskCompletedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityTaskCompletedEventAttributes.Merge(m, src)
}
func (m *ActivityTaskCompletedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *ActivityTaskCompletedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityTaskCompletedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityTaskCompletedEventAttributes proto.InternalMessageInfo

func (m *ActivityTaskCompletedEventAttributes) GetResult() *common.Payload {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ActivityTaskCompletedEventAttributes) GetScheduledEventId() int64 {
	if m != nil {
		return m.ScheduledEventId
	}
	return 0
}

func (m *ActivityTaskCompletedEventAttributes) GetStartedEventId() int64 {
	if m != nil {
		return m.StartedEventId
	}
	return 0
}

func (m *ActivityTaskCompletedEventAttributes) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

type ActivityTaskFailedEventAttributes struct {
	Reason           string          `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	Details          *common.Payload `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	ScheduledEventId int64           `protobuf:"varint,3,opt,name=scheduledEventId,proto3" json:"scheduledEventId,omitempty"`
	StartedEventId   int64           `protobuf:"varint,4,opt,name=startedEventId,proto3" json:"startedEventId,omitempty"`
	Identity         string          `protobuf:"bytes,5,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (m *ActivityTaskFailedEventAttributes) Reset()         { *m = ActivityTaskFailedEventAttributes{} }
func (m *ActivityTaskFailedEventAttributes) String() string { return proto.CompactTextString(m) }
func (*ActivityTaskFailedEventAttributes) ProtoMessage()    {}
func (*ActivityTaskFailedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7135fdf3a2c9ba09, []int{13}
}
func (m *ActivityTaskFailedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivityTaskFailedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivityTaskFailedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivityTaskFailedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityTaskFailedEventAttributes.Merge(m, src)
}
func (m *ActivityTaskFailedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *ActivityTaskFailedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityTaskFailedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityTaskFailedEventAttributes proto.InternalMessageInfo

func (m *ActivityTaskFailedEventAttributes) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *ActivityTaskFailedEventAttributes) GetDetails() *common.Payload {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *ActivityTaskFailedEventAttributes) GetScheduledEventId() int64 {
	if m != nil {
		return m.ScheduledEventId
	}
	return 0
}

func (m *ActivityTaskFailedEventAttributes) GetStartedEventId() int64 {
	if m != nil {
		return m.StartedEventId
	}
	return 0
}

func (m *ActivityTaskFailedEventAttributes) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

type ActivityTaskTimedOutEventAttributes struct {
	Details          *common.Payload `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	ScheduledEventId int64           `protobuf:"varint,2,opt,name=scheduledEventId,proto3" json:"scheduledEventId,omitempty"`
	StartedEventId   int64           `protobuf:"varint,3,opt,name=startedEventId,proto3" json:"startedEventId,omitempty"`
	TimeoutType      TimeoutType     `protobuf:"varint,4,opt,name=timeoutType,proto3,enum=event.TimeoutType" json:"timeoutType,omitempty"`
	// For retry activity, it may have a failure before timeout. It's important to keep those information for debug.
	// Client can also provide the info for making next decision
	LastFailureReason  string          `protobuf:"bytes,5,opt,name=lastFailureReason,proto3" json:"lastFailureReason,omitempty"`
	LastFailureDetails *common.Payload `protobuf:"bytes,6,opt,name=lastFailureDetails,proto3" json:"lastFailureDetails,omitempty"`
}

func (m *ActivityTaskTimedOutEventAttributes) Reset()         { *m = ActivityTaskTimedOutEventAttributes{} }
func (m *ActivityTaskTimedOutEventAttributes) String() string { return proto.CompactTextString(m) }
func (*ActivityTaskTimedOutEventAttributes) ProtoMessage()    {}
func (*ActivityTaskTimedOutEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7135fdf3a2c9ba09, []int{14}
}
func (m *ActivityTaskTimedOutEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivityTaskTimedOutEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivityTaskTimedOutEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivityTaskTimedOutEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityTaskTimedOutEventAttributes.Merge(m, src)
}
func (m *ActivityTaskTimedOutEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *ActivityTaskTimedOutEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityTaskTimedOutEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityTaskTimedOutEventAttributes proto.InternalMessageInfo

func (m *ActivityTaskTimedOutEventAttributes) GetDetails() *common.Payload {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *ActivityTaskTimedOutEventAttributes) GetScheduledEventId() int64 {
	if m != nil {
		return m.ScheduledEventId
	}
	return 0
}

func (m *ActivityTaskTimedOutEventAttributes) GetStartedEventId() int64 {
	if m != nil {
		return m.StartedEventId
	}
	return 0
}

func (m *ActivityTaskTimedOutEventAttributes) GetTimeoutType() TimeoutType {
	if m != nil {
		return m.TimeoutType
	}
	return TimeoutType_StartToClose
}

func (m *ActivityTaskTimedOutEventAttributes) GetLastFailureReason() string {
	if m != nil {
		return m.LastFailureReason
	}
	return ""
}

func (m *ActivityTaskTimedOutEventAttributes) GetLastFailureDetails() *common.Payload {
	if m != nil {
		return m.LastFailureDetails
	}
	return nil
}

type ActivityTaskCancelRequestedEventAttributes struct {
	ActivityId                   string `protobuf:"bytes,1,opt,name=activityId,proto3" json:"activityId,omitempty"`
	DecisionTaskCompletedEventId int64  `protobuf:"varint,2,opt,name=decisionTaskCompletedEventId,proto3" json:"decisionTaskCompletedEventId,omitempty"`
}

func (m *ActivityTaskCancelRequestedEventAttributes) Reset() {
	*m = ActivityTaskCancelRequestedEventAttributes{}
}
func (m *ActivityTaskCancelRequestedEventAttributes) String() string {
	return proto.CompactTextString(m)
}
func (*ActivityTaskCancelRequestedEventAttributes) ProtoMessage() {}
func (*ActivityTaskCancelRequestedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7135fdf3a2c9ba09, []int{15}
}
func (m *ActivityTaskCancelRequestedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivityTaskCancelRequestedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivityTaskCancelRequestedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivityTaskCancelRequestedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityTaskCancelRequestedEventAttributes.Merge(m, src)
}
func (m *ActivityTaskCancelRequestedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *ActivityTaskCancelRequestedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityTaskCancelRequestedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityTaskCancelRequestedEventAttributes proto.InternalMessageInfo

func (m *ActivityTaskCancelRequestedEventAttributes) GetActivityId() string {
	if m != nil {
		return m.ActivityId
	}
	return ""
}

func (m *ActivityTaskCancelRequestedEventAttributes) GetDecisionTaskCompletedEventId() int64 {
	if m != nil {
		return m.DecisionTaskCompletedEventId
	}
	return 0
}

type RequestCancelActivityTaskFailedEventAttributes struct {
	ActivityId                   string `protobuf:"bytes,1,opt,name=activityId,proto3" json:"activityId,omitempty"`
	Cause                        string `protobuf:"bytes,2,opt,name=cause,proto3" json:"cause,omitempty"`
	DecisionTaskCompletedEventId int64  `protobuf:"varint,3,opt,name=decisionTaskCompletedEventId,proto3" json:"decisionTaskCompletedEventId,omitempty"`
}

func (m *RequestCancelActivityTaskFailedEventAttributes) Reset() {
	*m = RequestCancelActivityTaskFailedEventAttributes{}
}
func (m *RequestCancelActivityTaskFailedEventAttributes) String() string {
	return proto.CompactTextString(m)
}
func (*RequestCancelActivityTaskFailedEventAttributes) ProtoMessage() {}
func (*RequestCancelActivityTaskFailedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7135fdf3a2c9ba09, []int{16}
}
func (m *RequestCancelActivityTaskFailedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestCancelActivityTaskFailedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestCancelActivityTaskFailedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestCancelActivityTaskFailedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestCancelActivityTaskFailedEventAttributes.Merge(m, src)
}
func (m *RequestCancelActivityTaskFailedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *RequestCancelActivityTaskFailedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestCancelActivityTaskFailedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_RequestCancelActivityTaskFailedEventAttributes proto.InternalMessageInfo

func (m *RequestCancelActivityTaskFailedEventAttributes) GetActivityId() string {
	if m != nil {
		return m.ActivityId
	}
	return ""
}

func (m *RequestCancelActivityTaskFailedEventAttributes) GetCause() string {
	if m != nil {
		return m.Cause
	}
	return ""
}

func (m *RequestCancelActivityTaskFailedEventAttributes) GetDecisionTaskCompletedEventId() int64 {
	if m != nil {
		return m.DecisionTaskCompletedEventId
	}
	return 0
}

type ActivityTaskCanceledEventAttributes struct {
	Details                      *common.Payload `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	LatestCancelRequestedEventId int64           `protobuf:"varint,2,opt,name=latestCancelRequestedEventId,proto3" json:"latestCancelRequestedEventId,omitempty"`
	ScheduledEventId             int64           `protobuf:"varint,3,opt,name=scheduledEventId,proto3" json:"scheduledEventId,omitempty"`
	StartedEventId               int64           `protobuf:"varint,4,opt,name=startedEventId,proto3" json:"startedEventId,omitempty"`
	Identity                     string          `protobuf:"bytes,5,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (m *ActivityTaskCanceledEventAttributes) Reset()         { *m = ActivityTaskCanceledEventAttributes{} }
func (m *ActivityTaskCanceledEventAttributes) String() string { return proto.CompactTextString(m) }
func (*ActivityTaskCanceledEventAttributes) ProtoMessage()    {}
func (*ActivityTaskCanceledEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7135fdf3a2c9ba09, []int{17}
}
func (m *ActivityTaskCanceledEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivityTaskCanceledEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivityTaskCanceledEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivityTaskCanceledEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityTaskCanceledEventAttributes.Merge(m, src)
}
func (m *ActivityTaskCanceledEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *ActivityTaskCanceledEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityTaskCanceledEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityTaskCanceledEventAttributes proto.InternalMessageInfo

func (m *ActivityTaskCanceledEventAttributes) GetDetails() *common.Payload {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *ActivityTaskCanceledEventAttributes) GetLatestCancelRequestedEventId() int64 {
	if m != nil {
		return m.LatestCancelRequestedEventId
	}
	return 0
}

func (m *ActivityTaskCanceledEventAttributes) GetScheduledEventId() int64 {
	if m != nil {
		return m.ScheduledEventId
	}
	return 0
}

func (m *ActivityTaskCanceledEventAttributes) GetStartedEventId() int64 {
	if m != nil {
		return m.StartedEventId
	}
	return 0
}

func (m *ActivityTaskCanceledEventAttributes) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

type TimerStartedEventAttributes struct {
	TimerId                      string `protobuf:"bytes,1,opt,name=timerId,proto3" json:"timerId,omitempty"`
	StartToFireTimeoutSeconds    int64  `protobuf:"varint,2,opt,name=startToFireTimeoutSeconds,proto3" json:"startToFireTimeoutSeconds,omitempty"`
	DecisionTaskCompletedEventId int64  `protobuf:"varint,3,opt,name=decisionTaskCompletedEventId,proto3" json:"decisionTaskCompletedEventId,omitempty"`
}

func (m *TimerStartedEventAttributes) Reset()         { *m = TimerStartedEventAttributes{} }
func (m *TimerStartedEventAttributes) String() string { return proto.CompactTextString(m) }
func (*TimerStartedEventAttributes) ProtoMessage()    {}
func (*TimerStartedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7135fdf3a2c9ba09, []int{18}
}
func (m *TimerStartedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimerStartedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimerStartedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimerStartedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimerStartedEventAttributes.Merge(m, src)
}
func (m *TimerStartedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *TimerStartedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_TimerStartedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_TimerStartedEventAttributes proto.InternalMessageInfo

func (m *TimerStartedEventAttributes) GetTimerId() string {
	if m != nil {
		return m.TimerId
	}
	return ""
}

func (m *TimerStartedEventAttributes) GetStartToFireTimeoutSeconds() int64 {
	if m != nil {
		return m.StartToFireTimeoutSeconds
	}
	return 0
}

func (m *TimerStartedEventAttributes) GetDecisionTaskCompletedEventId() int64 {
	if m != nil {
		return m.DecisionTaskCompletedEventId
	}
	return 0
}

type TimerFiredEventAttributes struct {
	TimerId        string `protobuf:"bytes,1,opt,name=timerId,proto3" json:"timerId,omitempty"`
	StartedEventId int64  `protobuf:"varint,2,opt,name=startedEventId,proto3" json:"startedEventId,omitempty"`
}

func (m *TimerFiredEventAttributes) Reset()         { *m = TimerFiredEventAttributes{} }
func (m *TimerFiredEventAttributes) String() string { return proto.CompactTextString(m) }
func (*TimerFiredEventAttributes) ProtoMessage()    {}
func (*TimerFiredEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7135fdf3a2c9ba09, []int{19}
}
func (m *TimerFiredEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimerFiredEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimerFiredEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimerFiredEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimerFiredEventAttributes.Merge(m, src)
}
func (m *TimerFiredEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *TimerFiredEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_TimerFiredEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_TimerFiredEventAttributes proto.InternalMessageInfo

func (m *TimerFiredEventAttributes) GetTimerId() string {
	if m != nil {
		return m.TimerId
	}
	return ""
}

func (m *TimerFiredEventAttributes) GetStartedEventId() int64 {
	if m != nil {
		return m.StartedEventId
	}
	return 0
}

type TimerCanceledEventAttributes struct {
	TimerId                      string `protobuf:"bytes,1,opt,name=timerId,proto3" json:"timerId,omitempty"`
	StartedEventId               int64  `protobuf:"varint,2,opt,name=startedEventId,proto3" json:"startedEventId,omitempty"`
	DecisionTaskCompletedEventId int64  `protobuf:"varint,3,opt,name=decisionTaskCompletedEventId,proto3" json:"decisionTaskCompletedEventId,omitempty"`
	Identity                     string `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (m *TimerCanceledEventAttributes) Reset()         { *m = TimerCanceledEventAttributes{} }
func (m *TimerCanceledEventAttributes) String() string { return proto.CompactTextString(m) }
func (*TimerCanceledEventAttributes) ProtoMessage()    {}
func (*TimerCanceledEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7135fdf3a2c9ba09, []int{20}
}
func (m *TimerCanceledEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimerCanceledEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimerCanceledEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimerCanceledEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimerCanceledEventAttributes.Merge(m, src)
}
func (m *TimerCanceledEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *TimerCanceledEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_TimerCanceledEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_TimerCanceledEventAttributes proto.InternalMessageInfo

func (m *TimerCanceledEventAttributes) GetTimerId() string {
	if m != nil {
		return m.TimerId
	}
	return ""
}

func (m *TimerCanceledEventAttributes) GetStartedEventId() int64 {
	if m != nil {
		return m.StartedEventId
	}
	return 0
}

func (m *TimerCanceledEventAttributes) GetDecisionTaskCompletedEventId() int64 {
	if m != nil {
		return m.DecisionTaskCompletedEventId
	}
	return 0
}

func (m *TimerCanceledEventAttributes) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

type CancelTimerFailedEventAttributes struct {
	TimerId                      string `protobuf:"bytes,1,opt,name=timerId,proto3" json:"timerId,omitempty"`
	Cause                        string `protobuf:"bytes,2,opt,name=cause,proto3" json:"cause,omitempty"`
	DecisionTaskCompletedEventId int64  `protobuf:"varint,3,opt,name=decisionTaskCompletedEventId,proto3" json:"decisionTaskCompletedEventId,omitempty"`
	Identity                     string `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (m *CancelTimerFailedEventAttributes) Reset()         { *m = CancelTimerFailedEventAttributes{} }
func (m *CancelTimerFailedEventAttributes) String() string { return proto.CompactTextString(m) }
func (*CancelTimerFailedEventAttributes) ProtoMessage()    {}
func (*CancelTimerFailedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7135fdf3a2c9ba09, []int{21}
}
func (m *CancelTimerFailedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancelTimerFailedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancelTimerFailedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancelTimerFailedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelTimerFailedEventAttributes.Merge(m, src)
}
func (m *CancelTimerFailedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *CancelTimerFailedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelTimerFailedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_CancelTimerFailedEventAttributes proto.InternalMessageInfo

func (m *CancelTimerFailedEventAttributes) GetTimerId() string {
	if m != nil {
		return m.TimerId
	}
	return ""
}

func (m *CancelTimerFailedEventAttributes) GetCause() string {
	if m != nil {
		return m.Cause
	}
	return ""
}

func (m *CancelTimerFailedEventAttributes) GetDecisionTaskCompletedEventId() int64 {
	if m != nil {
		return m.DecisionTaskCompletedEventId
	}
	return 0
}

func (m *CancelTimerFailedEventAttributes) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

type WorkflowExecutionCancelRequestedEventAttributes struct {
	Cause                     string                       `protobuf:"bytes,1,opt,name=cause,proto3" json:"cause,omitempty"`
	ExternalInitiatedEventId  int64                        `protobuf:"varint,2,opt,name=externalInitiatedEventId,proto3" json:"externalInitiatedEventId,omitempty"`
	ExternalWorkflowExecution *execution.WorkflowExecution `protobuf:"bytes,3,opt,name=externalWorkflowExecution,proto3" json:"externalWorkflowExecution,omitempty"`
	Identity                  string                       `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (m *WorkflowExecutionCancelRequestedEventAttributes) Reset() {
	*m = WorkflowExecutionCancelRequestedEventAttributes{}
}
func (m *WorkflowExecutionCancelRequestedEventAttributes) String() string {
	return proto.CompactTextString(m)
}
func (*WorkflowExecutionCancelRequestedEventAttributes) ProtoMessage() {}
func (*WorkflowExecutionCancelRequestedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7135fdf3a2c9ba09, []int{22}
}
func (m *WorkflowExecutionCancelRequestedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowExecutionCancelRequestedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowExecutionCancelRequestedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowExecutionCancelRequestedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowExecutionCancelRequestedEventAttributes.Merge(m, src)
}
func (m *WorkflowExecutionCancelRequestedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowExecutionCancelRequestedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowExecutionCancelRequestedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowExecutionCancelRequestedEventAttributes proto.InternalMessageInfo

func (m *WorkflowExecutionCancelRequestedEventAttributes) GetCause() string {
	if m != nil {
		return m.Cause
	}
	return ""
}

func (m *WorkflowExecutionCancelRequestedEventAttributes) GetExternalInitiatedEventId() int64 {
	if m != nil {
		return m.ExternalInitiatedEventId
	}
	return 0
}

func (m *WorkflowExecutionCancelRequestedEventAttributes) GetExternalWorkflowExecution() *execution.WorkflowExecution {
	if m != nil {
		return m.ExternalWorkflowExecution
	}
	return nil
}

func (m *WorkflowExecutionCancelRequestedEventAttributes) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

type WorkflowExecutionCanceledEventAttributes struct {
	DecisionTaskCompletedEventId int64           `protobuf:"varint,1,opt,name=decisionTaskCompletedEventId,proto3" json:"decisionTaskCompletedEventId,omitempty"`
	Details                      *common.Payload `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
}

func (m *WorkflowExecutionCanceledEventAttributes) Reset() {
	*m = WorkflowExecutionCanceledEventAttributes{}
}
func (m *WorkflowExecutionCanceledEventAttributes) String() string { return proto.CompactTextString(m) }
func (*WorkflowExecutionCanceledEventAttributes) ProtoMessage()    {}
func (*WorkflowExecutionCanceledEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7135fdf3a2c9ba09, []int{23}
}
func (m *WorkflowExecutionCanceledEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowExecutionCanceledEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowExecutionCanceledEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowExecutionCanceledEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowExecutionCanceledEventAttributes.Merge(m, src)
}
func (m *WorkflowExecutionCanceledEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowExecutionCanceledEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowExecutionCanceledEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowExecutionCanceledEventAttributes proto.InternalMessageInfo

func (m *WorkflowExecutionCanceledEventAttributes) GetDecisionTaskCompletedEventId() int64 {
	if m != nil {
		return m.DecisionTaskCompletedEventId
	}
	return 0
}

func (m *WorkflowExecutionCanceledEventAttributes) GetDetails() *common.Payload {
	if m != nil {
		return m.Details
	}
	return nil
}

type MarkerRecordedEventAttributes struct {
	MarkerName                   string          `protobuf:"bytes,1,opt,name=markerName,proto3" json:"markerName,omitempty"`
	Details                      *common.Payload `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	DecisionTaskCompletedEventId int64           `protobuf:"varint,3,opt,name=decisionTaskCompletedEventId,proto3" json:"decisionTaskCompletedEventId,omitempty"`
	Header                       *common.Header  `protobuf:"bytes,4,opt,name=header,proto3" json:"header,omitempty"`
}

func (m *MarkerRecordedEventAttributes) Reset()         { *m = MarkerRecordedEventAttributes{} }
func (m *MarkerRecordedEventAttributes) String() string { return proto.CompactTextString(m) }
func (*MarkerRecordedEventAttributes) ProtoMessage()    {}
func (*MarkerRecordedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7135fdf3a2c9ba09, []int{24}
}
func (m *MarkerRecordedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarkerRecordedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarkerRecordedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarkerRecordedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarkerRecordedEventAttributes.Merge(m, src)
}
func (m *MarkerRecordedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *MarkerRecordedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_MarkerRecordedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_MarkerRecordedEventAttributes proto.InternalMessageInfo

func (m *MarkerRecordedEventAttributes) GetMarkerName() string {
	if m != nil {
		return m.MarkerName
	}
	return ""
}

func (m *MarkerRecordedEventAttributes) GetDetails() *common.Payload {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *MarkerRecordedEventAttributes) GetDecisionTaskCompletedEventId() int64 {
	if m != nil {
		return m.DecisionTaskCompletedEventId
	}
	return 0
}

func (m *MarkerRecordedEventAttributes) GetHeader() *common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

type WorkflowExecutionSignaledEventAttributes struct {
	SignalName string          `protobuf:"bytes,1,opt,name=signalName,proto3" json:"signalName,omitempty"`
	Input      *common.Payload `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	Identity   string          `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (m *WorkflowExecutionSignaledEventAttributes) Reset() {
	*m = WorkflowExecutionSignaledEventAttributes{}
}
func (m *WorkflowExecutionSignaledEventAttributes) String() string { return proto.CompactTextString(m) }
func (*WorkflowExecutionSignaledEventAttributes) ProtoMessage()    {}
func (*WorkflowExecutionSignaledEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7135fdf3a2c9ba09, []int{25}
}
func (m *WorkflowExecutionSignaledEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowExecutionSignaledEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowExecutionSignaledEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowExecutionSignaledEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowExecutionSignaledEventAttributes.Merge(m, src)
}
func (m *WorkflowExecutionSignaledEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowExecutionSignaledEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowExecutionSignaledEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowExecutionSignaledEventAttributes proto.InternalMessageInfo

func (m *WorkflowExecutionSignaledEventAttributes) GetSignalName() string {
	if m != nil {
		return m.SignalName
	}
	return ""
}

func (m *WorkflowExecutionSignaledEventAttributes) GetInput() *common.Payload {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *WorkflowExecutionSignaledEventAttributes) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

type WorkflowExecutionTerminatedEventAttributes struct {
	Reason   string          `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	Details  *common.Payload `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	Identity string          `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (m *WorkflowExecutionTerminatedEventAttributes) Reset() {
	*m = WorkflowExecutionTerminatedEventAttributes{}
}
func (m *WorkflowExecutionTerminatedEventAttributes) String() string {
	return proto.CompactTextString(m)
}
func (*WorkflowExecutionTerminatedEventAttributes) ProtoMessage() {}
func (*WorkflowExecutionTerminatedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7135fdf3a2c9ba09, []int{26}
}
func (m *WorkflowExecutionTerminatedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowExecutionTerminatedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowExecutionTerminatedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowExecutionTerminatedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowExecutionTerminatedEventAttributes.Merge(m, src)
}
func (m *WorkflowExecutionTerminatedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowExecutionTerminatedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowExecutionTerminatedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowExecutionTerminatedEventAttributes proto.InternalMessageInfo

func (m *WorkflowExecutionTerminatedEventAttributes) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *WorkflowExecutionTerminatedEventAttributes) GetDetails() *common.Payload {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *WorkflowExecutionTerminatedEventAttributes) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

type RequestCancelExternalWorkflowExecutionInitiatedEventAttributes struct {
	DecisionTaskCompletedEventId int64                        `protobuf:"varint,1,opt,name=decisionTaskCompletedEventId,proto3" json:"decisionTaskCompletedEventId,omitempty"`
	Namespace                    string                       `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkflowExecution            *execution.WorkflowExecution `protobuf:"bytes,3,opt,name=workflowExecution,proto3" json:"workflowExecution,omitempty"`
	Control                      string                       `protobuf:"bytes,4,opt,name=control,proto3" json:"control,omitempty"`
	ChildWorkflowOnly            bool                         `protobuf:"varint,5,opt,name=childWorkflowOnly,proto3" json:"childWorkflowOnly,omitempty"`
}

func (m *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) Reset() {
	*m = RequestCancelExternalWorkflowExecutionInitiatedEventAttributes{}
}
func (m *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) String() string {
	return proto.CompactTextString(m)
}
func (*RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) ProtoMessage() {}
func (*RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7135fdf3a2c9ba09, []int{27}
}
func (m *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestCancelExternalWorkflowExecutionInitiatedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestCancelExternalWorkflowExecutionInitiatedEventAttributes.Merge(m, src)
}
func (m *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestCancelExternalWorkflowExecutionInitiatedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_RequestCancelExternalWorkflowExecutionInitiatedEventAttributes proto.InternalMessageInfo

func (m *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) GetDecisionTaskCompletedEventId() int64 {
	if m != nil {
		return m.DecisionTaskCompletedEventId
	}
	return 0
}

func (m *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) GetWorkflowExecution() *execution.WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) GetControl() string {
	if m != nil {
		return m.Control
	}
	return ""
}

func (m *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) GetChildWorkflowOnly() bool {
	if m != nil {
		return m.ChildWorkflowOnly
	}
	return false
}

type RequestCancelExternalWorkflowExecutionFailedEventAttributes struct {
	Cause                        WorkflowExecutionFailedCause `protobuf:"varint,1,opt,name=cause,proto3,enum=event.WorkflowExecutionFailedCause" json:"cause,omitempty"`
	DecisionTaskCompletedEventId int64                        `protobuf:"varint,2,opt,name=decisionTaskCompletedEventId,proto3" json:"decisionTaskCompletedEventId,omitempty"`
	Namespace                    string                       `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkflowExecution            *execution.WorkflowExecution `protobuf:"bytes,4,opt,name=workflowExecution,proto3" json:"workflowExecution,omitempty"`
	InitiatedEventId             int64                        `protobuf:"varint,5,opt,name=initiatedEventId,proto3" json:"initiatedEventId,omitempty"`
	Control                      string                       `protobuf:"bytes,6,opt,name=control,proto3" json:"control,omitempty"`
}

func (m *RequestCancelExternalWorkflowExecutionFailedEventAttributes) Reset() {
	*m = RequestCancelExternalWorkflowExecutionFailedEventAttributes{}
}
func (m *RequestCancelExternalWorkflowExecutionFailedEventAttributes) String() string {
	return proto.CompactTextString(m)
}
func (*RequestCancelExternalWorkflowExecutionFailedEventAttributes) ProtoMessage() {}
func (*RequestCancelExternalWorkflowExecutionFailedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7135fdf3a2c9ba09, []int{28}
}
func (m *RequestCancelExternalWorkflowExecutionFailedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestCancelExternalWorkflowExecutionFailedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestCancelExternalWorkflowExecutionFailedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestCancelExternalWorkflowExecutionFailedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestCancelExternalWorkflowExecutionFailedEventAttributes.Merge(m, src)
}
func (m *RequestCancelExternalWorkflowExecutionFailedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *RequestCancelExternalWorkflowExecutionFailedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestCancelExternalWorkflowExecutionFailedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_RequestCancelExternalWorkflowExecutionFailedEventAttributes proto.InternalMessageInfo

func (m *RequestCancelExternalWorkflowExecutionFailedEventAttributes) GetCause() WorkflowExecutionFailedCause {
	if m != nil {
		return m.Cause
	}
	return WorkflowExecutionFailedCause_UnknownExternalWorkflowExecution
}

func (m *RequestCancelExternalWorkflowExecutionFailedEventAttributes) GetDecisionTaskCompletedEventId() int64 {
	if m != nil {
		return m.DecisionTaskCompletedEventId
	}
	return 0
}

func (m *RequestCancelExternalWorkflowExecutionFailedEventAttributes) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *RequestCancelExternalWorkflowExecutionFailedEventAttributes) GetWorkflowExecution() *execution.WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *RequestCancelExternalWorkflowExecutionFailedEventAttributes) GetInitiatedEventId() int64 {
	if m != nil {
		return m.InitiatedEventId
	}
	return 0
}

func (m *RequestCancelExternalWorkflowExecutionFailedEventAttributes) GetControl() string {
	if m != nil {
		return m.Control
	}
	return ""
}

type ExternalWorkflowExecutionCancelRequestedEventAttributes struct {
	InitiatedEventId  int64                        `protobuf:"varint,1,opt,name=initiatedEventId,proto3" json:"initiatedEventId,omitempty"`
	Namespace         string                       `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkflowExecution *execution.WorkflowExecution `protobuf:"bytes,3,opt,name=workflowExecution,proto3" json:"workflowExecution,omitempty"`
}

func (m *ExternalWorkflowExecutionCancelRequestedEventAttributes) Reset() {
	*m = ExternalWorkflowExecutionCancelRequestedEventAttributes{}
}
func (m *ExternalWorkflowExecutionCancelRequestedEventAttributes) String() string {
	return proto.CompactTextString(m)
}
func (*ExternalWorkflowExecutionCancelRequestedEventAttributes) ProtoMessage() {}
func (*ExternalWorkflowExecutionCancelRequestedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7135fdf3a2c9ba09, []int{29}
}
func (m *ExternalWorkflowExecutionCancelRequestedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExternalWorkflowExecutionCancelRequestedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExternalWorkflowExecutionCancelRequestedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExternalWorkflowExecutionCancelRequestedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExternalWorkflowExecutionCancelRequestedEventAttributes.Merge(m, src)
}
func (m *ExternalWorkflowExecutionCancelRequestedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *ExternalWorkflowExecutionCancelRequestedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_ExternalWorkflowExecutionCancelRequestedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_ExternalWorkflowExecutionCancelRequestedEventAttributes proto.InternalMessageInfo

func (m *ExternalWorkflowExecutionCancelRequestedEventAttributes) GetInitiatedEventId() int64 {
	if m != nil {
		return m.InitiatedEventId
	}
	return 0
}

func (m *ExternalWorkflowExecutionCancelRequestedEventAttributes) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ExternalWorkflowExecutionCancelRequestedEventAttributes) GetWorkflowExecution() *execution.WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

type SignalExternalWorkflowExecutionInitiatedEventAttributes struct {
	DecisionTaskCompletedEventId int64                        `protobuf:"varint,1,opt,name=decisionTaskCompletedEventId,proto3" json:"decisionTaskCompletedEventId,omitempty"`
	Namespace                    string                       `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkflowExecution            *execution.WorkflowExecution `protobuf:"bytes,3,opt,name=workflowExecution,proto3" json:"workflowExecution,omitempty"`
	SignalName                   string                       `protobuf:"bytes,4,opt,name=signalName,proto3" json:"signalName,omitempty"`
	Input                        *common.Payload              `protobuf:"bytes,5,opt,name=input,proto3" json:"input,omitempty"`
	Control                      string                       `protobuf:"bytes,6,opt,name=control,proto3" json:"control,omitempty"`
	ChildWorkflowOnly            bool                         `protobuf:"varint,7,opt,name=childWorkflowOnly,proto3" json:"childWorkflowOnly,omitempty"`
}

func (m *SignalExternalWorkflowExecutionInitiatedEventAttributes) Reset() {
	*m = SignalExternalWorkflowExecutionInitiatedEventAttributes{}
}
func (m *SignalExternalWorkflowExecutionInitiatedEventAttributes) String() string {
	return proto.CompactTextString(m)
}
func (*SignalExternalWorkflowExecutionInitiatedEventAttributes) ProtoMessage() {}
func (*SignalExternalWorkflowExecutionInitiatedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7135fdf3a2c9ba09, []int{30}
}
func (m *SignalExternalWorkflowExecutionInitiatedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignalExternalWorkflowExecutionInitiatedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignalExternalWorkflowExecutionInitiatedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignalExternalWorkflowExecutionInitiatedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignalExternalWorkflowExecutionInitiatedEventAttributes.Merge(m, src)
}
func (m *SignalExternalWorkflowExecutionInitiatedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *SignalExternalWorkflowExecutionInitiatedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_SignalExternalWorkflowExecutionInitiatedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_SignalExternalWorkflowExecutionInitiatedEventAttributes proto.InternalMessageInfo

func (m *SignalExternalWorkflowExecutionInitiatedEventAttributes) GetDecisionTaskCompletedEventId() int64 {
	if m != nil {
		return m.DecisionTaskCompletedEventId
	}
	return 0
}

func (m *SignalExternalWorkflowExecutionInitiatedEventAttributes) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *SignalExternalWorkflowExecutionInitiatedEventAttributes) GetWorkflowExecution() *execution.WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *SignalExternalWorkflowExecutionInitiatedEventAttributes) GetSignalName() string {
	if m != nil {
		return m.SignalName
	}
	return ""
}

func (m *SignalExternalWorkflowExecutionInitiatedEventAttributes) GetInput() *common.Payload {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *SignalExternalWorkflowExecutionInitiatedEventAttributes) GetControl() string {
	if m != nil {
		return m.Control
	}
	return ""
}

func (m *SignalExternalWorkflowExecutionInitiatedEventAttributes) GetChildWorkflowOnly() bool {
	if m != nil {
		return m.ChildWorkflowOnly
	}
	return false
}

type SignalExternalWorkflowExecutionFailedEventAttributes struct {
	Cause                        WorkflowExecutionFailedCause `protobuf:"varint,1,opt,name=cause,proto3,enum=event.WorkflowExecutionFailedCause" json:"cause,omitempty"`
	DecisionTaskCompletedEventId int64                        `protobuf:"varint,2,opt,name=decisionTaskCompletedEventId,proto3" json:"decisionTaskCompletedEventId,omitempty"`
	Namespace                    string                       `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkflowExecution            *execution.WorkflowExecution `protobuf:"bytes,4,opt,name=workflowExecution,proto3" json:"workflowExecution,omitempty"`
	InitiatedEventId             int64                        `protobuf:"varint,5,opt,name=initiatedEventId,proto3" json:"initiatedEventId,omitempty"`
	Control                      string                       `protobuf:"bytes,6,opt,name=control,proto3" json:"control,omitempty"`
}

func (m *SignalExternalWorkflowExecutionFailedEventAttributes) Reset() {
	*m = SignalExternalWorkflowExecutionFailedEventAttributes{}
}
func (m *SignalExternalWorkflowExecutionFailedEventAttributes) String() string {
	return proto.CompactTextString(m)
}
func (*SignalExternalWorkflowExecutionFailedEventAttributes) ProtoMessage() {}
func (*SignalExternalWorkflowExecutionFailedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7135fdf3a2c9ba09, []int{31}
}
func (m *SignalExternalWorkflowExecutionFailedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignalExternalWorkflowExecutionFailedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignalExternalWorkflowExecutionFailedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignalExternalWorkflowExecutionFailedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignalExternalWorkflowExecutionFailedEventAttributes.Merge(m, src)
}
func (m *SignalExternalWorkflowExecutionFailedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *SignalExternalWorkflowExecutionFailedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_SignalExternalWorkflowExecutionFailedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_SignalExternalWorkflowExecutionFailedEventAttributes proto.InternalMessageInfo

func (m *SignalExternalWorkflowExecutionFailedEventAttributes) GetCause() WorkflowExecutionFailedCause {
	if m != nil {
		return m.Cause
	}
	return WorkflowExecutionFailedCause_UnknownExternalWorkflowExecution
}

func (m *SignalExternalWorkflowExecutionFailedEventAttributes) GetDecisionTaskCompletedEventId() int64 {
	if m != nil {
		return m.DecisionTaskCompletedEventId
	}
	return 0
}

func (m *SignalExternalWorkflowExecutionFailedEventAttributes) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *SignalExternalWorkflowExecutionFailedEventAttributes) GetWorkflowExecution() *execution.WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *SignalExternalWorkflowExecutionFailedEventAttributes) GetInitiatedEventId() int64 {
	if m != nil {
		return m.InitiatedEventId
	}
	return 0
}

func (m *SignalExternalWorkflowExecutionFailedEventAttributes) GetControl() string {
	if m != nil {
		return m.Control
	}
	return ""
}

type ExternalWorkflowExecutionSignaledEventAttributes struct {
	InitiatedEventId  int64                        `protobuf:"varint,1,opt,name=initiatedEventId,proto3" json:"initiatedEventId,omitempty"`
	Namespace         string                       `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkflowExecution *execution.WorkflowExecution `protobuf:"bytes,3,opt,name=workflowExecution,proto3" json:"workflowExecution,omitempty"`
	Control           string                       `protobuf:"bytes,4,opt,name=control,proto3" json:"control,omitempty"`
}

func (m *ExternalWorkflowExecutionSignaledEventAttributes) Reset() {
	*m = ExternalWorkflowExecutionSignaledEventAttributes{}
}
func (m *ExternalWorkflowExecutionSignaledEventAttributes) String() string {
	return proto.CompactTextString(m)
}
func (*ExternalWorkflowExecutionSignaledEventAttributes) ProtoMessage() {}
func (*ExternalWorkflowExecutionSignaledEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7135fdf3a2c9ba09, []int{32}
}
func (m *ExternalWorkflowExecutionSignaledEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExternalWorkflowExecutionSignaledEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExternalWorkflowExecutionSignaledEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExternalWorkflowExecutionSignaledEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExternalWorkflowExecutionSignaledEventAttributes.Merge(m, src)
}
func (m *ExternalWorkflowExecutionSignaledEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *ExternalWorkflowExecutionSignaledEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_ExternalWorkflowExecutionSignaledEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_ExternalWorkflowExecutionSignaledEventAttributes proto.InternalMessageInfo

func (m *ExternalWorkflowExecutionSignaledEventAttributes) GetInitiatedEventId() int64 {
	if m != nil {
		return m.InitiatedEventId
	}
	return 0
}

func (m *ExternalWorkflowExecutionSignaledEventAttributes) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ExternalWorkflowExecutionSignaledEventAttributes) GetWorkflowExecution() *execution.WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *ExternalWorkflowExecutionSignaledEventAttributes) GetControl() string {
	if m != nil {
		return m.Control
	}
	return ""
}

type UpsertWorkflowSearchAttributesEventAttributes struct {
	DecisionTaskCompletedEventId int64                    `protobuf:"varint,1,opt,name=decisionTaskCompletedEventId,proto3" json:"decisionTaskCompletedEventId,omitempty"`
	SearchAttributes             *common.SearchAttributes `protobuf:"bytes,2,opt,name=searchAttributes,proto3" json:"searchAttributes,omitempty"`
}

func (m *UpsertWorkflowSearchAttributesEventAttributes) Reset() {
	*m = UpsertWorkflowSearchAttributesEventAttributes{}
}
func (m *UpsertWorkflowSearchAttributesEventAttributes) String() string {
	return proto.CompactTextString(m)
}
func (*UpsertWorkflowSearchAttributesEventAttributes) ProtoMessage() {}
func (*UpsertWorkflowSearchAttributesEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7135fdf3a2c9ba09, []int{33}
}
func (m *UpsertWorkflowSearchAttributesEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsertWorkflowSearchAttributesEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsertWorkflowSearchAttributesEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpsertWorkflowSearchAttributesEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertWorkflowSearchAttributesEventAttributes.Merge(m, src)
}
func (m *UpsertWorkflowSearchAttributesEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *UpsertWorkflowSearchAttributesEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertWorkflowSearchAttributesEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertWorkflowSearchAttributesEventAttributes proto.InternalMessageInfo

func (m *UpsertWorkflowSearchAttributesEventAttributes) GetDecisionTaskCompletedEventId() int64 {
	if m != nil {
		return m.DecisionTaskCompletedEventId
	}
	return 0
}

func (m *UpsertWorkflowSearchAttributesEventAttributes) GetSearchAttributes() *common.SearchAttributes {
	if m != nil {
		return m.SearchAttributes
	}
	return nil
}

type StartChildWorkflowExecutionInitiatedEventAttributes struct {
	Namespace                           string                       `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkflowId                          string                       `protobuf:"bytes,2,opt,name=workflowId,proto3" json:"workflowId,omitempty"`
	WorkflowType                        *common.WorkflowType         `protobuf:"bytes,3,opt,name=workflowType,proto3" json:"workflowType,omitempty"`
	TaskList                            *tasklist.TaskList           `protobuf:"bytes,4,opt,name=taskList,proto3" json:"taskList,omitempty"`
	Input                               *common.Payload              `protobuf:"bytes,5,opt,name=input,proto3" json:"input,omitempty"`
	ExecutionStartToCloseTimeoutSeconds int32                        `protobuf:"varint,6,opt,name=executionStartToCloseTimeoutSeconds,proto3" json:"executionStartToCloseTimeoutSeconds,omitempty"`
	TaskStartToCloseTimeoutSeconds      int32                        `protobuf:"varint,7,opt,name=taskStartToCloseTimeoutSeconds,proto3" json:"taskStartToCloseTimeoutSeconds,omitempty"`
	ParentClosePolicy                   common.ParentClosePolicy     `protobuf:"varint,8,opt,name=parentClosePolicy,proto3,enum=common.ParentClosePolicy" json:"parentClosePolicy,omitempty"`
	Control                             string                       `protobuf:"bytes,9,opt,name=control,proto3" json:"control,omitempty"`
	DecisionTaskCompletedEventId        int64                        `protobuf:"varint,10,opt,name=decisionTaskCompletedEventId,proto3" json:"decisionTaskCompletedEventId,omitempty"`
	WorkflowIdReusePolicy               common.WorkflowIdReusePolicy `protobuf:"varint,11,opt,name=workflowIdReusePolicy,proto3,enum=common.WorkflowIdReusePolicy" json:"workflowIdReusePolicy,omitempty"`
	RetryPolicy                         *common.RetryPolicy          `protobuf:"bytes,12,opt,name=retryPolicy,proto3" json:"retryPolicy,omitempty"`
	CronSchedule                        string                       `protobuf:"bytes,13,opt,name=cronSchedule,proto3" json:"cronSchedule,omitempty"`
	Header                              *common.Header               `protobuf:"bytes,14,opt,name=header,proto3" json:"header,omitempty"`
	Memo                                *common.Memo                 `protobuf:"bytes,15,opt,name=memo,proto3" json:"memo,omitempty"`
	SearchAttributes                    *common.SearchAttributes     `protobuf:"bytes,16,opt,name=searchAttributes,proto3" json:"searchAttributes,omitempty"`
}

func (m *StartChildWorkflowExecutionInitiatedEventAttributes) Reset() {
	*m = StartChildWorkflowExecutionInitiatedEventAttributes{}
}
func (m *StartChildWorkflowExecutionInitiatedEventAttributes) String() string {
	return proto.CompactTextString(m)
}
func (*StartChildWorkflowExecutionInitiatedEventAttributes) ProtoMessage() {}
func (*StartChildWorkflowExecutionInitiatedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7135fdf3a2c9ba09, []int{34}
}
func (m *StartChildWorkflowExecutionInitiatedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartChildWorkflowExecutionInitiatedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartChildWorkflowExecutionInitiatedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartChildWorkflowExecutionInitiatedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartChildWorkflowExecutionInitiatedEventAttributes.Merge(m, src)
}
func (m *StartChildWorkflowExecutionInitiatedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *StartChildWorkflowExecutionInitiatedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_StartChildWorkflowExecutionInitiatedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_StartChildWorkflowExecutionInitiatedEventAttributes proto.InternalMessageInfo

func (m *StartChildWorkflowExecutionInitiatedEventAttributes) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *StartChildWorkflowExecutionInitiatedEventAttributes) GetWorkflowId() string {
	if m != nil {
		return m.WorkflowId
	}
	return ""
}

func (m *StartChildWorkflowExecutionInitiatedEventAttributes) GetWorkflowType() *common.WorkflowType {
	if m != nil {
		return m.WorkflowType
	}
	return nil
}

func (m *StartChildWorkflowExecutionInitiatedEventAttributes) GetTaskList() *tasklist.TaskList {
	if m != nil {
		return m.TaskList
	}
	return nil
}

func (m *StartChildWorkflowExecutionInitiatedEventAttributes) GetInput() *common.Payload {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *StartChildWorkflowExecutionInitiatedEventAttributes) GetExecutionStartToCloseTimeoutSeconds() int32 {
	if m != nil {
		return m.ExecutionStartToCloseTimeoutSeconds
	}
	return 0
}

func (m *StartChildWorkflowExecutionInitiatedEventAttributes) GetTaskStartToCloseTimeoutSeconds() int32 {
	if m != nil {
		return m.TaskStartToCloseTimeoutSeconds
	}
	return 0
}

func (m *StartChildWorkflowExecutionInitiatedEventAttributes) GetParentClosePolicy() common.ParentClosePolicy {
	if m != nil {
		return m.ParentClosePolicy
	}
	return common.ParentClosePolicy_Abandon
}

func (m *StartChildWorkflowExecutionInitiatedEventAttributes) GetControl() string {
	if m != nil {
		return m.Control
	}
	return ""
}

func (m *StartChildWorkflowExecutionInitiatedEventAttributes) GetDecisionTaskCompletedEventId() int64 {
	if m != nil {
		return m.DecisionTaskCompletedEventId
	}
	return 0
}

func (m *StartChildWorkflowExecutionInitiatedEventAttributes) GetWorkflowIdReusePolicy() common.WorkflowIdReusePolicy {
	if m != nil {
		return m.WorkflowIdReusePolicy
	}
	return common.WorkflowIdReusePolicy_AllowDuplicate
}

func (m *StartChildWorkflowExecutionInitiatedEventAttributes) GetRetryPolicy() *common.RetryPolicy {
	if m != nil {
		return m.RetryPolicy
	}
	return nil
}

func (m *StartChildWorkflowExecutionInitiatedEventAttributes) GetCronSchedule() string {
	if m != nil {
		return m.CronSchedule
	}
	return ""
}

func (m *StartChildWorkflowExecutionInitiatedEventAttributes) GetHeader() *common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *StartChildWorkflowExecutionInitiatedEventAttributes) GetMemo() *common.Memo {
	if m != nil {
		return m.Memo
	}
	return nil
}

func (m *StartChildWorkflowExecutionInitiatedEventAttributes) GetSearchAttributes() *common.SearchAttributes {
	if m != nil {
		return m.SearchAttributes
	}
	return nil
}

type StartChildWorkflowExecutionFailedEventAttributes struct {
	Namespace                    string                       `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkflowId                   string                       `protobuf:"bytes,2,opt,name=workflowId,proto3" json:"workflowId,omitempty"`
	WorkflowType                 *common.WorkflowType         `protobuf:"bytes,3,opt,name=workflowType,proto3" json:"workflowType,omitempty"`
	Cause                        WorkflowExecutionFailedCause `protobuf:"varint,4,opt,name=cause,proto3,enum=event.WorkflowExecutionFailedCause" json:"cause,omitempty"`
	Control                      string                       `protobuf:"bytes,5,opt,name=control,proto3" json:"control,omitempty"`
	InitiatedEventId             int64                        `protobuf:"varint,6,opt,name=initiatedEventId,proto3" json:"initiatedEventId,omitempty"`
	DecisionTaskCompletedEventId int64                        `protobuf:"varint,7,opt,name=decisionTaskCompletedEventId,proto3" json:"decisionTaskCompletedEventId,omitempty"`
}

func (m *StartChildWorkflowExecutionFailedEventAttributes) Reset() {
	*m = StartChildWorkflowExecutionFailedEventAttributes{}
}
func (m *StartChildWorkflowExecutionFailedEventAttributes) String() string {
	return proto.CompactTextString(m)
}
func (*StartChildWorkflowExecutionFailedEventAttributes) ProtoMessage() {}
func (*StartChildWorkflowExecutionFailedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7135fdf3a2c9ba09, []int{35}
}
func (m *StartChildWorkflowExecutionFailedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartChildWorkflowExecutionFailedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartChildWorkflowExecutionFailedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartChildWorkflowExecutionFailedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartChildWorkflowExecutionFailedEventAttributes.Merge(m, src)
}
func (m *StartChildWorkflowExecutionFailedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *StartChildWorkflowExecutionFailedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_StartChildWorkflowExecutionFailedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_StartChildWorkflowExecutionFailedEventAttributes proto.InternalMessageInfo

func (m *StartChildWorkflowExecutionFailedEventAttributes) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *StartChildWorkflowExecutionFailedEventAttributes) GetWorkflowId() string {
	if m != nil {
		return m.WorkflowId
	}
	return ""
}

func (m *StartChildWorkflowExecutionFailedEventAttributes) GetWorkflowType() *common.WorkflowType {
	if m != nil {
		return m.WorkflowType
	}
	return nil
}

func (m *StartChildWorkflowExecutionFailedEventAttributes) GetCause() WorkflowExecutionFailedCause {
	if m != nil {
		return m.Cause
	}
	return WorkflowExecutionFailedCause_UnknownExternalWorkflowExecution
}

func (m *StartChildWorkflowExecutionFailedEventAttributes) GetControl() string {
	if m != nil {
		return m.Control
	}
	return ""
}

func (m *StartChildWorkflowExecutionFailedEventAttributes) GetInitiatedEventId() int64 {
	if m != nil {
		return m.InitiatedEventId
	}
	return 0
}

func (m *StartChildWorkflowExecutionFailedEventAttributes) GetDecisionTaskCompletedEventId() int64 {
	if m != nil {
		return m.DecisionTaskCompletedEventId
	}
	return 0
}

type ChildWorkflowExecutionStartedEventAttributes struct {
	Namespace         string                       `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	InitiatedEventId  int64                        `protobuf:"varint,2,opt,name=initiatedEventId,proto3" json:"initiatedEventId,omitempty"`
	WorkflowExecution *execution.WorkflowExecution `protobuf:"bytes,3,opt,name=workflowExecution,proto3" json:"workflowExecution,omitempty"`
	WorkflowType      *common.WorkflowType         `protobuf:"bytes,4,opt,name=workflowType,proto3" json:"workflowType,omitempty"`
	Header            *common.Header               `protobuf:"bytes,5,opt,name=header,proto3" json:"header,omitempty"`
}

func (m *ChildWorkflowExecutionStartedEventAttributes) Reset() {
	*m = ChildWorkflowExecutionStartedEventAttributes{}
}
func (m *ChildWorkflowExecutionStartedEventAttributes) String() string {
	return proto.CompactTextString(m)
}
func (*ChildWorkflowExecutionStartedEventAttributes) ProtoMessage() {}
func (*ChildWorkflowExecutionStartedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7135fdf3a2c9ba09, []int{36}
}
func (m *ChildWorkflowExecutionStartedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChildWorkflowExecutionStartedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChildWorkflowExecutionStartedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChildWorkflowExecutionStartedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChildWorkflowExecutionStartedEventAttributes.Merge(m, src)
}
func (m *ChildWorkflowExecutionStartedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *ChildWorkflowExecutionStartedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_ChildWorkflowExecutionStartedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_ChildWorkflowExecutionStartedEventAttributes proto.InternalMessageInfo

func (m *ChildWorkflowExecutionStartedEventAttributes) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ChildWorkflowExecutionStartedEventAttributes) GetInitiatedEventId() int64 {
	if m != nil {
		return m.InitiatedEventId
	}
	return 0
}

func (m *ChildWorkflowExecutionStartedEventAttributes) GetWorkflowExecution() *execution.WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *ChildWorkflowExecutionStartedEventAttributes) GetWorkflowType() *common.WorkflowType {
	if m != nil {
		return m.WorkflowType
	}
	return nil
}

func (m *ChildWorkflowExecutionStartedEventAttributes) GetHeader() *common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

type ChildWorkflowExecutionCompletedEventAttributes struct {
	Result            *common.Payload              `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Namespace         string                       `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkflowExecution *execution.WorkflowExecution `protobuf:"bytes,3,opt,name=workflowExecution,proto3" json:"workflowExecution,omitempty"`
	WorkflowType      *common.WorkflowType         `protobuf:"bytes,4,opt,name=workflowType,proto3" json:"workflowType,omitempty"`
	InitiatedEventId  int64                        `protobuf:"varint,5,opt,name=initiatedEventId,proto3" json:"initiatedEventId,omitempty"`
	StartedEventId    int64                        `protobuf:"varint,6,opt,name=startedEventId,proto3" json:"startedEventId,omitempty"`
}

func (m *ChildWorkflowExecutionCompletedEventAttributes) Reset() {
	*m = ChildWorkflowExecutionCompletedEventAttributes{}
}
func (m *ChildWorkflowExecutionCompletedEventAttributes) String() string {
	return proto.CompactTextString(m)
}
func (*ChildWorkflowExecutionCompletedEventAttributes) ProtoMessage() {}
func (*ChildWorkflowExecutionCompletedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7135fdf3a2c9ba09, []int{37}
}
func (m *ChildWorkflowExecutionCompletedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChildWorkflowExecutionCompletedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChildWorkflowExecutionCompletedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChildWorkflowExecutionCompletedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChildWorkflowExecutionCompletedEventAttributes.Merge(m, src)
}
func (m *ChildWorkflowExecutionCompletedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *ChildWorkflowExecutionCompletedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_ChildWorkflowExecutionCompletedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_ChildWorkflowExecutionCompletedEventAttributes proto.InternalMessageInfo

func (m *ChildWorkflowExecutionCompletedEventAttributes) GetResult() *common.Payload {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ChildWorkflowExecutionCompletedEventAttributes) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ChildWorkflowExecutionCompletedEventAttributes) GetWorkflowExecution() *execution.WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *ChildWorkflowExecutionCompletedEventAttributes) GetWorkflowType() *common.WorkflowType {
	if m != nil {
		return m.WorkflowType
	}
	return nil
}

func (m *ChildWorkflowExecutionCompletedEventAttributes) GetInitiatedEventId() int64 {
	if m != nil {
		return m.InitiatedEventId
	}
	return 0
}

func (m *ChildWorkflowExecutionCompletedEventAttributes) GetStartedEventId() int64 {
	if m != nil {
		return m.StartedEventId
	}
	return 0
}

type ChildWorkflowExecutionFailedEventAttributes struct {
	Reason            string                       `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	Details           *common.Payload              `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	Namespace         string                       `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkflowExecution *execution.WorkflowExecution `protobuf:"bytes,4,opt,name=workflowExecution,proto3" json:"workflowExecution,omitempty"`
	WorkflowType      *common.WorkflowType         `protobuf:"bytes,5,opt,name=workflowType,proto3" json:"workflowType,omitempty"`
	InitiatedEventId  int64                        `protobuf:"varint,6,opt,name=initiatedEventId,proto3" json:"initiatedEventId,omitempty"`
	StartedEventId    int64                        `protobuf:"varint,7,opt,name=startedEventId,proto3" json:"startedEventId,omitempty"`
}

func (m *ChildWorkflowExecutionFailedEventAttributes) Reset() {
	*m = ChildWorkflowExecutionFailedEventAttributes{}
}
func (m *ChildWorkflowExecutionFailedEventAttributes) String() string {
	return proto.CompactTextString(m)
}
func (*ChildWorkflowExecutionFailedEventAttributes) ProtoMessage() {}
func (*ChildWorkflowExecutionFailedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7135fdf3a2c9ba09, []int{38}
}
func (m *ChildWorkflowExecutionFailedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChildWorkflowExecutionFailedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChildWorkflowExecutionFailedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChildWorkflowExecutionFailedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChildWorkflowExecutionFailedEventAttributes.Merge(m, src)
}
func (m *ChildWorkflowExecutionFailedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *ChildWorkflowExecutionFailedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_ChildWorkflowExecutionFailedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_ChildWorkflowExecutionFailedEventAttributes proto.InternalMessageInfo

func (m *ChildWorkflowExecutionFailedEventAttributes) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *ChildWorkflowExecutionFailedEventAttributes) GetDetails() *common.Payload {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *ChildWorkflowExecutionFailedEventAttributes) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ChildWorkflowExecutionFailedEventAttributes) GetWorkflowExecution() *execution.WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *ChildWorkflowExecutionFailedEventAttributes) GetWorkflowType() *common.WorkflowType {
	if m != nil {
		return m.WorkflowType
	}
	return nil
}

func (m *ChildWorkflowExecutionFailedEventAttributes) GetInitiatedEventId() int64 {
	if m != nil {
		return m.InitiatedEventId
	}
	return 0
}

func (m *ChildWorkflowExecutionFailedEventAttributes) GetStartedEventId() int64 {
	if m != nil {
		return m.StartedEventId
	}
	return 0
}

type ChildWorkflowExecutionCanceledEventAttributes struct {
	Details           *common.Payload              `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	Namespace         string                       `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkflowExecution *execution.WorkflowExecution `protobuf:"bytes,3,opt,name=workflowExecution,proto3" json:"workflowExecution,omitempty"`
	WorkflowType      *common.WorkflowType         `protobuf:"bytes,4,opt,name=workflowType,proto3" json:"workflowType,omitempty"`
	InitiatedEventId  int64                        `protobuf:"varint,5,opt,name=initiatedEventId,proto3" json:"initiatedEventId,omitempty"`
	StartedEventId    int64                        `protobuf:"varint,6,opt,name=startedEventId,proto3" json:"startedEventId,omitempty"`
}

func (m *ChildWorkflowExecutionCanceledEventAttributes) Reset() {
	*m = ChildWorkflowExecutionCanceledEventAttributes{}
}
func (m *ChildWorkflowExecutionCanceledEventAttributes) String() string {
	return proto.CompactTextString(m)
}
func (*ChildWorkflowExecutionCanceledEventAttributes) ProtoMessage() {}
func (*ChildWorkflowExecutionCanceledEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7135fdf3a2c9ba09, []int{39}
}
func (m *ChildWorkflowExecutionCanceledEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChildWorkflowExecutionCanceledEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChildWorkflowExecutionCanceledEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChildWorkflowExecutionCanceledEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChildWorkflowExecutionCanceledEventAttributes.Merge(m, src)
}
func (m *ChildWorkflowExecutionCanceledEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *ChildWorkflowExecutionCanceledEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_ChildWorkflowExecutionCanceledEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_ChildWorkflowExecutionCanceledEventAttributes proto.InternalMessageInfo

func (m *ChildWorkflowExecutionCanceledEventAttributes) GetDetails() *common.Payload {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *ChildWorkflowExecutionCanceledEventAttributes) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ChildWorkflowExecutionCanceledEventAttributes) GetWorkflowExecution() *execution.WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *ChildWorkflowExecutionCanceledEventAttributes) GetWorkflowType() *common.WorkflowType {
	if m != nil {
		return m.WorkflowType
	}
	return nil
}

func (m *ChildWorkflowExecutionCanceledEventAttributes) GetInitiatedEventId() int64 {
	if m != nil {
		return m.InitiatedEventId
	}
	return 0
}

func (m *ChildWorkflowExecutionCanceledEventAttributes) GetStartedEventId() int64 {
	if m != nil {
		return m.StartedEventId
	}
	return 0
}

type ChildWorkflowExecutionTimedOutEventAttributes struct {
	TimeoutType       TimeoutType                  `protobuf:"varint,1,opt,name=timeoutType,proto3,enum=event.TimeoutType" json:"timeoutType,omitempty"`
	Namespace         string                       `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkflowExecution *execution.WorkflowExecution `protobuf:"bytes,3,opt,name=workflowExecution,proto3" json:"workflowExecution,omitempty"`
	WorkflowType      *common.WorkflowType         `protobuf:"bytes,4,opt,name=workflowType,proto3" json:"workflowType,omitempty"`
	InitiatedEventId  int64                        `protobuf:"varint,5,opt,name=initiatedEventId,proto3" json:"initiatedEventId,omitempty"`
	StartedEventId    int64                        `protobuf:"varint,6,opt,name=startedEventId,proto3" json:"startedEventId,omitempty"`
}

func (m *ChildWorkflowExecutionTimedOutEventAttributes) Reset() {
	*m = ChildWorkflowExecutionTimedOutEventAttributes{}
}
func (m *ChildWorkflowExecutionTimedOutEventAttributes) String() string {
	return proto.CompactTextString(m)
}
func (*ChildWorkflowExecutionTimedOutEventAttributes) ProtoMessage() {}
func (*ChildWorkflowExecutionTimedOutEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7135fdf3a2c9ba09, []int{40}
}
func (m *ChildWorkflowExecutionTimedOutEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChildWorkflowExecutionTimedOutEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChildWorkflowExecutionTimedOutEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChildWorkflowExecutionTimedOutEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChildWorkflowExecutionTimedOutEventAttributes.Merge(m, src)
}
func (m *ChildWorkflowExecutionTimedOutEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *ChildWorkflowExecutionTimedOutEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_ChildWorkflowExecutionTimedOutEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_ChildWorkflowExecutionTimedOutEventAttributes proto.InternalMessageInfo

func (m *ChildWorkflowExecutionTimedOutEventAttributes) GetTimeoutType() TimeoutType {
	if m != nil {
		return m.TimeoutType
	}
	return TimeoutType_StartToClose
}

func (m *ChildWorkflowExecutionTimedOutEventAttributes) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ChildWorkflowExecutionTimedOutEventAttributes) GetWorkflowExecution() *execution.WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *ChildWorkflowExecutionTimedOutEventAttributes) GetWorkflowType() *common.WorkflowType {
	if m != nil {
		return m.WorkflowType
	}
	return nil
}

func (m *ChildWorkflowExecutionTimedOutEventAttributes) GetInitiatedEventId() int64 {
	if m != nil {
		return m.InitiatedEventId
	}
	return 0
}

func (m *ChildWorkflowExecutionTimedOutEventAttributes) GetStartedEventId() int64 {
	if m != nil {
		return m.StartedEventId
	}
	return 0
}

type ChildWorkflowExecutionTerminatedEventAttributes struct {
	Namespace         string                       `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkflowExecution *execution.WorkflowExecution `protobuf:"bytes,2,opt,name=workflowExecution,proto3" json:"workflowExecution,omitempty"`
	WorkflowType      *common.WorkflowType         `protobuf:"bytes,3,opt,name=workflowType,proto3" json:"workflowType,omitempty"`
	InitiatedEventId  int64                        `protobuf:"varint,4,opt,name=initiatedEventId,proto3" json:"initiatedEventId,omitempty"`
	StartedEventId    int64                        `protobuf:"varint,5,opt,name=startedEventId,proto3" json:"startedEventId,omitempty"`
}

func (m *ChildWorkflowExecutionTerminatedEventAttributes) Reset() {
	*m = ChildWorkflowExecutionTerminatedEventAttributes{}
}
func (m *ChildWorkflowExecutionTerminatedEventAttributes) String() string {
	return proto.CompactTextString(m)
}
func (*ChildWorkflowExecutionTerminatedEventAttributes) ProtoMessage() {}
func (*ChildWorkflowExecutionTerminatedEventAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7135fdf3a2c9ba09, []int{41}
}
func (m *ChildWorkflowExecutionTerminatedEventAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChildWorkflowExecutionTerminatedEventAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChildWorkflowExecutionTerminatedEventAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChildWorkflowExecutionTerminatedEventAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChildWorkflowExecutionTerminatedEventAttributes.Merge(m, src)
}
func (m *ChildWorkflowExecutionTerminatedEventAttributes) XXX_Size() int {
	return m.Size()
}
func (m *ChildWorkflowExecutionTerminatedEventAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_ChildWorkflowExecutionTerminatedEventAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_ChildWorkflowExecutionTerminatedEventAttributes proto.InternalMessageInfo

func (m *ChildWorkflowExecutionTerminatedEventAttributes) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ChildWorkflowExecutionTerminatedEventAttributes) GetWorkflowExecution() *execution.WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *ChildWorkflowExecutionTerminatedEventAttributes) GetWorkflowType() *common.WorkflowType {
	if m != nil {
		return m.WorkflowType
	}
	return nil
}

func (m *ChildWorkflowExecutionTerminatedEventAttributes) GetInitiatedEventId() int64 {
	if m != nil {
		return m.InitiatedEventId
	}
	return 0
}

func (m *ChildWorkflowExecutionTerminatedEventAttributes) GetStartedEventId() int64 {
	if m != nil {
		return m.StartedEventId
	}
	return 0
}

type HistoryEvent struct {
	EventId   int64     `protobuf:"varint,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Timestamp int64     `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	EventType EventType `protobuf:"varint,3,opt,name=eventType,proto3,enum=event.EventType" json:"eventType,omitempty"`
	Version   int64     `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	TaskId    int64     `protobuf:"varint,5,opt,name=taskId,proto3" json:"taskId,omitempty"`
	// Types that are valid to be assigned to Attributes:
	//	*HistoryEvent_WorkflowExecutionStartedEventAttributes
	//	*HistoryEvent_WorkflowExecutionCompletedEventAttributes
	//	*HistoryEvent_WorkflowExecutionFailedEventAttributes
	//	*HistoryEvent_WorkflowExecutionTimedOutEventAttributes
	//	*HistoryEvent_DecisionTaskScheduledEventAttributes
	//	*HistoryEvent_DecisionTaskStartedEventAttributes
	//	*HistoryEvent_DecisionTaskCompletedEventAttributes
	//	*HistoryEvent_DecisionTaskTimedOutEventAttributes
	//	*HistoryEvent_DecisionTaskFailedEventAttributes
	//	*HistoryEvent_ActivityTaskScheduledEventAttributes
	//	*HistoryEvent_ActivityTaskStartedEventAttributes
	//	*HistoryEvent_ActivityTaskCompletedEventAttributes
	//	*HistoryEvent_ActivityTaskFailedEventAttributes
	//	*HistoryEvent_ActivityTaskTimedOutEventAttributes
	//	*HistoryEvent_TimerStartedEventAttributes
	//	*HistoryEvent_TimerFiredEventAttributes
	//	*HistoryEvent_ActivityTaskCancelRequestedEventAttributes
	//	*HistoryEvent_RequestCancelActivityTaskFailedEventAttributes
	//	*HistoryEvent_ActivityTaskCanceledEventAttributes
	//	*HistoryEvent_TimerCanceledEventAttributes
	//	*HistoryEvent_CancelTimerFailedEventAttributes
	//	*HistoryEvent_MarkerRecordedEventAttributes
	//	*HistoryEvent_WorkflowExecutionSignaledEventAttributes
	//	*HistoryEvent_WorkflowExecutionTerminatedEventAttributes
	//	*HistoryEvent_WorkflowExecutionCancelRequestedEventAttributes
	//	*HistoryEvent_WorkflowExecutionCanceledEventAttributes
	//	*HistoryEvent_RequestCancelExternalWorkflowExecutionInitiatedEventAttributes
	//	*HistoryEvent_RequestCancelExternalWorkflowExecutionFailedEventAttributes
	//	*HistoryEvent_ExternalWorkflowExecutionCancelRequestedEventAttributes
	//	*HistoryEvent_WorkflowExecutionContinuedAsNewEventAttributes
	//	*HistoryEvent_StartChildWorkflowExecutionInitiatedEventAttributes
	//	*HistoryEvent_StartChildWorkflowExecutionFailedEventAttributes
	//	*HistoryEvent_ChildWorkflowExecutionStartedEventAttributes
	//	*HistoryEvent_ChildWorkflowExecutionCompletedEventAttributes
	//	*HistoryEvent_ChildWorkflowExecutionFailedEventAttributes
	//	*HistoryEvent_ChildWorkflowExecutionCanceledEventAttributes
	//	*HistoryEvent_ChildWorkflowExecutionTimedOutEventAttributes
	//	*HistoryEvent_ChildWorkflowExecutionTerminatedEventAttributes
	//	*HistoryEvent_SignalExternalWorkflowExecutionInitiatedEventAttributes
	//	*HistoryEvent_SignalExternalWorkflowExecutionFailedEventAttributes
	//	*HistoryEvent_ExternalWorkflowExecutionSignaledEventAttributes
	//	*HistoryEvent_UpsertWorkflowSearchAttributesEventAttributes
	Attributes isHistoryEvent_Attributes `protobuf_oneof:"attributes"`
}

func (m *HistoryEvent) Reset()         { *m = HistoryEvent{} }
func (m *HistoryEvent) String() string { return proto.CompactTextString(m) }
func (*HistoryEvent) ProtoMessage()    {}
func (*HistoryEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_7135fdf3a2c9ba09, []int{42}
}
func (m *HistoryEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HistoryEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HistoryEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HistoryEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistoryEvent.Merge(m, src)
}
func (m *HistoryEvent) XXX_Size() int {
	return m.Size()
}
func (m *HistoryEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_HistoryEvent.DiscardUnknown(m)
}

var xxx_messageInfo_HistoryEvent proto.InternalMessageInfo

type isHistoryEvent_Attributes interface {
	isHistoryEvent_Attributes()
	MarshalTo([]byte) (int, error)
	Size() int
}

type HistoryEvent_WorkflowExecutionStartedEventAttributes struct {
	WorkflowExecutionStartedEventAttributes *WorkflowExecutionStartedEventAttributes `protobuf:"bytes,6,opt,name=workflowExecutionStartedEventAttributes,proto3,oneof" json:"workflowExecutionStartedEventAttributes,omitempty"`
}
type HistoryEvent_WorkflowExecutionCompletedEventAttributes struct {
	WorkflowExecutionCompletedEventAttributes *WorkflowExecutionCompletedEventAttributes `protobuf:"bytes,7,opt,name=workflowExecutionCompletedEventAttributes,proto3,oneof" json:"workflowExecutionCompletedEventAttributes,omitempty"`
}
type HistoryEvent_WorkflowExecutionFailedEventAttributes struct {
	WorkflowExecutionFailedEventAttributes *WorkflowExecutionFailedEventAttributes `protobuf:"bytes,8,opt,name=workflowExecutionFailedEventAttributes,proto3,oneof" json:"workflowExecutionFailedEventAttributes,omitempty"`
}
type HistoryEvent_WorkflowExecutionTimedOutEventAttributes struct {
	WorkflowExecutionTimedOutEventAttributes *WorkflowExecutionTimedOutEventAttributes `protobuf:"bytes,9,opt,name=workflowExecutionTimedOutEventAttributes,proto3,oneof" json:"workflowExecutionTimedOutEventAttributes,omitempty"`
}
type HistoryEvent_DecisionTaskScheduledEventAttributes struct {
	DecisionTaskScheduledEventAttributes *DecisionTaskScheduledEventAttributes `protobuf:"bytes,10,opt,name=decisionTaskScheduledEventAttributes,proto3,oneof" json:"decisionTaskScheduledEventAttributes,omitempty"`
}
type HistoryEvent_DecisionTaskStartedEventAttributes struct {
	DecisionTaskStartedEventAttributes *DecisionTaskStartedEventAttributes `protobuf:"bytes,11,opt,name=decisionTaskStartedEventAttributes,proto3,oneof" json:"decisionTaskStartedEventAttributes,omitempty"`
}
type HistoryEvent_DecisionTaskCompletedEventAttributes struct {
	DecisionTaskCompletedEventAttributes *DecisionTaskCompletedEventAttributes `protobuf:"bytes,12,opt,name=decisionTaskCompletedEventAttributes,proto3,oneof" json:"decisionTaskCompletedEventAttributes,omitempty"`
}
type HistoryEvent_DecisionTaskTimedOutEventAttributes struct {
	DecisionTaskTimedOutEventAttributes *DecisionTaskTimedOutEventAttributes `protobuf:"bytes,13,opt,name=decisionTaskTimedOutEventAttributes,proto3,oneof" json:"decisionTaskTimedOutEventAttributes,omitempty"`
}
type HistoryEvent_DecisionTaskFailedEventAttributes struct {
	DecisionTaskFailedEventAttributes *DecisionTaskFailedEventAttributes `protobuf:"bytes,14,opt,name=decisionTaskFailedEventAttributes,proto3,oneof" json:"decisionTaskFailedEventAttributes,omitempty"`
}
type HistoryEvent_ActivityTaskScheduledEventAttributes struct {
	ActivityTaskScheduledEventAttributes *ActivityTaskScheduledEventAttributes `protobuf:"bytes,15,opt,name=activityTaskScheduledEventAttributes,proto3,oneof" json:"activityTaskScheduledEventAttributes,omitempty"`
}
type HistoryEvent_ActivityTaskStartedEventAttributes struct {
	ActivityTaskStartedEventAttributes *ActivityTaskStartedEventAttributes `protobuf:"bytes,16,opt,name=activityTaskStartedEventAttributes,proto3,oneof" json:"activityTaskStartedEventAttributes,omitempty"`
}
type HistoryEvent_ActivityTaskCompletedEventAttributes struct {
	ActivityTaskCompletedEventAttributes *ActivityTaskCompletedEventAttributes `protobuf:"bytes,17,opt,name=activityTaskCompletedEventAttributes,proto3,oneof" json:"activityTaskCompletedEventAttributes,omitempty"`
}
type HistoryEvent_ActivityTaskFailedEventAttributes struct {
	ActivityTaskFailedEventAttributes *ActivityTaskFailedEventAttributes `protobuf:"bytes,18,opt,name=activityTaskFailedEventAttributes,proto3,oneof" json:"activityTaskFailedEventAttributes,omitempty"`
}
type HistoryEvent_ActivityTaskTimedOutEventAttributes struct {
	ActivityTaskTimedOutEventAttributes *ActivityTaskTimedOutEventAttributes `protobuf:"bytes,19,opt,name=activityTaskTimedOutEventAttributes,proto3,oneof" json:"activityTaskTimedOutEventAttributes,omitempty"`
}
type HistoryEvent_TimerStartedEventAttributes struct {
	TimerStartedEventAttributes *TimerStartedEventAttributes `protobuf:"bytes,20,opt,name=timerStartedEventAttributes,proto3,oneof" json:"timerStartedEventAttributes,omitempty"`
}
type HistoryEvent_TimerFiredEventAttributes struct {
	TimerFiredEventAttributes *TimerFiredEventAttributes `protobuf:"bytes,21,opt,name=timerFiredEventAttributes,proto3,oneof" json:"timerFiredEventAttributes,omitempty"`
}
type HistoryEvent_ActivityTaskCancelRequestedEventAttributes struct {
	ActivityTaskCancelRequestedEventAttributes *ActivityTaskCancelRequestedEventAttributes `protobuf:"bytes,22,opt,name=activityTaskCancelRequestedEventAttributes,proto3,oneof" json:"activityTaskCancelRequestedEventAttributes,omitempty"`
}
type HistoryEvent_RequestCancelActivityTaskFailedEventAttributes struct {
	RequestCancelActivityTaskFailedEventAttributes *RequestCancelActivityTaskFailedEventAttributes `protobuf:"bytes,23,opt,name=requestCancelActivityTaskFailedEventAttributes,proto3,oneof" json:"requestCancelActivityTaskFailedEventAttributes,omitempty"`
}
type HistoryEvent_ActivityTaskCanceledEventAttributes struct {
	ActivityTaskCanceledEventAttributes *ActivityTaskCanceledEventAttributes `protobuf:"bytes,24,opt,name=activityTaskCanceledEventAttributes,proto3,oneof" json:"activityTaskCanceledEventAttributes,omitempty"`
}
type HistoryEvent_TimerCanceledEventAttributes struct {
	TimerCanceledEventAttributes *TimerCanceledEventAttributes `protobuf:"bytes,25,opt,name=timerCanceledEventAttributes,proto3,oneof" json:"timerCanceledEventAttributes,omitempty"`
}
type HistoryEvent_CancelTimerFailedEventAttributes struct {
	CancelTimerFailedEventAttributes *CancelTimerFailedEventAttributes `protobuf:"bytes,26,opt,name=cancelTimerFailedEventAttributes,proto3,oneof" json:"cancelTimerFailedEventAttributes,omitempty"`
}
type HistoryEvent_MarkerRecordedEventAttributes struct {
	MarkerRecordedEventAttributes *MarkerRecordedEventAttributes `protobuf:"bytes,27,opt,name=markerRecordedEventAttributes,proto3,oneof" json:"markerRecordedEventAttributes,omitempty"`
}
type HistoryEvent_WorkflowExecutionSignaledEventAttributes struct {
	WorkflowExecutionSignaledEventAttributes *WorkflowExecutionSignaledEventAttributes `protobuf:"bytes,28,opt,name=workflowExecutionSignaledEventAttributes,proto3,oneof" json:"workflowExecutionSignaledEventAttributes,omitempty"`
}
type HistoryEvent_WorkflowExecutionTerminatedEventAttributes struct {
	WorkflowExecutionTerminatedEventAttributes *WorkflowExecutionTerminatedEventAttributes `protobuf:"bytes,29,opt,name=workflowExecutionTerminatedEventAttributes,proto3,oneof" json:"workflowExecutionTerminatedEventAttributes,omitempty"`
}
type HistoryEvent_WorkflowExecutionCancelRequestedEventAttributes struct {
	WorkflowExecutionCancelRequestedEventAttributes *WorkflowExecutionCancelRequestedEventAttributes `protobuf:"bytes,30,opt,name=workflowExecutionCancelRequestedEventAttributes,proto3,oneof" json:"workflowExecutionCancelRequestedEventAttributes,omitempty"`
}
type HistoryEvent_WorkflowExecutionCanceledEventAttributes struct {
	WorkflowExecutionCanceledEventAttributes *WorkflowExecutionCanceledEventAttributes `protobuf:"bytes,31,opt,name=workflowExecutionCanceledEventAttributes,proto3,oneof" json:"workflowExecutionCanceledEventAttributes,omitempty"`
}
type HistoryEvent_RequestCancelExternalWorkflowExecutionInitiatedEventAttributes struct {
	RequestCancelExternalWorkflowExecutionInitiatedEventAttributes *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes `protobuf:"bytes,32,opt,name=requestCancelExternalWorkflowExecutionInitiatedEventAttributes,proto3,oneof" json:"requestCancelExternalWorkflowExecutionInitiatedEventAttributes,omitempty"`
}
type HistoryEvent_RequestCancelExternalWorkflowExecutionFailedEventAttributes struct {
	RequestCancelExternalWorkflowExecutionFailedEventAttributes *RequestCancelExternalWorkflowExecutionFailedEventAttributes `protobuf:"bytes,33,opt,name=requestCancelExternalWorkflowExecutionFailedEventAttributes,proto3,oneof" json:"requestCancelExternalWorkflowExecutionFailedEventAttributes,omitempty"`
}
type HistoryEvent_ExternalWorkflowExecutionCancelRequestedEventAttributes struct {
	ExternalWorkflowExecutionCancelRequestedEventAttributes *ExternalWorkflowExecutionCancelRequestedEventAttributes `protobuf:"bytes,34,opt,name=externalWorkflowExecutionCancelRequestedEventAttributes,proto3,oneof" json:"externalWorkflowExecutionCancelRequestedEventAttributes,omitempty"`
}
type HistoryEvent_WorkflowExecutionContinuedAsNewEventAttributes struct {
	WorkflowExecutionContinuedAsNewEventAttributes *WorkflowExecutionContinuedAsNewEventAttributes `protobuf:"bytes,35,opt,name=workflowExecutionContinuedAsNewEventAttributes,proto3,oneof" json:"workflowExecutionContinuedAsNewEventAttributes,omitempty"`
}
type HistoryEvent_StartChildWorkflowExecutionInitiatedEventAttributes struct {
	StartChildWorkflowExecutionInitiatedEventAttributes *StartChildWorkflowExecutionInitiatedEventAttributes `protobuf:"bytes,36,opt,name=startChildWorkflowExecutionInitiatedEventAttributes,proto3,oneof" json:"startChildWorkflowExecutionInitiatedEventAttributes,omitempty"`
}
type HistoryEvent_StartChildWorkflowExecutionFailedEventAttributes struct {
	StartChildWorkflowExecutionFailedEventAttributes *StartChildWorkflowExecutionFailedEventAttributes `protobuf:"bytes,37,opt,name=startChildWorkflowExecutionFailedEventAttributes,proto3,oneof" json:"startChildWorkflowExecutionFailedEventAttributes,omitempty"`
}
type HistoryEvent_ChildWorkflowExecutionStartedEventAttributes struct {
	ChildWorkflowExecutionStartedEventAttributes *ChildWorkflowExecutionStartedEventAttributes `protobuf:"bytes,38,opt,name=childWorkflowExecutionStartedEventAttributes,proto3,oneof" json:"childWorkflowExecutionStartedEventAttributes,omitempty"`
}
type HistoryEvent_ChildWorkflowExecutionCompletedEventAttributes struct {
	ChildWorkflowExecutionCompletedEventAttributes *ChildWorkflowExecutionCompletedEventAttributes `protobuf:"bytes,39,opt,name=childWorkflowExecutionCompletedEventAttributes,proto3,oneof" json:"childWorkflowExecutionCompletedEventAttributes,omitempty"`
}
type HistoryEvent_ChildWorkflowExecutionFailedEventAttributes struct {
	ChildWorkflowExecutionFailedEventAttributes *ChildWorkflowExecutionFailedEventAttributes `protobuf:"bytes,40,opt,name=childWorkflowExecutionFailedEventAttributes,proto3,oneof" json:"childWorkflowExecutionFailedEventAttributes,omitempty"`
}
type HistoryEvent_ChildWorkflowExecutionCanceledEventAttributes struct {
	ChildWorkflowExecutionCanceledEventAttributes *ChildWorkflowExecutionCanceledEventAttributes `protobuf:"bytes,41,opt,name=childWorkflowExecutionCanceledEventAttributes,proto3,oneof" json:"childWorkflowExecutionCanceledEventAttributes,omitempty"`
}
type HistoryEvent_ChildWorkflowExecutionTimedOutEventAttributes struct {
	ChildWorkflowExecutionTimedOutEventAttributes *ChildWorkflowExecutionTimedOutEventAttributes `protobuf:"bytes,42,opt,name=childWorkflowExecutionTimedOutEventAttributes,proto3,oneof" json:"childWorkflowExecutionTimedOutEventAttributes,omitempty"`
}
type HistoryEvent_ChildWorkflowExecutionTerminatedEventAttributes struct {
	ChildWorkflowExecutionTerminatedEventAttributes *ChildWorkflowExecutionTerminatedEventAttributes `protobuf:"bytes,43,opt,name=childWorkflowExecutionTerminatedEventAttributes,proto3,oneof" json:"childWorkflowExecutionTerminatedEventAttributes,omitempty"`
}
type HistoryEvent_SignalExternalWorkflowExecutionInitiatedEventAttributes struct {
	SignalExternalWorkflowExecutionInitiatedEventAttributes *SignalExternalWorkflowExecutionInitiatedEventAttributes `protobuf:"bytes,44,opt,name=signalExternalWorkflowExecutionInitiatedEventAttributes,proto3,oneof" json:"signalExternalWorkflowExecutionInitiatedEventAttributes,omitempty"`
}
type HistoryEvent_SignalExternalWorkflowExecutionFailedEventAttributes struct {
	SignalExternalWorkflowExecutionFailedEventAttributes *SignalExternalWorkflowExecutionFailedEventAttributes `protobuf:"bytes,45,opt,name=signalExternalWorkflowExecutionFailedEventAttributes,proto3,oneof" json:"signalExternalWorkflowExecutionFailedEventAttributes,omitempty"`
}
type HistoryEvent_ExternalWorkflowExecutionSignaledEventAttributes struct {
	ExternalWorkflowExecutionSignaledEventAttributes *ExternalWorkflowExecutionSignaledEventAttributes `protobuf:"bytes,46,opt,name=externalWorkflowExecutionSignaledEventAttributes,proto3,oneof" json:"externalWorkflowExecutionSignaledEventAttributes,omitempty"`
}
type HistoryEvent_UpsertWorkflowSearchAttributesEventAttributes struct {
	UpsertWorkflowSearchAttributesEventAttributes *UpsertWorkflowSearchAttributesEventAttributes `protobuf:"bytes,47,opt,name=upsertWorkflowSearchAttributesEventAttributes,proto3,oneof" json:"upsertWorkflowSearchAttributesEventAttributes,omitempty"`
}

func (*HistoryEvent_WorkflowExecutionStartedEventAttributes) isHistoryEvent_Attributes()         {}
func (*HistoryEvent_WorkflowExecutionCompletedEventAttributes) isHistoryEvent_Attributes()       {}
func (*HistoryEvent_WorkflowExecutionFailedEventAttributes) isHistoryEvent_Attributes()          {}
func (*HistoryEvent_WorkflowExecutionTimedOutEventAttributes) isHistoryEvent_Attributes()        {}
func (*HistoryEvent_DecisionTaskScheduledEventAttributes) isHistoryEvent_Attributes()            {}
func (*HistoryEvent_DecisionTaskStartedEventAttributes) isHistoryEvent_Attributes()              {}
func (*HistoryEvent_DecisionTaskCompletedEventAttributes) isHistoryEvent_Attributes()            {}
func (*HistoryEvent_DecisionTaskTimedOutEventAttributes) isHistoryEvent_Attributes()             {}
func (*HistoryEvent_DecisionTaskFailedEventAttributes) isHistoryEvent_Attributes()               {}
func (*HistoryEvent_ActivityTaskScheduledEventAttributes) isHistoryEvent_Attributes()            {}
func (*HistoryEvent_ActivityTaskStartedEventAttributes) isHistoryEvent_Attributes()              {}
func (*HistoryEvent_ActivityTaskCompletedEventAttributes) isHistoryEvent_Attributes()            {}
func (*HistoryEvent_ActivityTaskFailedEventAttributes) isHistoryEvent_Attributes()               {}
func (*HistoryEvent_ActivityTaskTimedOutEventAttributes) isHistoryEvent_Attributes()             {}
func (*HistoryEvent_TimerStartedEventAttributes) isHistoryEvent_Attributes()                     {}
func (*HistoryEvent_TimerFiredEventAttributes) isHistoryEvent_Attributes()                       {}
func (*HistoryEvent_ActivityTaskCancelRequestedEventAttributes) isHistoryEvent_Attributes()      {}
func (*HistoryEvent_RequestCancelActivityTaskFailedEventAttributes) isHistoryEvent_Attributes()  {}
func (*HistoryEvent_ActivityTaskCanceledEventAttributes) isHistoryEvent_Attributes()             {}
func (*HistoryEvent_TimerCanceledEventAttributes) isHistoryEvent_Attributes()                    {}
func (*HistoryEvent_CancelTimerFailedEventAttributes) isHistoryEvent_Attributes()                {}
func (*HistoryEvent_MarkerRecordedEventAttributes) isHistoryEvent_Attributes()                   {}
func (*HistoryEvent_WorkflowExecutionSignaledEventAttributes) isHistoryEvent_Attributes()        {}
func (*HistoryEvent_WorkflowExecutionTerminatedEventAttributes) isHistoryEvent_Attributes()      {}
func (*HistoryEvent_WorkflowExecutionCancelRequestedEventAttributes) isHistoryEvent_Attributes() {}
func (*HistoryEvent_WorkflowExecutionCanceledEventAttributes) isHistoryEvent_Attributes()        {}
func (*HistoryEvent_RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) isHistoryEvent_Attributes() {
}
func (*HistoryEvent_RequestCancelExternalWorkflowExecutionFailedEventAttributes) isHistoryEvent_Attributes() {
}
func (*HistoryEvent_ExternalWorkflowExecutionCancelRequestedEventAttributes) isHistoryEvent_Attributes() {
}
func (*HistoryEvent_WorkflowExecutionContinuedAsNewEventAttributes) isHistoryEvent_Attributes() {}
func (*HistoryEvent_StartChildWorkflowExecutionInitiatedEventAttributes) isHistoryEvent_Attributes() {
}
func (*HistoryEvent_StartChildWorkflowExecutionFailedEventAttributes) isHistoryEvent_Attributes() {}
func (*HistoryEvent_ChildWorkflowExecutionStartedEventAttributes) isHistoryEvent_Attributes()     {}
func (*HistoryEvent_ChildWorkflowExecutionCompletedEventAttributes) isHistoryEvent_Attributes()   {}
func (*HistoryEvent_ChildWorkflowExecutionFailedEventAttributes) isHistoryEvent_Attributes()      {}
func (*HistoryEvent_ChildWorkflowExecutionCanceledEventAttributes) isHistoryEvent_Attributes()    {}
func (*HistoryEvent_ChildWorkflowExecutionTimedOutEventAttributes) isHistoryEvent_Attributes()    {}
func (*HistoryEvent_ChildWorkflowExecutionTerminatedEventAttributes) isHistoryEvent_Attributes()  {}
func (*HistoryEvent_SignalExternalWorkflowExecutionInitiatedEventAttributes) isHistoryEvent_Attributes() {
}
func (*HistoryEvent_SignalExternalWorkflowExecutionFailedEventAttributes) isHistoryEvent_Attributes() {
}
func (*HistoryEvent_ExternalWorkflowExecutionSignaledEventAttributes) isHistoryEvent_Attributes() {}
func (*HistoryEvent_UpsertWorkflowSearchAttributesEventAttributes) isHistoryEvent_Attributes()    {}

func (m *HistoryEvent) GetAttributes() isHistoryEvent_Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *HistoryEvent) GetEventId() int64 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *HistoryEvent) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *HistoryEvent) GetEventType() EventType {
	if m != nil {
		return m.EventType
	}
	return EventType_WorkflowExecutionStarted
}

func (m *HistoryEvent) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *HistoryEvent) GetTaskId() int64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *HistoryEvent) GetWorkflowExecutionStartedEventAttributes() *WorkflowExecutionStartedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_WorkflowExecutionStartedEventAttributes); ok {
		return x.WorkflowExecutionStartedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetWorkflowExecutionCompletedEventAttributes() *WorkflowExecutionCompletedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_WorkflowExecutionCompletedEventAttributes); ok {
		return x.WorkflowExecutionCompletedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetWorkflowExecutionFailedEventAttributes() *WorkflowExecutionFailedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_WorkflowExecutionFailedEventAttributes); ok {
		return x.WorkflowExecutionFailedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetWorkflowExecutionTimedOutEventAttributes() *WorkflowExecutionTimedOutEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_WorkflowExecutionTimedOutEventAttributes); ok {
		return x.WorkflowExecutionTimedOutEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetDecisionTaskScheduledEventAttributes() *DecisionTaskScheduledEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_DecisionTaskScheduledEventAttributes); ok {
		return x.DecisionTaskScheduledEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetDecisionTaskStartedEventAttributes() *DecisionTaskStartedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_DecisionTaskStartedEventAttributes); ok {
		return x.DecisionTaskStartedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetDecisionTaskCompletedEventAttributes() *DecisionTaskCompletedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_DecisionTaskCompletedEventAttributes); ok {
		return x.DecisionTaskCompletedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetDecisionTaskTimedOutEventAttributes() *DecisionTaskTimedOutEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_DecisionTaskTimedOutEventAttributes); ok {
		return x.DecisionTaskTimedOutEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetDecisionTaskFailedEventAttributes() *DecisionTaskFailedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_DecisionTaskFailedEventAttributes); ok {
		return x.DecisionTaskFailedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetActivityTaskScheduledEventAttributes() *ActivityTaskScheduledEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_ActivityTaskScheduledEventAttributes); ok {
		return x.ActivityTaskScheduledEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetActivityTaskStartedEventAttributes() *ActivityTaskStartedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_ActivityTaskStartedEventAttributes); ok {
		return x.ActivityTaskStartedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetActivityTaskCompletedEventAttributes() *ActivityTaskCompletedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_ActivityTaskCompletedEventAttributes); ok {
		return x.ActivityTaskCompletedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetActivityTaskFailedEventAttributes() *ActivityTaskFailedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_ActivityTaskFailedEventAttributes); ok {
		return x.ActivityTaskFailedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetActivityTaskTimedOutEventAttributes() *ActivityTaskTimedOutEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_ActivityTaskTimedOutEventAttributes); ok {
		return x.ActivityTaskTimedOutEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetTimerStartedEventAttributes() *TimerStartedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_TimerStartedEventAttributes); ok {
		return x.TimerStartedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetTimerFiredEventAttributes() *TimerFiredEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_TimerFiredEventAttributes); ok {
		return x.TimerFiredEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetActivityTaskCancelRequestedEventAttributes() *ActivityTaskCancelRequestedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_ActivityTaskCancelRequestedEventAttributes); ok {
		return x.ActivityTaskCancelRequestedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetRequestCancelActivityTaskFailedEventAttributes() *RequestCancelActivityTaskFailedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_RequestCancelActivityTaskFailedEventAttributes); ok {
		return x.RequestCancelActivityTaskFailedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetActivityTaskCanceledEventAttributes() *ActivityTaskCanceledEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_ActivityTaskCanceledEventAttributes); ok {
		return x.ActivityTaskCanceledEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetTimerCanceledEventAttributes() *TimerCanceledEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_TimerCanceledEventAttributes); ok {
		return x.TimerCanceledEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetCancelTimerFailedEventAttributes() *CancelTimerFailedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_CancelTimerFailedEventAttributes); ok {
		return x.CancelTimerFailedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetMarkerRecordedEventAttributes() *MarkerRecordedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_MarkerRecordedEventAttributes); ok {
		return x.MarkerRecordedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetWorkflowExecutionSignaledEventAttributes() *WorkflowExecutionSignaledEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_WorkflowExecutionSignaledEventAttributes); ok {
		return x.WorkflowExecutionSignaledEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetWorkflowExecutionTerminatedEventAttributes() *WorkflowExecutionTerminatedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_WorkflowExecutionTerminatedEventAttributes); ok {
		return x.WorkflowExecutionTerminatedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetWorkflowExecutionCancelRequestedEventAttributes() *WorkflowExecutionCancelRequestedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_WorkflowExecutionCancelRequestedEventAttributes); ok {
		return x.WorkflowExecutionCancelRequestedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetWorkflowExecutionCanceledEventAttributes() *WorkflowExecutionCanceledEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_WorkflowExecutionCanceledEventAttributes); ok {
		return x.WorkflowExecutionCanceledEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetRequestCancelExternalWorkflowExecutionInitiatedEventAttributes() *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_RequestCancelExternalWorkflowExecutionInitiatedEventAttributes); ok {
		return x.RequestCancelExternalWorkflowExecutionInitiatedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetRequestCancelExternalWorkflowExecutionFailedEventAttributes() *RequestCancelExternalWorkflowExecutionFailedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_RequestCancelExternalWorkflowExecutionFailedEventAttributes); ok {
		return x.RequestCancelExternalWorkflowExecutionFailedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetExternalWorkflowExecutionCancelRequestedEventAttributes() *ExternalWorkflowExecutionCancelRequestedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_ExternalWorkflowExecutionCancelRequestedEventAttributes); ok {
		return x.ExternalWorkflowExecutionCancelRequestedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetWorkflowExecutionContinuedAsNewEventAttributes() *WorkflowExecutionContinuedAsNewEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_WorkflowExecutionContinuedAsNewEventAttributes); ok {
		return x.WorkflowExecutionContinuedAsNewEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetStartChildWorkflowExecutionInitiatedEventAttributes() *StartChildWorkflowExecutionInitiatedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_StartChildWorkflowExecutionInitiatedEventAttributes); ok {
		return x.StartChildWorkflowExecutionInitiatedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetStartChildWorkflowExecutionFailedEventAttributes() *StartChildWorkflowExecutionFailedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_StartChildWorkflowExecutionFailedEventAttributes); ok {
		return x.StartChildWorkflowExecutionFailedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetChildWorkflowExecutionStartedEventAttributes() *ChildWorkflowExecutionStartedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_ChildWorkflowExecutionStartedEventAttributes); ok {
		return x.ChildWorkflowExecutionStartedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetChildWorkflowExecutionCompletedEventAttributes() *ChildWorkflowExecutionCompletedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_ChildWorkflowExecutionCompletedEventAttributes); ok {
		return x.ChildWorkflowExecutionCompletedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetChildWorkflowExecutionFailedEventAttributes() *ChildWorkflowExecutionFailedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_ChildWorkflowExecutionFailedEventAttributes); ok {
		return x.ChildWorkflowExecutionFailedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetChildWorkflowExecutionCanceledEventAttributes() *ChildWorkflowExecutionCanceledEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_ChildWorkflowExecutionCanceledEventAttributes); ok {
		return x.ChildWorkflowExecutionCanceledEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetChildWorkflowExecutionTimedOutEventAttributes() *ChildWorkflowExecutionTimedOutEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_ChildWorkflowExecutionTimedOutEventAttributes); ok {
		return x.ChildWorkflowExecutionTimedOutEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetChildWorkflowExecutionTerminatedEventAttributes() *ChildWorkflowExecutionTerminatedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_ChildWorkflowExecutionTerminatedEventAttributes); ok {
		return x.ChildWorkflowExecutionTerminatedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetSignalExternalWorkflowExecutionInitiatedEventAttributes() *SignalExternalWorkflowExecutionInitiatedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_SignalExternalWorkflowExecutionInitiatedEventAttributes); ok {
		return x.SignalExternalWorkflowExecutionInitiatedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetSignalExternalWorkflowExecutionFailedEventAttributes() *SignalExternalWorkflowExecutionFailedEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_SignalExternalWorkflowExecutionFailedEventAttributes); ok {
		return x.SignalExternalWorkflowExecutionFailedEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetExternalWorkflowExecutionSignaledEventAttributes() *ExternalWorkflowExecutionSignaledEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_ExternalWorkflowExecutionSignaledEventAttributes); ok {
		return x.ExternalWorkflowExecutionSignaledEventAttributes
	}
	return nil
}

func (m *HistoryEvent) GetUpsertWorkflowSearchAttributesEventAttributes() *UpsertWorkflowSearchAttributesEventAttributes {
	if x, ok := m.GetAttributes().(*HistoryEvent_UpsertWorkflowSearchAttributesEventAttributes); ok {
		return x.UpsertWorkflowSearchAttributesEventAttributes
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*HistoryEvent) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*HistoryEvent_WorkflowExecutionStartedEventAttributes)(nil),
		(*HistoryEvent_WorkflowExecutionCompletedEventAttributes)(nil),
		(*HistoryEvent_WorkflowExecutionFailedEventAttributes)(nil),
		(*HistoryEvent_WorkflowExecutionTimedOutEventAttributes)(nil),
		(*HistoryEvent_DecisionTaskScheduledEventAttributes)(nil),
		(*HistoryEvent_DecisionTaskStartedEventAttributes)(nil),
		(*HistoryEvent_DecisionTaskCompletedEventAttributes)(nil),
		(*HistoryEvent_DecisionTaskTimedOutEventAttributes)(nil),
		(*HistoryEvent_DecisionTaskFailedEventAttributes)(nil),
		(*HistoryEvent_ActivityTaskScheduledEventAttributes)(nil),
		(*HistoryEvent_ActivityTaskStartedEventAttributes)(nil),
		(*HistoryEvent_ActivityTaskCompletedEventAttributes)(nil),
		(*HistoryEvent_ActivityTaskFailedEventAttributes)(nil),
		(*HistoryEvent_ActivityTaskTimedOutEventAttributes)(nil),
		(*HistoryEvent_TimerStartedEventAttributes)(nil),
		(*HistoryEvent_TimerFiredEventAttributes)(nil),
		(*HistoryEvent_ActivityTaskCancelRequestedEventAttributes)(nil),
		(*HistoryEvent_RequestCancelActivityTaskFailedEventAttributes)(nil),
		(*HistoryEvent_ActivityTaskCanceledEventAttributes)(nil),
		(*HistoryEvent_TimerCanceledEventAttributes)(nil),
		(*HistoryEvent_CancelTimerFailedEventAttributes)(nil),
		(*HistoryEvent_MarkerRecordedEventAttributes)(nil),
		(*HistoryEvent_WorkflowExecutionSignaledEventAttributes)(nil),
		(*HistoryEvent_WorkflowExecutionTerminatedEventAttributes)(nil),
		(*HistoryEvent_WorkflowExecutionCancelRequestedEventAttributes)(nil),
		(*HistoryEvent_WorkflowExecutionCanceledEventAttributes)(nil),
		(*HistoryEvent_RequestCancelExternalWorkflowExecutionInitiatedEventAttributes)(nil),
		(*HistoryEvent_RequestCancelExternalWorkflowExecutionFailedEventAttributes)(nil),
		(*HistoryEvent_ExternalWorkflowExecutionCancelRequestedEventAttributes)(nil),
		(*HistoryEvent_WorkflowExecutionContinuedAsNewEventAttributes)(nil),
		(*HistoryEvent_StartChildWorkflowExecutionInitiatedEventAttributes)(nil),
		(*HistoryEvent_StartChildWorkflowExecutionFailedEventAttributes)(nil),
		(*HistoryEvent_ChildWorkflowExecutionStartedEventAttributes)(nil),
		(*HistoryEvent_ChildWorkflowExecutionCompletedEventAttributes)(nil),
		(*HistoryEvent_ChildWorkflowExecutionFailedEventAttributes)(nil),
		(*HistoryEvent_ChildWorkflowExecutionCanceledEventAttributes)(nil),
		(*HistoryEvent_ChildWorkflowExecutionTimedOutEventAttributes)(nil),
		(*HistoryEvent_ChildWorkflowExecutionTerminatedEventAttributes)(nil),
		(*HistoryEvent_SignalExternalWorkflowExecutionInitiatedEventAttributes)(nil),
		(*HistoryEvent_SignalExternalWorkflowExecutionFailedEventAttributes)(nil),
		(*HistoryEvent_ExternalWorkflowExecutionSignaledEventAttributes)(nil),
		(*HistoryEvent_UpsertWorkflowSearchAttributesEventAttributes)(nil),
	}
}

type History struct {
	Events []*HistoryEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (m *History) Reset()         { *m = History{} }
func (m *History) String() string { return proto.CompactTextString(m) }
func (*History) ProtoMessage()    {}
func (*History) Descriptor() ([]byte, []int) {
	return fileDescriptor_7135fdf3a2c9ba09, []int{43}
}
func (m *History) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *History) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_History.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *History) XXX_Merge(src proto.Message) {
	xxx_messageInfo_History.Merge(m, src)
}
func (m *History) XXX_Size() int {
	return m.Size()
}
func (m *History) XXX_DiscardUnknown() {
	xxx_messageInfo_History.DiscardUnknown(m)
}

var xxx_messageInfo_History proto.InternalMessageInfo

func (m *History) GetEvents() []*HistoryEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

func init() {
	proto.RegisterType((*WorkflowExecutionStartedEventAttributes)(nil), "event.WorkflowExecutionStartedEventAttributes")
	proto.RegisterType((*WorkflowExecutionCompletedEventAttributes)(nil), "event.WorkflowExecutionCompletedEventAttributes")
	proto.RegisterType((*WorkflowExecutionFailedEventAttributes)(nil), "event.WorkflowExecutionFailedEventAttributes")
	proto.RegisterType((*WorkflowExecutionTimedOutEventAttributes)(nil), "event.WorkflowExecutionTimedOutEventAttributes")
	proto.RegisterType((*WorkflowExecutionContinuedAsNewEventAttributes)(nil), "event.WorkflowExecutionContinuedAsNewEventAttributes")
	proto.RegisterType((*DecisionTaskScheduledEventAttributes)(nil), "event.DecisionTaskScheduledEventAttributes")
	proto.RegisterType((*DecisionTaskStartedEventAttributes)(nil), "event.DecisionTaskStartedEventAttributes")
	proto.RegisterType((*DecisionTaskCompletedEventAttributes)(nil), "event.DecisionTaskCompletedEventAttributes")
	proto.RegisterType((*DecisionTaskTimedOutEventAttributes)(nil), "event.DecisionTaskTimedOutEventAttributes")
	proto.RegisterType((*DecisionTaskFailedEventAttributes)(nil), "event.DecisionTaskFailedEventAttributes")
	proto.RegisterType((*ActivityTaskScheduledEventAttributes)(nil), "event.ActivityTaskScheduledEventAttributes")
	proto.RegisterType((*ActivityTaskStartedEventAttributes)(nil), "event.ActivityTaskStartedEventAttributes")
	proto.RegisterType((*ActivityTaskCompletedEventAttributes)(nil), "event.ActivityTaskCompletedEventAttributes")
	proto.RegisterType((*ActivityTaskFailedEventAttributes)(nil), "event.ActivityTaskFailedEventAttributes")
	proto.RegisterType((*ActivityTaskTimedOutEventAttributes)(nil), "event.ActivityTaskTimedOutEventAttributes")
	proto.RegisterType((*ActivityTaskCancelRequestedEventAttributes)(nil), "event.ActivityTaskCancelRequestedEventAttributes")
	proto.RegisterType((*RequestCancelActivityTaskFailedEventAttributes)(nil), "event.RequestCancelActivityTaskFailedEventAttributes")
	proto.RegisterType((*ActivityTaskCanceledEventAttributes)(nil), "event.ActivityTaskCanceledEventAttributes")
	proto.RegisterType((*TimerStartedEventAttributes)(nil), "event.TimerStartedEventAttributes")
	proto.RegisterType((*TimerFiredEventAttributes)(nil), "event.TimerFiredEventAttributes")
	proto.RegisterType((*TimerCanceledEventAttributes)(nil), "event.TimerCanceledEventAttributes")
	proto.RegisterType((*CancelTimerFailedEventAttributes)(nil), "event.CancelTimerFailedEventAttributes")
	proto.RegisterType((*WorkflowExecutionCancelRequestedEventAttributes)(nil), "event.WorkflowExecutionCancelRequestedEventAttributes")
	proto.RegisterType((*WorkflowExecutionCanceledEventAttributes)(nil), "event.WorkflowExecutionCanceledEventAttributes")
	proto.RegisterType((*MarkerRecordedEventAttributes)(nil), "event.MarkerRecordedEventAttributes")
	proto.RegisterType((*WorkflowExecutionSignaledEventAttributes)(nil), "event.WorkflowExecutionSignaledEventAttributes")
	proto.RegisterType((*WorkflowExecutionTerminatedEventAttributes)(nil), "event.WorkflowExecutionTerminatedEventAttributes")
	proto.RegisterType((*RequestCancelExternalWorkflowExecutionInitiatedEventAttributes)(nil), "event.RequestCancelExternalWorkflowExecutionInitiatedEventAttributes")
	proto.RegisterType((*RequestCancelExternalWorkflowExecutionFailedEventAttributes)(nil), "event.RequestCancelExternalWorkflowExecutionFailedEventAttributes")
	proto.RegisterType((*ExternalWorkflowExecutionCancelRequestedEventAttributes)(nil), "event.ExternalWorkflowExecutionCancelRequestedEventAttributes")
	proto.RegisterType((*SignalExternalWorkflowExecutionInitiatedEventAttributes)(nil), "event.SignalExternalWorkflowExecutionInitiatedEventAttributes")
	proto.RegisterType((*SignalExternalWorkflowExecutionFailedEventAttributes)(nil), "event.SignalExternalWorkflowExecutionFailedEventAttributes")
	proto.RegisterType((*ExternalWorkflowExecutionSignaledEventAttributes)(nil), "event.ExternalWorkflowExecutionSignaledEventAttributes")
	proto.RegisterType((*UpsertWorkflowSearchAttributesEventAttributes)(nil), "event.UpsertWorkflowSearchAttributesEventAttributes")
	proto.RegisterType((*StartChildWorkflowExecutionInitiatedEventAttributes)(nil), "event.StartChildWorkflowExecutionInitiatedEventAttributes")
	proto.RegisterType((*StartChildWorkflowExecutionFailedEventAttributes)(nil), "event.StartChildWorkflowExecutionFailedEventAttributes")
	proto.RegisterType((*ChildWorkflowExecutionStartedEventAttributes)(nil), "event.ChildWorkflowExecutionStartedEventAttributes")
	proto.RegisterType((*ChildWorkflowExecutionCompletedEventAttributes)(nil), "event.ChildWorkflowExecutionCompletedEventAttributes")
	proto.RegisterType((*ChildWorkflowExecutionFailedEventAttributes)(nil), "event.ChildWorkflowExecutionFailedEventAttributes")
	proto.RegisterType((*ChildWorkflowExecutionCanceledEventAttributes)(nil), "event.ChildWorkflowExecutionCanceledEventAttributes")
	proto.RegisterType((*ChildWorkflowExecutionTimedOutEventAttributes)(nil), "event.ChildWorkflowExecutionTimedOutEventAttributes")
	proto.RegisterType((*ChildWorkflowExecutionTerminatedEventAttributes)(nil), "event.ChildWorkflowExecutionTerminatedEventAttributes")
	proto.RegisterType((*HistoryEvent)(nil), "event.HistoryEvent")
	proto.RegisterType((*History)(nil), "event.History")
}

func init() { proto.RegisterFile("event/message.proto", fileDescriptor_7135fdf3a2c9ba09) }

var fileDescriptor_7135fdf3a2c9ba09 = []byte{
	// 3199 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5c, 0x4d, 0x8c, 0x1c, 0x47,
	0x15, 0x9e, 0x9a, 0x9f, 0xfd, 0x79, 0xb3, 0x5e, 0xef, 0x96, 0x1d, 0xbb, 0xed, 0xac, 0x37, 0xeb,
	0x59, 0xc7, 0x5e, 0xaf, 0xed, 0x59, 0x67, 0xed, 0xc4, 0x21, 0x89, 0x8c, 0xec, 0xb5, 0xc3, 0x2c,
	0x22, 0x89, 0xd5, 0x36, 0x09, 0x8a, 0x84, 0x94, 0xf6, 0x4c, 0xad, 0xdd, 0xda, 0x99, 0xee, 0xa1,
	0xbb, 0xc7, 0xe3, 0x15, 0x12, 0x12, 0x12, 0x11, 0x52, 0x50, 0xa4, 0x48, 0x91, 0x10, 0x41, 0x08,
	0x24, 0x24, 0x90, 0xe0, 0x40, 0x80, 0x03, 0x12, 0x1c, 0x80, 0x13, 0x82, 0x53, 0x02, 0x07, 0xc4,
	0x05, 0x29, 0xb2, 0x85, 0xc4, 0x01, 0x89, 0x1b, 0x17, 0x2e, 0xa8, 0xaa, 0xbb, 0x67, 0xfa, 0xa7,
	0xaa, 0xbb, 0x6a, 0x76, 0xbc, 0x41, 0x84, 0xdb, 0x76, 0xd5, 0xab, 0x7a, 0x5f, 0xbd, 0x7a, 0x7f,
	0x55, 0xf5, 0x66, 0xe1, 0x00, 0xb9, 0x47, 0x2c, 0x6f, 0xad, 0x43, 0x5c, 0xd7, 0xb8, 0x43, 0xea,
	0x5d, 0xc7, 0xf6, 0x6c, 0x5c, 0x61, 0x8d, 0x47, 0xe7, 0xfc, 0x3e, 0x62, 0xf5, 0x3a, 0x7e, 0xc7,
	0xd1, 0xf9, 0xa6, 0xdd, 0xe9, 0xd8, 0x56, 0xb4, 0xe9, 0x60, 0xd0, 0x14, 0x9b, 0xe1, 0xe8, 0x61,
	0x72, 0x9f, 0x34, 0x7b, 0x9e, 0x99, 0xea, 0x38, 0xe4, 0x19, 0xee, 0x76, 0xdb, 0x74, 0x13, 0x2c,
	0x6b, 0xef, 0x57, 0xe1, 0xd4, 0x6b, 0xb6, 0xb3, 0xbd, 0xd5, 0xb6, 0xfb, 0xd7, 0xc3, 0xb1, 0x37,
	0x3d, 0xc3, 0xf1, 0x48, 0xeb, 0x3a, 0x85, 0x71, 0xc5, 0xf3, 0x1c, 0xf3, 0x76, 0xcf, 0x23, 0x2e,
	0x7e, 0x16, 0x66, 0xfa, 0x01, 0xe9, 0xad, 0x9d, 0x2e, 0xd1, 0xd0, 0x12, 0x5a, 0xa9, 0xae, 0x1f,
	0xac, 0xfb, 0x48, 0xea, 0xaf, 0x45, 0xfa, 0xf4, 0x18, 0x25, 0x7e, 0x16, 0x0e, 0x77, 0x0d, 0x87,
	0x58, 0x5e, 0x48, 0xf3, 0xb2, 0xd1, 0x21, 0x6e, 0xd7, 0x68, 0x12, 0xad, 0xb8, 0x84, 0x56, 0xa6,
	0x75, 0x51, 0x37, 0x7e, 0x35, 0x39, 0x72, 0x00, 0x52, 0x2b, 0x31, 0xf6, 0x0b, 0xf5, 0xc1, 0x92,
	0xeb, 0x29, 0x1a, 0x5d, 0x34, 0x18, 0x3f, 0x03, 0x87, 0xfc, 0xae, 0x4d, 0xcb, 0xf4, 0x4c, 0x23,
	0x5c, 0xed, 0x66, 0x4b, 0x2b, 0x2f, 0xa1, 0x95, 0x92, 0x2e, 0xe8, 0xc5, 0x75, 0x98, 0xa2, 0x92,
	0xfc, 0x9c, 0xe9, 0x7a, 0x5a, 0x85, 0x01, 0xc0, 0xf5, 0x50, 0xb4, 0xf5, 0x5b, 0x41, 0x8f, 0x3e,
	0xa0, 0xc1, 0x4f, 0x42, 0xc5, 0xb4, 0xba, 0x3d, 0x4f, 0x9b, 0x60, 0xc4, 0xfb, 0x43, 0x61, 0xdd,
	0x30, 0x76, 0xda, 0xb6, 0xd1, 0xd2, 0xfd, 0x5e, 0x7c, 0x03, 0x96, 0x49, 0x4c, 0xfa, 0xb7, 0xec,
	0x8d, 0xb6, 0xed, 0x92, 0x5b, 0x66, 0x87, 0xd8, 0x3d, 0xef, 0x26, 0x69, 0xda, 0x56, 0xcb, 0xd5,
	0x26, 0x97, 0xd0, 0x4a, 0x45, 0x97, 0x21, 0xc5, 0x2f, 0xc2, 0x22, 0x05, 0x91, 0x31, 0xd9, 0x14,
	0x9b, 0x2c, 0x87, 0x8a, 0x6e, 0x5d, 0xd3, 0xb6, 0x3c, 0xd3, 0xea, 0x91, 0xd6, 0x50, 0xae, 0x3d,
	0x6b, 0xb3, 0xa5, 0x4d, 0xfb, 0x5b, 0x27, 0xe8, 0xc6, 0x2f, 0xc0, 0xb4, 0xe9, 0x8b, 0xcf, 0x76,
	0x34, 0x58, 0x42, 0x2b, 0xb3, 0xeb, 0x8b, 0xe1, 0xf2, 0x37, 0x82, 0x31, 0x57, 0xdc, 0x97, 0x49,
	0x7f, 0x33, 0xa4, 0xd2, 0x87, 0x03, 0xe8, 0x06, 0x0d, 0x26, 0x7e, 0xd1, 0x30, 0xdb, 0x3d, 0x87,
	0xe8, 0xc4, 0x70, 0x6d, 0x4b, 0xab, 0x32, 0xb6, 0x82, 0x5e, 0xbc, 0x19, 0xc1, 0x1b, 0xf4, 0x5c,
	0x23, 0x9e, 0x61, 0xb6, 0x5d, 0x6d, 0x86, 0xbf, 0x05, 0x22, 0x7a, 0xbc, 0x01, 0x07, 0xdb, 0x86,
	0xeb, 0x6d, 0xd8, 0x9d, 0x6e, 0x9b, 0xb0, 0x75, 0x11, 0xb7, 0xd7, 0xf6, 0xb4, 0x7d, 0xfc, 0x79,
	0xb8, 0xc4, 0x74, 0x1d, 0xb6, 0x63, 0xde, 0x31, 0x2d, 0xa3, 0x9d, 0x10, 0xdf, 0xac, 0xbf, 0x0e,
	0x7e, 0x2f, 0x3e, 0x0a, 0x53, 0x66, 0x8b, 0x58, 0x9e, 0xe9, 0xed, 0x68, 0xfb, 0x19, 0xe5, 0xe0,
	0x1b, 0x9f, 0x87, 0x03, 0x5b, 0xa6, 0xe3, 0x7a, 0x89, 0x09, 0xe7, 0x18, 0x19, 0xaf, 0x0b, 0x3f,
	0x0d, 0x55, 0x87, 0x78, 0xce, 0xce, 0x0d, 0xbb, 0x6d, 0x36, 0x77, 0xb4, 0x79, 0xb6, 0x82, 0x03,
	0xe1, 0x0a, 0xf4, 0x61, 0x97, 0x1e, 0xa5, 0xc3, 0x1a, 0x4c, 0x1a, 0x9e, 0x47, 0x3a, 0x5d, 0x4f,
	0xc3, 0x4c, 0x5b, 0xc2, 0x4f, 0x0a, 0x81, 0xdc, 0xef, 0x9a, 0x8e, 0x41, 0x79, 0x50, 0x95, 0x71,
	0x3d, 0xa3, 0xd3, 0xd5, 0x0e, 0x30, 0xe3, 0xe1, 0x75, 0xe1, 0x1a, 0xcc, 0x34, 0x1d, 0xdb, 0xba,
	0xd9, 0xbc, 0x4b, 0x5a, 0xbd, 0x36, 0xd1, 0x0e, 0x32, 0xb4, 0xb1, 0x36, 0xdc, 0x80, 0x27, 0x18,
	0xfa, 0x6b, 0xa4, 0x69, 0xba, 0x74, 0xb4, 0xe1, 0x6e, 0x5f, 0x35, 0x9a, 0xdb, 0xf6, 0xd6, 0x56,
	0xa8, 0xb5, 0x8f, 0x31, 0x1c, 0x79, 0x64, 0x78, 0x09, 0xca, 0x1d, 0xd2, 0xb1, 0xb5, 0x43, 0x6c,
	0xa5, 0x33, 0xe1, 0x4a, 0x5f, 0x22, 0x1d, 0x5b, 0x67, 0x3d, 0xf8, 0x1a, 0xcc, 0xb9, 0xc4, 0x70,
	0x9a, 0x77, 0x87, 0x1e, 0x4e, 0x3b, 0xcc, 0xa8, 0xb5, 0x90, 0xfa, 0x66, 0xa2, 0x5f, 0x4f, 0x8d,
	0xc0, 0x0d, 0x38, 0xd0, 0x75, 0xc8, 0xbd, 0x2b, 0x3d, 0xcf, 0xd6, 0x89, 0x4b, 0xbc, 0x1b, 0xb6,
	0x69, 0x79, 0xae, 0xa6, 0xb1, 0x89, 0x0e, 0x45, 0x7c, 0x53, 0xa4, 0x57, 0xe7, 0x0d, 0xc1, 0x27,
	0x61, 0xe2, 0x2e, 0x31, 0x5a, 0xc4, 0xd1, 0x8e, 0xb0, 0xc1, 0xb3, 0x21, 0x8a, 0x06, 0x6b, 0xd5,
	0x83, 0xde, 0xda, 0xb7, 0x10, 0x9c, 0x4e, 0xf9, 0xb3, 0x40, 0xed, 0xd2, 0x3e, 0xfb, 0x14, 0x4c,
	0x38, 0xbe, 0xd6, 0x22, 0xbe, 0xd6, 0x06, 0xdd, 0xf8, 0x2a, 0x2c, 0xb4, 0x22, 0xe2, 0x8c, 0x4f,
	0xb8, 0xd9, 0x62, 0x7e, 0xba, 0xa4, 0x67, 0xd2, 0xd4, 0xde, 0x47, 0x70, 0x32, 0x05, 0x8d, 0x1a,
	0x55, 0x1a, 0xd7, 0x21, 0x8a, 0x8b, 0x99, 0x33, 0x62, 0x7a, 0x10, 0x7c, 0xe1, 0xd3, 0x30, 0xd9,
	0x0a, 0xcc, 0xb5, 0xc8, 0x07, 0x1c, 0xf6, 0xe7, 0x22, 0x2e, 0x49, 0x20, 0x7e, 0x03, 0x56, 0x52,
	0x80, 0xa9, 0xca, 0xb6, 0x5e, 0xe9, 0x79, 0x49, 0xc8, 0x17, 0xa1, 0xea, 0xf9, 0xbe, 0x91, 0x45,
	0xbf, 0x22, 0xf3, 0x68, 0xb8, 0xce, 0x82, 0x75, 0xfd, 0xd6, 0xb0, 0x47, 0x8f, 0x92, 0xd5, 0xde,
	0x9c, 0x84, 0x3a, 0x67, 0xbb, 0x02, 0x8f, 0xc3, 0xfc, 0x5f, 0x92, 0xd1, 0x59, 0x98, 0xb7, 0x48,
	0x3f, 0x61, 0xdc, 0xbe, 0x98, 0xd2, 0x1d, 0xa9, 0xa8, 0x5c, 0x94, 0x8e, 0xca, 0xd1, 0x58, 0x56,
	0x52, 0x89, 0x65, 0xe5, 0x71, 0xc4, 0xb2, 0xca, 0x38, 0x63, 0xd9, 0x84, 0x54, 0x2c, 0xcb, 0xd3,
	0x98, 0xc9, 0x7c, 0x8d, 0xc1, 0xd7, 0xe0, 0xd8, 0xed, 0xc0, 0xd5, 0x50, 0x46, 0x9b, 0x96, 0x47,
	0x9c, 0x7b, 0x46, 0x7b, 0xd3, 0x8a, 0x87, 0xd5, 0x6c, 0xa2, 0x78, 0x6c, 0x9c, 0x56, 0x8d, 0x8d,
	0x27, 0x60, 0xdf, 0x56, 0x2c, 0x24, 0x02, 0x53, 0x8e, 0x78, 0x23, 0xbe, 0x04, 0xb3, 0x5b, 0xf1,
	0x00, 0x58, 0xe5, 0xef, 0x5b, 0x82, 0x4c, 0x18, 0xf7, 0x66, 0x54, 0xe2, 0xde, 0xd0, 0x9d, 0xed,
	0xcb, 0x72, 0x67, 0x03, 0x47, 0x3d, 0xab, 0xe4, 0xa8, 0xf7, 0xab, 0x3a, 0xea, 0xda, 0x4f, 0x11,
	0x9c, 0x88, 0xc6, 0x8b, 0x30, 0xe6, 0xa4, 0x3c, 0x53, 0xd4, 0x2a, 0x90, 0x84, 0x55, 0x5c, 0x86,
	0xa3, 0xae, 0x58, 0x31, 0x8b, 0x4c, 0x1b, 0x32, 0x28, 0xa2, 0x31, 0xd6, 0xf7, 0x58, 0xe1, 0x67,
	0xed, 0x2d, 0x04, 0xb5, 0x18, 0x64, 0x7e, 0x5a, 0xbe, 0x0a, 0x73, 0x6e, 0x6c, 0x31, 0x81, 0xb7,
	0x28, 0xe9, 0xa9, 0xf6, 0x58, 0x56, 0x51, 0x4c, 0x64, 0x15, 0x0b, 0x30, 0xed, 0x90, 0x2f, 0xf5,
	0x88, 0x1b, 0x3a, 0xcf, 0x69, 0x7d, 0xd8, 0x50, 0xfb, 0x75, 0x42, 0x7e, 0xc2, 0x88, 0xa3, 0x02,
	0xe7, 0x24, 0xcc, 0xba, 0x91, 0x45, 0x0d, 0xc2, 0x4c, 0xa2, 0x35, 0x06, 0xbb, 0x94, 0x80, 0x7d,
	0x12, 0x66, 0x6f, 0x9b, 0x96, 0xe1, 0xec, 0x6c, 0xdc, 0x25, 0xcd, 0x6d, 0xb7, 0xd7, 0x61, 0xee,
	0x69, 0x5a, 0x4f, 0xb4, 0xd2, 0xe0, 0xb4, 0x1c, 0x5d, 0x80, 0xc8, 0xcd, 0x3f, 0x0a, 0xfc, 0x89,
	0xd0, 0x51, 0x92, 0x0b, 0x1d, 0xdf, 0x2e, 0xc1, 0xf1, 0x28, 0x62, 0x7e, 0x24, 0x7d, 0x34, 0x78,
	0x2b, 0x4d, 0xa3, 0xe7, 0x86, 0x48, 0x17, 0x03, 0xa4, 0x69, 0x30, 0x1b, 0x94, 0x4a, 0xf7, 0x89,
	0xa3, 0xb1, 0xbb, 0x9c, 0x13, 0xbb, 0xa3, 0x1b, 0x5a, 0x49, 0x6c, 0xe8, 0x30, 0x35, 0x98, 0x88,
	0xa5, 0x06, 0x0b, 0x30, 0x7d, 0xdb, 0x70, 0x89, 0x1f, 0x0e, 0x27, 0x7d, 0xfd, 0x1c, 0x34, 0xd0,
	0x19, 0x2d, 0xd2, 0xf7, 0x3b, 0xa7, 0xfc, 0x19, 0xc3, 0x6f, 0x2a, 0xa2, 0x2d, 0xdb, 0xd9, 0x66,
	0xab, 0x7b, 0x95, 0x38, 0x74, 0x09, 0xcc, 0xe9, 0x96, 0xf4, 0x54, 0x3b, 0x47, 0x9d, 0x80, 0xab,
	0x4e, 0xdf, 0xad, 0xc0, 0x89, 0x2b, 0x4d, 0xcf, 0xbc, 0x67, 0x7a, 0x3b, 0x99, 0xfe, 0x64, 0x11,
	0xc0, 0x08, 0xe8, 0x06, 0x61, 0x3c, 0xd2, 0x42, 0xe3, 0x77, 0xf8, 0xc5, 0x8b, 0xdf, 0x57, 0x22,
	0x7d, 0x7a, 0x8c, 0x92, 0x0a, 0xc4, 0x1a, 0x9c, 0xa3, 0x03, 0x83, 0x1d, 0x34, 0xc4, 0xfc, 0x58,
	0x59, 0x25, 0xba, 0x57, 0x32, 0xa3, 0xfb, 0x35, 0x38, 0x16, 0xaa, 0x55, 0x56, 0x28, 0xce, 0x26,
	0x8a, 0xcf, 0xe2, 0x47, 0x6c, 0xde, 0x49, 0x37, 0x9b, 0x28, 0xc7, 0xf5, 0x4e, 0xe5, 0xba, 0xde,
	0x67, 0xe1, 0xf0, 0x5d, 0x62, 0x38, 0xde, 0x6d, 0x62, 0x24, 0xf9, 0x4f, 0xb3, 0xc1, 0xa2, 0xee,
	0xdc, 0x4c, 0x02, 0x24, 0x32, 0x89, 0xc4, 0x99, 0xac, 0x2a, 0x79, 0x26, 0x1b, 0x06, 0xd6, 0x99,
	0xcc, 0x73, 0xc2, 0xbb, 0x45, 0xa8, 0xc5, 0x14, 0xf4, 0x63, 0x8c, 0x1e, 0xd1, 0x20, 0x57, 0x8e,
	0x1f, 0x24, 0xcf, 0xc2, 0x3c, 0xcd, 0x1f, 0xe2, 0x47, 0x7c, 0xdf, 0x25, 0xa4, 0x3b, 0xf0, 0xa7,
	0x01, 0x47, 0x1a, 0xc3, 0xbc, 0x46, 0x70, 0xb7, 0xc2, 0x21, 0xad, 0xfd, 0x06, 0xc5, 0xcd, 0x76,
	0xf7, 0x07, 0x27, 0x9e, 0x00, 0x8b, 0xd2, 0xfe, 0xb7, 0x94, 0x1b, 0xef, 0xca, 0x71, 0x41, 0xd7,
	0xfe, 0x8c, 0xe0, 0x78, 0x74, 0x05, 0x8f, 0xec, 0x7c, 0xc5, 0x5b, 0x58, 0x49, 0x7a, 0x61, 0xe5,
	0xdc, 0x85, 0x25, 0xfc, 0x7e, 0xed, 0x0f, 0x45, 0x58, 0x8e, 0x2e, 0x4c, 0x14, 0xa0, 0x23, 0x4b,
	0x40, 0x23, 0x2c, 0x61, 0xb7, 0x7b, 0x93, 0x88, 0xe5, 0x65, 0xa9, 0x58, 0xbe, 0xd7, 0x6a, 0xfe,
	0x0e, 0x82, 0xd5, 0x98, 0x9a, 0x1b, 0x56, 0x93, 0xb4, 0x75, 0xdf, 0x1e, 0xd5, 0x63, 0xd4, 0x38,
	0x2e, 0x07, 0x7e, 0x8c, 0xa0, 0x1e, 0x00, 0xf0, 0xd1, 0xe4, 0x2b, 0x71, 0x1e, 0xac, 0x83, 0x61,
	0x9a, 0xe2, 0x3b, 0xa3, 0x20, 0x0d, 0x19, 0xc7, 0xbd, 0xc0, 0xd7, 0x12, 0xba, 0xe8, 0x23, 0x4e,
	0x23, 0x54, 0xd0, 0xc5, 0xab, 0xb0, 0xd0, 0x36, 0xbc, 0xc1, 0xea, 0xe3, 0x7b, 0x31, 0x94, 0x61,
	0x16, 0xcd, 0x9e, 0x9b, 0xe4, 0x2f, 0x11, 0x3c, 0x4e, 0x55, 0xda, 0x11, 0x04, 0x0f, 0x0d, 0x26,
	0xa9, 0x92, 0x3b, 0x83, 0xdd, 0x09, 0x3f, 0xf1, 0x0b, 0x70, 0x24, 0x08, 0xbc, 0x2f, 0x9a, 0x0e,
	0xef, 0x50, 0x54, 0xd2, 0xc5, 0x04, 0x63, 0xd9, 0xc2, 0x2f, 0xc2, 0x11, 0x06, 0x9d, 0x4e, 0xaf,
	0x00, 0x5c, 0x32, 0x45, 0xae, 0xfd, 0x16, 0xc1, 0x02, 0x9b, 0x5f, 0xa4, 0x1a, 0xbb, 0x66, 0x31,
	0x0e, 0x29, 0x64, 0x46, 0x92, 0x9f, 0x23, 0x58, 0xf2, 0xd1, 0xfb, 0x82, 0xe2, 0xda, 0xa0, 0x78,
	0x19, 0x8f, 0xcc, 0xfa, 0x32, 0x41, 0xff, 0x1b, 0xc1, 0x5a, 0xfa, 0x3e, 0x2d, 0xdb, 0xbd, 0x0d,
	0x90, 0xa2, 0x28, 0xd2, 0xe7, 0x40, 0x23, 0xf7, 0x3d, 0xe2, 0x58, 0x46, 0x3b, 0xf5, 0x08, 0xe4,
	0x6f, 0x88, 0xb0, 0x1f, 0xbf, 0x0e, 0x47, 0xc2, 0xbe, 0xd1, 0x1e, 0xa6, 0xc4, 0xc3, 0x33, 0x57,
	0xff, 0x1e, 0xe2, 0x5c, 0x58, 0x8a, 0x34, 0x30, 0x6f, 0x2b, 0x90, 0xc4, 0x56, 0xc8, 0xe7, 0x0b,
	0x34, 0x31, 0x39, 0xf6, 0x92, 0xe1, 0x6c, 0x13, 0x47, 0x27, 0x4d, 0xdb, 0x69, 0x71, 0xfd, 0x79,
	0x87, 0x11, 0xbc, 0x6c, 0x74, 0xc2, 0xcd, 0x88, 0xb4, 0xec, 0xf1, 0xe5, 0x6f, 0x24, 0x93, 0x2e,
	0x67, 0x66, 0xd2, 0x6f, 0xf3, 0x84, 0x7e, 0xd3, 0xbc, 0x63, 0x19, 0xfc, 0x98, 0xe5, 0xb2, 0xae,
	0xe8, 0x1a, 0x87, 0x2d, 0xc3, 0x63, 0x56, 0x31, 0xf3, 0x98, 0x95, 0x71, 0xe3, 0x51, 0xfb, 0x06,
	0x82, 0xd5, 0xf4, 0xad, 0x35, 0x71, 0x3a, 0xa6, 0x65, 0x78, 0x8f, 0x24, 0x15, 0xcc, 0x42, 0xf3,
	0x8b, 0x22, 0x5c, 0x8e, 0xc5, 0xf5, 0xeb, 0x22, 0xcd, 0x8e, 0x5b, 0xd1, 0x98, 0x15, 0x35, 0x76,
	0x18, 0x2e, 0x26, 0x0f, 0xc3, 0x9f, 0x85, 0xf9, 0xfe, 0x48, 0x76, 0x9a, 0x1e, 0x46, 0x3d, 0x62,
	0xd3, 0xb6, 0x3c, 0xc7, 0x6e, 0x07, 0xe6, 0x19, 0x7e, 0xd2, 0x24, 0xaf, 0x79, 0xd7, 0x6c, 0xb7,
	0xc2, 0x69, 0x5e, 0xb1, 0xda, 0x7e, 0x4c, 0x9d, 0xd2, 0xd3, 0x1d, 0xb5, 0x7f, 0x14, 0xe1, 0x79,
	0x39, 0xc1, 0xf1, 0x3d, 0xf3, 0xa7, 0xa2, 0x5e, 0x6d, 0x76, 0x7d, 0x39, 0x48, 0x41, 0x05, 0xa3,
	0x63, 0x37, 0x35, 0x63, 0xc8, 0xe7, 0x72, 0x6e, 0x1f, 0xb8, 0x02, 0x2f, 0x8f, 0x26, 0xf0, 0x55,
	0x98, 0x33, 0x93, 0x0e, 0xba, 0xe2, 0x67, 0x3d, 0xc9, 0xf6, 0xe8, 0xe6, 0x4c, 0xc4, 0x36, 0xa7,
	0xf6, 0x01, 0x82, 0x4b, 0x42, 0x09, 0xe7, 0x04, 0x10, 0x1e, 0x02, 0x24, 0x40, 0xb0, 0x67, 0x8a,
	0x58, 0xfb, 0x57, 0x11, 0x2e, 0xf9, 0x6e, 0xe8, 0x7f, 0xdd, 0xe4, 0xe2, 0x4e, 0xb5, 0x2c, 0x76,
	0xaa, 0xd9, 0x77, 0x57, 0x42, 0xe5, 0xe0, 0x5b, 0xee, 0xa4, 0xc8, 0x72, 0xff, 0x56, 0x84, 0x8b,
	0x39, 0x82, 0xff, 0xbf, 0xc9, 0x8e, 0xc1, 0x64, 0x1f, 0x20, 0x38, 0x2f, 0x94, 0xb0, 0x28, 0x00,
	0xff, 0x57, 0xda, 0xaa, 0x38, 0x68, 0xd0, 0x33, 0xd6, 0xb9, 0xcf, 0x77, 0x5d, 0xe2, 0x0c, 0xaa,
	0x94, 0x92, 0xaf, 0x59, 0x8f, 0xc2, 0x76, 0x79, 0x8f, 0x6a, 0x45, 0xe5, 0x47, 0xb5, 0x37, 0x27,
	0xe1, 0x02, 0x3b, 0x1a, 0x6e, 0x44, 0x6d, 0x24, 0xdf, 0xfb, 0xc4, 0xe4, 0x8e, 0x92, 0x72, 0x5f,
	0x04, 0x08, 0x05, 0x18, 0x28, 0xf6, 0xb4, 0x1e, 0x69, 0x49, 0xbd, 0x78, 0x97, 0x46, 0x7a, 0xf1,
	0x1e, 0xe3, 0x9d, 0xb8, 0xe4, 0x8b, 0xf7, 0xc4, 0x38, 0x5f, 0xbc, 0x27, 0xa5, 0x5e, 0xbc, 0x3f,
	0x03, 0xf3, 0x7e, 0x21, 0x1b, 0xeb, 0x0c, 0x6e, 0x9a, 0xa7, 0x98, 0xf3, 0x39, 0x32, 0x5c, 0x4c,
	0x82, 0x40, 0x4f, 0x8f, 0x89, 0xea, 0xef, 0x74, 0xdc, 0x75, 0x8e, 0xe3, 0x2a, 0xfc, 0x26, 0x3c,
	0x36, 0xdc, 0x5f, 0x9d, 0xf4, 0x06, 0x50, 0xab, 0x0c, 0xea, 0xb1, 0xe4, 0xd6, 0xc6, 0x88, 0x74,
	0xfe, 0xd8, 0xe4, 0xfd, 0xfa, 0x8c, 0xe4, 0xfd, 0x7a, 0xb2, 0x4e, 0x69, 0x1f, 0xa7, 0x4e, 0x69,
	0x78, 0x72, 0x98, 0x95, 0x7a, 0xdc, 0xde, 0xaf, 0xf4, 0xb8, 0x3d, 0xa7, 0x6c, 0x87, 0xff, 0x2c,
	0xc2, 0xf9, 0x0c, 0x3b, 0xe4, 0x07, 0xa3, 0x8f, 0xcb, 0x08, 0x07, 0x41, 0xb0, 0xac, 0x1c, 0x04,
	0x23, 0x5a, 0x58, 0x89, 0x6b, 0x21, 0xcf, 0xeb, 0x4f, 0x08, 0xbc, 0xfe, 0x18, 0xca, 0x40, 0x6a,
	0x3f, 0x2c, 0xc2, 0x59, 0xbe, 0xb0, 0x05, 0x57, 0x65, 0xd9, 0xd2, 0xe6, 0xc1, 0x2f, 0x0a, 0xe0,
	0x8f, 0x33, 0x2c, 0x25, 0x77, 0xb1, 0x2c, 0xbd, 0x8b, 0x43, 0x13, 0xa8, 0x64, 0x1e, 0x9e, 0xff,
	0x58, 0x84, 0x3a, 0x5f, 0x50, 0xbb, 0x7f, 0x7a, 0xd9, 0xbb, 0xf0, 0x3d, 0xba, 0x9c, 0x54, 0x32,
	0xa1, 0xf4, 0xc5, 0xe0, 0x04, 0xf7, 0xee, 0xf1, 0xef, 0x45, 0x38, 0xa3, 0x62, 0xe9, 0x63, 0xb8,
	0x01, 0xd8, 0xbb, 0xd4, 0x31, 0x29, 0xea, 0xca, 0xae, 0x44, 0x3d, 0x21, 0x2d, 0xea, 0x49, 0xae,
	0xa8, 0xff, 0x54, 0x84, 0x73, 0x02, 0xf5, 0xdd, 0xfd, 0x93, 0xc0, 0x27, 0x55, 0x7f, 0xff, 0x2a,
	0x14, 0xaa, 0x64, 0xed, 0x25, 0x92, 0x7b, 0x74, 0xfb, 0xa4, 0xca, 0xf7, 0x47, 0x45, 0x58, 0x13,
	0xc8, 0x57, 0x78, 0x4b, 0x98, 0x1d, 0x9f, 0xb8, 0xb2, 0x2a, 0x8e, 0x47, 0x56, 0xa5, 0x5d, 0xc9,
	0xaa, 0x2c, 0x2d, 0xab, 0x0a, 0x57, 0x56, 0x1f, 0x3d, 0x05, 0x33, 0x0d, 0xd3, 0xf5, 0x6c, 0x67,
	0x87, 0x35, 0xd1, 0x1c, 0x83, 0xc4, 0x0e, 0x52, 0xe1, 0x27, 0x15, 0x91, 0x37, 0xa8, 0x74, 0xf7,
	0xa3, 0xf3, 0xb0, 0x01, 0xd7, 0x61, 0x9a, 0x11, 0x46, 0x2a, 0xbc, 0xe6, 0x02, 0x05, 0xbd, 0x1e,
	0xb6, 0xeb, 0x43, 0x12, 0xca, 0xe7, 0x5e, 0x50, 0x8b, 0xe4, 0xaf, 0x21, 0xfc, 0xa4, 0xee, 0x9a,
	0xa6, 0xf5, 0x03, 0xc8, 0xc1, 0x17, 0x7e, 0x0b, 0xc1, 0xa9, 0xbe, 0x5c, 0xba, 0x11, 0xbc, 0x15,
	0xd7, 0x45, 0xb9, 0x15, 0x7f, 0x54, 0xa3, 0xa0, 0xcb, 0x32, 0xc0, 0xef, 0x20, 0x38, 0xdd, 0x97,
	0x0d, 0xe9, 0xcc, 0xb9, 0x56, 0xd7, 0xcf, 0x8b, 0xe0, 0x88, 0xc6, 0x35, 0x0a, 0xba, 0x3c, 0x13,
	0xfc, 0x75, 0x04, 0x27, 0xfb, 0x52, 0x11, 0x91, 0x1d, 0x81, 0xaa, 0xeb, 0xe7, 0xb2, 0x53, 0xcf,
	0x34, 0x18, 0xc9, 0xe9, 0xf1, 0xdb, 0x08, 0x56, 0xfa, 0x92, 0xbe, 0x8d, 0x9d, 0xa7, 0xaa, 0xeb,
	0x6b, 0x22, 0x2c, 0x82, 0x61, 0x8d, 0x82, 0x2e, 0xcd, 0x02, 0x7f, 0x15, 0xc1, 0x89, 0x96, 0x44,
	0xf1, 0x2b, 0x3b, 0xac, 0x55, 0xd7, 0xcf, 0x70, 0xea, 0xfd, 0x44, 0x43, 0x1a, 0x05, 0x5d, 0x6a,
	0x6a, 0xfc, 0x65, 0xa8, 0xb5, 0x72, 0x8b, 0x59, 0x83, 0x2a, 0xa8, 0xd3, 0x3c, 0x00, 0x22, 0x95,
	0x95, 0x98, 0x36, 0x25, 0x00, 0xa1, 0xa2, 0xce, 0x08, 0x05, 0x90, 0xa1, 0xa3, 0x52, 0x53, 0xe3,
	0xaf, 0xc0, 0x72, 0x2b, 0xbf, 0xfe, 0x34, 0x28, 0x97, 0x5e, 0xe5, 0x20, 0x10, 0x6b, 0x82, 0xcc,
	0xc4, 0xf8, 0x3e, 0x1c, 0x6f, 0xe5, 0x55, 0x93, 0x06, 0xe7, 0xd9, 0x15, 0x61, 0xc1, 0x67, 0x9a,
	0x77, 0xfe, 0xa4, 0x4c, 0xfa, 0x86, 0x44, 0xad, 0x64, 0x70, 0x4e, 0x0e, 0xa5, 0x2f, 0x53, 0x5e,
	0x49, 0xa5, 0x2f, 0x33, 0x35, 0x55, 0x3f, 0x23, 0xb7, 0x1a, 0x2e, 0x38, 0x7a, 0x9f, 0xe6, 0x01,
	0x10, 0xaa, 0x5f, 0xfe, 0xb4, 0x29, 0x01, 0x08, 0xd5, 0x6f, 0x5e, 0x28, 0x80, 0x2c, 0xf5, 0x93,
	0x99, 0x9a, 0x6e, 0xbf, 0x91, 0x57, 0x71, 0xc3, 0x7e, 0xe5, 0x35, 0xdc, 0xfe, 0xdc, 0x0a, 0x1d,
	0xba, 0xfd, 0xb9, 0x93, 0x52, 0xc5, 0x37, 0xf2, 0xeb, 0xba, 0xd8, 0x6f, 0xc7, 0x86, 0x8a, 0x2f,
	0x51, 0x09, 0x46, 0x15, 0x5f, 0x62, 0x62, 0xbc, 0x05, 0x8f, 0x7b, 0xe2, 0x22, 0x16, 0xf6, 0x43,
	0xb4, 0xea, 0x7a, 0x2d, 0x92, 0x4c, 0x3a, 0xc2, 0xcd, 0xce, 0x9a, 0x08, 0xbf, 0x01, 0x47, 0x3c,
	0x51, 0xc5, 0x09, 0xfb, 0xdd, 0x5a, 0x75, 0x7d, 0x29, 0xca, 0x85, 0x47, 0xd7, 0x28, 0xe8, 0xe2,
	0x49, 0xf0, 0xbb, 0x08, 0x56, 0x0d, 0xe9, 0xb2, 0xae, 0xe0, 0xc7, 0x6f, 0x4f, 0xf1, 0xb4, 0x29,
	0x73, 0x60, 0xa3, 0xa0, 0x2b, 0xb0, 0xc1, 0xdf, 0x43, 0x50, 0x77, 0x94, 0x2a, 0xbb, 0x82, 0x1f,
	0xda, 0x3d, 0x1d, 0x20, 0x53, 0x2b, 0x0b, 0x6b, 0x14, 0x74, 0x45, 0x76, 0x49, 0x0d, 0x14, 0x1c,
	0xdd, 0x82, 0x5f, 0xed, 0xad, 0x0a, 0xe5, 0xc5, 0x83, 0x22, 0x33, 0x31, 0x36, 0x61, 0xc1, 0xcb,
	0xa8, 0x15, 0x0a, 0x7e, 0xf1, 0xb7, 0x1c, 0x55, 0x0e, 0x31, 0xc7, 0xcc, 0xa9, 0x70, 0x0f, 0x96,
	0x9a, 0x39, 0x35, 0x3d, 0xda, 0x51, 0xc6, 0xee, 0x54, 0xc0, 0x2e, 0xaf, 0x04, 0xa8, 0x51, 0xd0,
	0x73, 0xa7, 0xc4, 0x6d, 0x38, 0xd6, 0xc9, 0xaa, 0xfd, 0xd0, 0x1e, 0x67, 0x3c, 0x4f, 0x04, 0x3c,
	0x33, 0xeb, 0x44, 0x1a, 0x05, 0x3d, 0x7b, 0x32, 0x7e, 0x7e, 0x25, 0x78, 0x10, 0xd2, 0x16, 0xb2,
	0xf3, 0x2b, 0xc1, 0x30, 0x6e, 0x7e, 0x25, 0x7a, 0x73, 0xa2, 0x76, 0xd9, 0x97, 0x3e, 0x6b, 0x69,
	0xc7, 0x62, 0x76, 0x29, 0x7f, 0x48, 0xa3, 0x76, 0x29, 0xcf, 0x06, 0x7f, 0x1f, 0xc1, 0x5a, 0x5f,
	0xed, 0xa5, 0x5b, 0x5b, 0x64, 0xd0, 0x9e, 0x11, 0x26, 0xea, 0x79, 0x7e, 0x43, 0x95, 0x21, 0x7f,
	0x2b, 0x45, 0x76, 0xf2, 0x44, 0xf6, 0x56, 0x8a, 0x6d, 0x46, 0x9a, 0x05, 0xfe, 0x00, 0xc1, 0x65,
	0x67, 0x57, 0xe5, 0x2c, 0xda, 0x12, 0x43, 0x79, 0x9d, 0xe7, 0xdc, 0x94, 0x27, 0x6b, 0x14, 0xf4,
	0x5d, 0xc2, 0xc1, 0xbf, 0x43, 0xf0, 0xbc, 0x33, 0x7a, 0x9d, 0x89, 0x76, 0x9c, 0x2d, 0xe7, 0xaa,
	0xd2, 0x72, 0x44, 0x8e, 0x64, 0x37, 0x40, 0xf0, 0xaf, 0x10, 0x5c, 0x22, 0xa3, 0x55, 0x70, 0x68,
	0x35, 0xb6, 0x88, 0xcb, 0xe1, 0x81, 0x7c, 0xb4, 0x59, 0x1a, 0x05, 0x7d, 0x54, 0x00, 0x2c, 0x48,
	0xf6, 0x95, 0x7e, 0x07, 0xac, 0x2d, 0xc7, 0x82, 0xa4, 0xda, 0x8f, 0x88, 0x69, 0x90, 0x54, 0x63,
	0x87, 0x7f, 0x82, 0xe0, 0x82, 0xab, 0xfe, 0x98, 0xab, 0x9d, 0x60, 0x30, 0x9f, 0x0b, 0x60, 0x8e,
	0xf0, 0x1c, 0xdc, 0x28, 0xe8, 0xa3, 0x30, 0xc6, 0x3f, 0x40, 0x70, 0xde, 0x55, 0x7c, 0xf5, 0xd2,
	0x9e, 0x64, 0x68, 0x2f, 0xe5, 0xa3, 0x15, 0xa9, 0xb0, 0x32, 0x4b, 0xfc, 0x1e, 0x82, 0xb3, 0x4d,
	0x85, 0xb7, 0x22, 0xed, 0x24, 0xc3, 0x78, 0x21, 0x8c, 0xcf, 0x0a, 0x43, 0x1b, 0x05, 0x5d, 0x89,
	0x15, 0x53, 0xcb, 0xa6, 0xd2, 0xf3, 0x8c, 0x76, 0x2a, 0xa6, 0x96, 0x6a, 0x6f, 0x3b, 0x54, 0x2d,
	0xd5, 0xd8, 0xe1, 0x6f, 0x22, 0x38, 0xd3, 0x54, 0xd8, 0xe0, 0x15, 0x06, 0x6f, 0x3d, 0x13, 0x9e,
	0x68, 0x6f, 0x55, 0x18, 0xe1, 0xef, 0x20, 0x38, 0xd7, 0x54, 0x79, 0x1a, 0xd0, 0x4e, 0x33, 0x68,
	0x17, 0xb3, 0x25, 0x27, 0x8c, 0x61, 0x6a, 0xcc, 0x32, 0xe0, 0x89, 0x0e, 0x60, 0xab, 0x12, 0xf0,
	0xc4, 0x47, 0x31, 0x35, 0x66, 0x2c, 0x39, 0x69, 0xaa, 0xdd, 0x51, 0x6b, 0x67, 0x62, 0xc9, 0x89,
	0xe2, 0x0d, 0x37, 0x4d, 0x4e, 0x14, 0x19, 0xb2, 0x88, 0xe3, 0x8e, 0x56, 0x61, 0xa7, 0x9d, 0x8d,
	0x45, 0x9c, 0x11, 0xeb, 0xf4, 0x68, 0xc4, 0x19, 0x11, 0x00, 0xfe, 0x19, 0x82, 0x8b, 0xee, 0x08,
	0x55, 0x6a, 0xda, 0x39, 0x86, 0xfc, 0x79, 0x39, 0xe4, 0x22, 0x53, 0x1a, 0x89, 0x35, 0x73, 0xe9,
	0x44, 0xb1, 0xe2, 0x4b, 0xab, 0xc7, 0x5c, 0xba, 0x6a, 0xc1, 0x18, 0x75, 0xe9, 0xaa, 0x2c, 0x99,
	0x71, 0xf5, 0x54, 0x8a, 0xb6, 0xb4, 0xb5, 0x98, 0x71, 0x29, 0x15, 0x7c, 0x51, 0xe3, 0x52, 0x62,
	0x76, 0x75, 0x06, 0xc0, 0x18, 0x56, 0x87, 0x3c, 0x03, 0x93, 0xc1, 0x0b, 0x07, 0x3e, 0x03, 0x13,
	0x0c, 0x80, 0xab, 0xa1, 0xa5, 0x12, 0x2b, 0x87, 0xf1, 0xf1, 0x44, 0x5f, 0x40, 0xf4, 0x80, 0xe4,
	0xea, 0x17, 0x7e, 0xff, 0x60, 0x11, 0x7d, 0xf8, 0x60, 0x11, 0x7d, 0xf4, 0x60, 0x11, 0xbd, 0xf3,
	0x70, 0xb1, 0xf0, 0xe1, 0xc3, 0xc5, 0xc2, 0x5f, 0x1e, 0x2e, 0x16, 0xe0, 0xb0, 0x69, 0xd7, 0x3d,
	0xd2, 0xe9, 0xda, 0x8e, 0xd1, 0xf6, 0xff, 0x91, 0x98, 0x3f, 0xcf, 0x0d, 0xf4, 0xfa, 0xf2, 0x9d,
	0x48, 0x97, 0x69, 0xaf, 0x85, 0x7f, 0x9f, 0x63, 0x64, 0x6b, 0x8c, 0xec, 0xf6, 0x04, 0xfb, 0xb8,
	0xf0, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xae, 0x8c, 0x1f, 0x23, 0x06, 0x4d, 0x00, 0x00,
}

func (m *WorkflowExecutionStartedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowExecutionStartedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowExecutionStartedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if m.PrevAutoResetPoints != nil {
		{
			size, err := m.PrevAutoResetPoints.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.SearchAttributes != nil {
		{
			size, err := m.SearchAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.Memo != nil {
		{
			size, err := m.Memo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.FirstDecisionTaskBackoffSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.FirstDecisionTaskBackoffSeconds))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if len(m.CronSchedule) > 0 {
		i -= len(m.CronSchedule)
		copy(dAtA[i:], m.CronSchedule)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.CronSchedule)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.ExpirationTimestamp != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ExpirationTimestamp))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.Attempt != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Attempt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.RetryPolicy != nil {
		{
			size, err := m.RetryPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.FirstExecutionRunId) > 0 {
		i -= len(m.FirstExecutionRunId)
		copy(dAtA[i:], m.FirstExecutionRunId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.FirstExecutionRunId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.OriginalExecutionRunId) > 0 {
		i -= len(m.OriginalExecutionRunId)
		copy(dAtA[i:], m.OriginalExecutionRunId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.OriginalExecutionRunId)))
		i--
		dAtA[i] = 0x72
	}
	if m.LastCompletionResult != nil {
		{
			size, err := m.LastCompletionResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.ContinuedFailureDetails != nil {
		{
			size, err := m.ContinuedFailureDetails.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if len(m.ContinuedFailureReason) > 0 {
		i -= len(m.ContinuedFailureReason)
		copy(dAtA[i:], m.ContinuedFailureReason)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ContinuedFailureReason)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Initiator != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Initiator))
		i--
		dAtA[i] = 0x50
	}
	if len(m.ContinuedExecutionRunId) > 0 {
		i -= len(m.ContinuedExecutionRunId)
		copy(dAtA[i:], m.ContinuedExecutionRunId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ContinuedExecutionRunId)))
		i--
		dAtA[i] = 0x4a
	}
	if m.TaskStartToCloseTimeoutSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.TaskStartToCloseTimeoutSeconds))
		i--
		dAtA[i] = 0x40
	}
	if m.ExecutionStartToCloseTimeoutSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ExecutionStartToCloseTimeoutSeconds))
		i--
		dAtA[i] = 0x38
	}
	if m.Input != nil {
		{
			size, err := m.Input.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.TaskList != nil {
		{
			size, err := m.TaskList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ParentInitiatedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ParentInitiatedEventId))
		i--
		dAtA[i] = 0x20
	}
	if m.ParentWorkflowExecution != nil {
		{
			size, err := m.ParentWorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ParentWorkflowNamespace) > 0 {
		i -= len(m.ParentWorkflowNamespace)
		copy(dAtA[i:], m.ParentWorkflowNamespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ParentWorkflowNamespace)))
		i--
		dAtA[i] = 0x12
	}
	if m.WorkflowType != nil {
		{
			size, err := m.WorkflowType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkflowExecutionCompletedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowExecutionCompletedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowExecutionCompletedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DecisionTaskCompletedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.DecisionTaskCompletedEventId))
		i--
		dAtA[i] = 0x10
	}
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkflowExecutionFailedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowExecutionFailedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowExecutionFailedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DecisionTaskCompletedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.DecisionTaskCompletedEventId))
		i--
		dAtA[i] = 0x18
	}
	if m.Details != nil {
		{
			size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkflowExecutionTimedOutEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowExecutionTimedOutEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowExecutionTimedOutEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeoutType != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.TimeoutType))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *WorkflowExecutionContinuedAsNewEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowExecutionContinuedAsNewEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowExecutionContinuedAsNewEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SearchAttributes != nil {
		{
			size, err := m.SearchAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.Memo != nil {
		{
			size, err := m.Memo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.LastCompletionResult != nil {
		{
			size, err := m.LastCompletionResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.FailureDetails != nil {
		{
			size, err := m.FailureDetails.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.FailureReason) > 0 {
		i -= len(m.FailureReason)
		copy(dAtA[i:], m.FailureReason)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.FailureReason)))
		i--
		dAtA[i] = 0x52
	}
	if m.Initiator != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Initiator))
		i--
		dAtA[i] = 0x48
	}
	if m.BackoffStartIntervalInSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.BackoffStartIntervalInSeconds))
		i--
		dAtA[i] = 0x40
	}
	if m.DecisionTaskCompletedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.DecisionTaskCompletedEventId))
		i--
		dAtA[i] = 0x38
	}
	if m.TaskStartToCloseTimeoutSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.TaskStartToCloseTimeoutSeconds))
		i--
		dAtA[i] = 0x30
	}
	if m.ExecutionStartToCloseTimeoutSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ExecutionStartToCloseTimeoutSeconds))
		i--
		dAtA[i] = 0x28
	}
	if m.Input != nil {
		{
			size, err := m.Input.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.TaskList != nil {
		{
			size, err := m.TaskList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.WorkflowType != nil {
		{
			size, err := m.WorkflowType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NewExecutionRunId) > 0 {
		i -= len(m.NewExecutionRunId)
		copy(dAtA[i:], m.NewExecutionRunId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.NewExecutionRunId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DecisionTaskScheduledEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DecisionTaskScheduledEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DecisionTaskScheduledEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Attempt != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Attempt))
		i--
		dAtA[i] = 0x18
	}
	if m.StartToCloseTimeoutSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartToCloseTimeoutSeconds))
		i--
		dAtA[i] = 0x10
	}
	if m.TaskList != nil {
		{
			size, err := m.TaskList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DecisionTaskStartedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DecisionTaskStartedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DecisionTaskStartedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x12
	}
	if m.ScheduledEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ScheduledEventId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DecisionTaskCompletedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DecisionTaskCompletedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DecisionTaskCompletedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BinaryChecksum) > 0 {
		i -= len(m.BinaryChecksum)
		copy(dAtA[i:], m.BinaryChecksum)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.BinaryChecksum)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x1a
	}
	if m.StartedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartedEventId))
		i--
		dAtA[i] = 0x10
	}
	if m.ScheduledEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ScheduledEventId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DecisionTaskTimedOutEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DecisionTaskTimedOutEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DecisionTaskTimedOutEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeoutType != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.TimeoutType))
		i--
		dAtA[i] = 0x18
	}
	if m.StartedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartedEventId))
		i--
		dAtA[i] = 0x10
	}
	if m.ScheduledEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ScheduledEventId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DecisionTaskFailedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DecisionTaskFailedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DecisionTaskFailedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BinaryChecksum) > 0 {
		i -= len(m.BinaryChecksum)
		copy(dAtA[i:], m.BinaryChecksum)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.BinaryChecksum)))
		i--
		dAtA[i] = 0x52
	}
	if m.ForkEventVersion != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ForkEventVersion))
		i--
		dAtA[i] = 0x48
	}
	if len(m.NewRunId) > 0 {
		i -= len(m.NewRunId)
		copy(dAtA[i:], m.NewRunId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.NewRunId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.BaseRunId) > 0 {
		i -= len(m.BaseRunId)
		copy(dAtA[i:], m.BaseRunId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.BaseRunId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Details != nil {
		{
			size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Cause != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Cause))
		i--
		dAtA[i] = 0x18
	}
	if m.StartedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartedEventId))
		i--
		dAtA[i] = 0x10
	}
	if m.ScheduledEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ScheduledEventId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActivityTaskScheduledEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityTaskScheduledEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityTaskScheduledEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.RetryPolicy != nil {
		{
			size, err := m.RetryPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.DecisionTaskCompletedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.DecisionTaskCompletedEventId))
		i--
		dAtA[i] = 0x50
	}
	if m.HeartbeatTimeoutSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.HeartbeatTimeoutSeconds))
		i--
		dAtA[i] = 0x48
	}
	if m.StartToCloseTimeoutSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartToCloseTimeoutSeconds))
		i--
		dAtA[i] = 0x40
	}
	if m.ScheduleToStartTimeoutSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ScheduleToStartTimeoutSeconds))
		i--
		dAtA[i] = 0x38
	}
	if m.ScheduleToCloseTimeoutSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ScheduleToCloseTimeoutSeconds))
		i--
		dAtA[i] = 0x30
	}
	if m.Input != nil {
		{
			size, err := m.Input.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.TaskList != nil {
		{
			size, err := m.TaskList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ActivityType != nil {
		{
			size, err := m.ActivityType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ActivityId) > 0 {
		i -= len(m.ActivityId)
		copy(dAtA[i:], m.ActivityId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ActivityId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActivityTaskStartedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityTaskStartedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityTaskStartedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastFailureDetails != nil {
		{
			size, err := m.LastFailureDetails.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.LastFailureReason) > 0 {
		i -= len(m.LastFailureReason)
		copy(dAtA[i:], m.LastFailureReason)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.LastFailureReason)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Attempt != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Attempt))
		i--
		dAtA[i] = 0x20
	}
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x12
	}
	if m.ScheduledEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ScheduledEventId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActivityTaskCompletedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityTaskCompletedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityTaskCompletedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x22
	}
	if m.StartedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartedEventId))
		i--
		dAtA[i] = 0x18
	}
	if m.ScheduledEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ScheduledEventId))
		i--
		dAtA[i] = 0x10
	}
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActivityTaskFailedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityTaskFailedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityTaskFailedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x2a
	}
	if m.StartedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartedEventId))
		i--
		dAtA[i] = 0x20
	}
	if m.ScheduledEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ScheduledEventId))
		i--
		dAtA[i] = 0x18
	}
	if m.Details != nil {
		{
			size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActivityTaskTimedOutEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityTaskTimedOutEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityTaskTimedOutEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastFailureDetails != nil {
		{
			size, err := m.LastFailureDetails.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.LastFailureReason) > 0 {
		i -= len(m.LastFailureReason)
		copy(dAtA[i:], m.LastFailureReason)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.LastFailureReason)))
		i--
		dAtA[i] = 0x2a
	}
	if m.TimeoutType != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.TimeoutType))
		i--
		dAtA[i] = 0x20
	}
	if m.StartedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartedEventId))
		i--
		dAtA[i] = 0x18
	}
	if m.ScheduledEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ScheduledEventId))
		i--
		dAtA[i] = 0x10
	}
	if m.Details != nil {
		{
			size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActivityTaskCancelRequestedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityTaskCancelRequestedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityTaskCancelRequestedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DecisionTaskCompletedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.DecisionTaskCompletedEventId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ActivityId) > 0 {
		i -= len(m.ActivityId)
		copy(dAtA[i:], m.ActivityId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ActivityId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestCancelActivityTaskFailedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestCancelActivityTaskFailedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestCancelActivityTaskFailedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DecisionTaskCompletedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.DecisionTaskCompletedEventId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Cause) > 0 {
		i -= len(m.Cause)
		copy(dAtA[i:], m.Cause)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Cause)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ActivityId) > 0 {
		i -= len(m.ActivityId)
		copy(dAtA[i:], m.ActivityId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ActivityId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActivityTaskCanceledEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityTaskCanceledEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityTaskCanceledEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x2a
	}
	if m.StartedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartedEventId))
		i--
		dAtA[i] = 0x20
	}
	if m.ScheduledEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ScheduledEventId))
		i--
		dAtA[i] = 0x18
	}
	if m.LatestCancelRequestedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.LatestCancelRequestedEventId))
		i--
		dAtA[i] = 0x10
	}
	if m.Details != nil {
		{
			size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TimerStartedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimerStartedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimerStartedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DecisionTaskCompletedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.DecisionTaskCompletedEventId))
		i--
		dAtA[i] = 0x18
	}
	if m.StartToFireTimeoutSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartToFireTimeoutSeconds))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TimerId) > 0 {
		i -= len(m.TimerId)
		copy(dAtA[i:], m.TimerId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TimerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TimerFiredEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimerFiredEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimerFiredEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StartedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartedEventId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TimerId) > 0 {
		i -= len(m.TimerId)
		copy(dAtA[i:], m.TimerId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TimerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TimerCanceledEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimerCanceledEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimerCanceledEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x22
	}
	if m.DecisionTaskCompletedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.DecisionTaskCompletedEventId))
		i--
		dAtA[i] = 0x18
	}
	if m.StartedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartedEventId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TimerId) > 0 {
		i -= len(m.TimerId)
		copy(dAtA[i:], m.TimerId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TimerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CancelTimerFailedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelTimerFailedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CancelTimerFailedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x22
	}
	if m.DecisionTaskCompletedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.DecisionTaskCompletedEventId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Cause) > 0 {
		i -= len(m.Cause)
		copy(dAtA[i:], m.Cause)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Cause)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TimerId) > 0 {
		i -= len(m.TimerId)
		copy(dAtA[i:], m.TimerId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TimerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkflowExecutionCancelRequestedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowExecutionCancelRequestedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowExecutionCancelRequestedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x22
	}
	if m.ExternalWorkflowExecution != nil {
		{
			size, err := m.ExternalWorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ExternalInitiatedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ExternalInitiatedEventId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Cause) > 0 {
		i -= len(m.Cause)
		copy(dAtA[i:], m.Cause)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Cause)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkflowExecutionCanceledEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowExecutionCanceledEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowExecutionCanceledEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Details != nil {
		{
			size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.DecisionTaskCompletedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.DecisionTaskCompletedEventId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MarkerRecordedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarkerRecordedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MarkerRecordedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.DecisionTaskCompletedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.DecisionTaskCompletedEventId))
		i--
		dAtA[i] = 0x18
	}
	if m.Details != nil {
		{
			size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.MarkerName) > 0 {
		i -= len(m.MarkerName)
		copy(dAtA[i:], m.MarkerName)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.MarkerName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkflowExecutionSignaledEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowExecutionSignaledEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowExecutionSignaledEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Input != nil {
		{
			size, err := m.Input.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SignalName) > 0 {
		i -= len(m.SignalName)
		copy(dAtA[i:], m.SignalName)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.SignalName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkflowExecutionTerminatedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowExecutionTerminatedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowExecutionTerminatedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Details != nil {
		{
			size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChildWorkflowOnly {
		i--
		if m.ChildWorkflowOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Control) > 0 {
		i -= len(m.Control)
		copy(dAtA[i:], m.Control)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Control)))
		i--
		dAtA[i] = 0x22
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if m.DecisionTaskCompletedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.DecisionTaskCompletedEventId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RequestCancelExternalWorkflowExecutionFailedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestCancelExternalWorkflowExecutionFailedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestCancelExternalWorkflowExecutionFailedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Control) > 0 {
		i -= len(m.Control)
		copy(dAtA[i:], m.Control)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Control)))
		i--
		dAtA[i] = 0x32
	}
	if m.InitiatedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.InitiatedEventId))
		i--
		dAtA[i] = 0x28
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DecisionTaskCompletedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.DecisionTaskCompletedEventId))
		i--
		dAtA[i] = 0x10
	}
	if m.Cause != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Cause))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ExternalWorkflowExecutionCancelRequestedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExternalWorkflowExecutionCancelRequestedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExternalWorkflowExecutionCancelRequestedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if m.InitiatedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.InitiatedEventId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SignalExternalWorkflowExecutionInitiatedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignalExternalWorkflowExecutionInitiatedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignalExternalWorkflowExecutionInitiatedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChildWorkflowOnly {
		i--
		if m.ChildWorkflowOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.Control) > 0 {
		i -= len(m.Control)
		copy(dAtA[i:], m.Control)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Control)))
		i--
		dAtA[i] = 0x32
	}
	if m.Input != nil {
		{
			size, err := m.Input.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SignalName) > 0 {
		i -= len(m.SignalName)
		copy(dAtA[i:], m.SignalName)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.SignalName)))
		i--
		dAtA[i] = 0x22
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if m.DecisionTaskCompletedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.DecisionTaskCompletedEventId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SignalExternalWorkflowExecutionFailedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignalExternalWorkflowExecutionFailedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignalExternalWorkflowExecutionFailedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Control) > 0 {
		i -= len(m.Control)
		copy(dAtA[i:], m.Control)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Control)))
		i--
		dAtA[i] = 0x32
	}
	if m.InitiatedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.InitiatedEventId))
		i--
		dAtA[i] = 0x28
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DecisionTaskCompletedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.DecisionTaskCompletedEventId))
		i--
		dAtA[i] = 0x10
	}
	if m.Cause != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Cause))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ExternalWorkflowExecutionSignaledEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExternalWorkflowExecutionSignaledEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExternalWorkflowExecutionSignaledEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Control) > 0 {
		i -= len(m.Control)
		copy(dAtA[i:], m.Control)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Control)))
		i--
		dAtA[i] = 0x22
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if m.InitiatedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.InitiatedEventId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpsertWorkflowSearchAttributesEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertWorkflowSearchAttributesEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpsertWorkflowSearchAttributesEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SearchAttributes != nil {
		{
			size, err := m.SearchAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.DecisionTaskCompletedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.DecisionTaskCompletedEventId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StartChildWorkflowExecutionInitiatedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartChildWorkflowExecutionInitiatedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartChildWorkflowExecutionInitiatedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SearchAttributes != nil {
		{
			size, err := m.SearchAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Memo != nil {
		{
			size, err := m.Memo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if len(m.CronSchedule) > 0 {
		i -= len(m.CronSchedule)
		copy(dAtA[i:], m.CronSchedule)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.CronSchedule)))
		i--
		dAtA[i] = 0x6a
	}
	if m.RetryPolicy != nil {
		{
			size, err := m.RetryPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.WorkflowIdReusePolicy != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.WorkflowIdReusePolicy))
		i--
		dAtA[i] = 0x58
	}
	if m.DecisionTaskCompletedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.DecisionTaskCompletedEventId))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Control) > 0 {
		i -= len(m.Control)
		copy(dAtA[i:], m.Control)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Control)))
		i--
		dAtA[i] = 0x4a
	}
	if m.ParentClosePolicy != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ParentClosePolicy))
		i--
		dAtA[i] = 0x40
	}
	if m.TaskStartToCloseTimeoutSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.TaskStartToCloseTimeoutSeconds))
		i--
		dAtA[i] = 0x38
	}
	if m.ExecutionStartToCloseTimeoutSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ExecutionStartToCloseTimeoutSeconds))
		i--
		dAtA[i] = 0x30
	}
	if m.Input != nil {
		{
			size, err := m.Input.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.TaskList != nil {
		{
			size, err := m.TaskList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.WorkflowType != nil {
		{
			size, err := m.WorkflowType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WorkflowId) > 0 {
		i -= len(m.WorkflowId)
		copy(dAtA[i:], m.WorkflowId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.WorkflowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StartChildWorkflowExecutionFailedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartChildWorkflowExecutionFailedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartChildWorkflowExecutionFailedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DecisionTaskCompletedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.DecisionTaskCompletedEventId))
		i--
		dAtA[i] = 0x38
	}
	if m.InitiatedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.InitiatedEventId))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Control) > 0 {
		i -= len(m.Control)
		copy(dAtA[i:], m.Control)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Control)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Cause != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Cause))
		i--
		dAtA[i] = 0x20
	}
	if m.WorkflowType != nil {
		{
			size, err := m.WorkflowType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WorkflowId) > 0 {
		i -= len(m.WorkflowId)
		copy(dAtA[i:], m.WorkflowId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.WorkflowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChildWorkflowExecutionStartedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChildWorkflowExecutionStartedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChildWorkflowExecutionStartedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.WorkflowType != nil {
		{
			size, err := m.WorkflowType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.InitiatedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.InitiatedEventId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChildWorkflowExecutionCompletedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChildWorkflowExecutionCompletedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChildWorkflowExecutionCompletedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StartedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartedEventId))
		i--
		dAtA[i] = 0x30
	}
	if m.InitiatedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.InitiatedEventId))
		i--
		dAtA[i] = 0x28
	}
	if m.WorkflowType != nil {
		{
			size, err := m.WorkflowType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChildWorkflowExecutionFailedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChildWorkflowExecutionFailedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChildWorkflowExecutionFailedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StartedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartedEventId))
		i--
		dAtA[i] = 0x38
	}
	if m.InitiatedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.InitiatedEventId))
		i--
		dAtA[i] = 0x30
	}
	if m.WorkflowType != nil {
		{
			size, err := m.WorkflowType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Details != nil {
		{
			size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChildWorkflowExecutionCanceledEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChildWorkflowExecutionCanceledEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChildWorkflowExecutionCanceledEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StartedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartedEventId))
		i--
		dAtA[i] = 0x30
	}
	if m.InitiatedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.InitiatedEventId))
		i--
		dAtA[i] = 0x28
	}
	if m.WorkflowType != nil {
		{
			size, err := m.WorkflowType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if m.Details != nil {
		{
			size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChildWorkflowExecutionTimedOutEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChildWorkflowExecutionTimedOutEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChildWorkflowExecutionTimedOutEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StartedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartedEventId))
		i--
		dAtA[i] = 0x30
	}
	if m.InitiatedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.InitiatedEventId))
		i--
		dAtA[i] = 0x28
	}
	if m.WorkflowType != nil {
		{
			size, err := m.WorkflowType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if m.TimeoutType != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.TimeoutType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChildWorkflowExecutionTerminatedEventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChildWorkflowExecutionTerminatedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChildWorkflowExecutionTerminatedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StartedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartedEventId))
		i--
		dAtA[i] = 0x28
	}
	if m.InitiatedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.InitiatedEventId))
		i--
		dAtA[i] = 0x20
	}
	if m.WorkflowType != nil {
		{
			size, err := m.WorkflowType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HistoryEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HistoryEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Attributes != nil {
		{
			size := m.Attributes.Size()
			i -= size
			if _, err := m.Attributes.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.TaskId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x28
	}
	if m.Version != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x20
	}
	if m.EventType != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.EventType))
		i--
		dAtA[i] = 0x18
	}
	if m.Timestamp != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if m.EventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.EventId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HistoryEvent_WorkflowExecutionStartedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_WorkflowExecutionStartedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WorkflowExecutionStartedEventAttributes != nil {
		{
			size, err := m.WorkflowExecutionStartedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_WorkflowExecutionCompletedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_WorkflowExecutionCompletedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WorkflowExecutionCompletedEventAttributes != nil {
		{
			size, err := m.WorkflowExecutionCompletedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_WorkflowExecutionFailedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_WorkflowExecutionFailedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WorkflowExecutionFailedEventAttributes != nil {
		{
			size, err := m.WorkflowExecutionFailedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_WorkflowExecutionTimedOutEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_WorkflowExecutionTimedOutEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WorkflowExecutionTimedOutEventAttributes != nil {
		{
			size, err := m.WorkflowExecutionTimedOutEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_DecisionTaskScheduledEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_DecisionTaskScheduledEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DecisionTaskScheduledEventAttributes != nil {
		{
			size, err := m.DecisionTaskScheduledEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_DecisionTaskStartedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_DecisionTaskStartedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DecisionTaskStartedEventAttributes != nil {
		{
			size, err := m.DecisionTaskStartedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_DecisionTaskCompletedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_DecisionTaskCompletedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DecisionTaskCompletedEventAttributes != nil {
		{
			size, err := m.DecisionTaskCompletedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_DecisionTaskTimedOutEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_DecisionTaskTimedOutEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DecisionTaskTimedOutEventAttributes != nil {
		{
			size, err := m.DecisionTaskTimedOutEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_DecisionTaskFailedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_DecisionTaskFailedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DecisionTaskFailedEventAttributes != nil {
		{
			size, err := m.DecisionTaskFailedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_ActivityTaskScheduledEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_ActivityTaskScheduledEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActivityTaskScheduledEventAttributes != nil {
		{
			size, err := m.ActivityTaskScheduledEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_ActivityTaskStartedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_ActivityTaskStartedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActivityTaskStartedEventAttributes != nil {
		{
			size, err := m.ActivityTaskStartedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_ActivityTaskCompletedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_ActivityTaskCompletedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActivityTaskCompletedEventAttributes != nil {
		{
			size, err := m.ActivityTaskCompletedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_ActivityTaskFailedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_ActivityTaskFailedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActivityTaskFailedEventAttributes != nil {
		{
			size, err := m.ActivityTaskFailedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_ActivityTaskTimedOutEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_ActivityTaskTimedOutEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActivityTaskTimedOutEventAttributes != nil {
		{
			size, err := m.ActivityTaskTimedOutEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_TimerStartedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_TimerStartedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TimerStartedEventAttributes != nil {
		{
			size, err := m.TimerStartedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_TimerFiredEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_TimerFiredEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TimerFiredEventAttributes != nil {
		{
			size, err := m.TimerFiredEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_ActivityTaskCancelRequestedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_ActivityTaskCancelRequestedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActivityTaskCancelRequestedEventAttributes != nil {
		{
			size, err := m.ActivityTaskCancelRequestedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_RequestCancelActivityTaskFailedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_RequestCancelActivityTaskFailedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RequestCancelActivityTaskFailedEventAttributes != nil {
		{
			size, err := m.RequestCancelActivityTaskFailedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_ActivityTaskCanceledEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_ActivityTaskCanceledEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActivityTaskCanceledEventAttributes != nil {
		{
			size, err := m.ActivityTaskCanceledEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_TimerCanceledEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_TimerCanceledEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TimerCanceledEventAttributes != nil {
		{
			size, err := m.TimerCanceledEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_CancelTimerFailedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_CancelTimerFailedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CancelTimerFailedEventAttributes != nil {
		{
			size, err := m.CancelTimerFailedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_MarkerRecordedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_MarkerRecordedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MarkerRecordedEventAttributes != nil {
		{
			size, err := m.MarkerRecordedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_WorkflowExecutionSignaledEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_WorkflowExecutionSignaledEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WorkflowExecutionSignaledEventAttributes != nil {
		{
			size, err := m.WorkflowExecutionSignaledEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_WorkflowExecutionTerminatedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_WorkflowExecutionTerminatedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WorkflowExecutionTerminatedEventAttributes != nil {
		{
			size, err := m.WorkflowExecutionTerminatedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_WorkflowExecutionCancelRequestedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_WorkflowExecutionCancelRequestedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WorkflowExecutionCancelRequestedEventAttributes != nil {
		{
			size, err := m.WorkflowExecutionCancelRequestedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_WorkflowExecutionCanceledEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_WorkflowExecutionCanceledEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WorkflowExecutionCanceledEventAttributes != nil {
		{
			size, err := m.WorkflowExecutionCanceledEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RequestCancelExternalWorkflowExecutionInitiatedEventAttributes != nil {
		{
			size, err := m.RequestCancelExternalWorkflowExecutionInitiatedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_RequestCancelExternalWorkflowExecutionFailedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_RequestCancelExternalWorkflowExecutionFailedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RequestCancelExternalWorkflowExecutionFailedEventAttributes != nil {
		{
			size, err := m.RequestCancelExternalWorkflowExecutionFailedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_ExternalWorkflowExecutionCancelRequestedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_ExternalWorkflowExecutionCancelRequestedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExternalWorkflowExecutionCancelRequestedEventAttributes != nil {
		{
			size, err := m.ExternalWorkflowExecutionCancelRequestedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_WorkflowExecutionContinuedAsNewEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_WorkflowExecutionContinuedAsNewEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WorkflowExecutionContinuedAsNewEventAttributes != nil {
		{
			size, err := m.WorkflowExecutionContinuedAsNewEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_StartChildWorkflowExecutionInitiatedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_StartChildWorkflowExecutionInitiatedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StartChildWorkflowExecutionInitiatedEventAttributes != nil {
		{
			size, err := m.StartChildWorkflowExecutionInitiatedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_StartChildWorkflowExecutionFailedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_StartChildWorkflowExecutionFailedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StartChildWorkflowExecutionFailedEventAttributes != nil {
		{
			size, err := m.StartChildWorkflowExecutionFailedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_ChildWorkflowExecutionStartedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_ChildWorkflowExecutionStartedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChildWorkflowExecutionStartedEventAttributes != nil {
		{
			size, err := m.ChildWorkflowExecutionStartedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_ChildWorkflowExecutionCompletedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_ChildWorkflowExecutionCompletedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChildWorkflowExecutionCompletedEventAttributes != nil {
		{
			size, err := m.ChildWorkflowExecutionCompletedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_ChildWorkflowExecutionFailedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_ChildWorkflowExecutionFailedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChildWorkflowExecutionFailedEventAttributes != nil {
		{
			size, err := m.ChildWorkflowExecutionFailedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_ChildWorkflowExecutionCanceledEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_ChildWorkflowExecutionCanceledEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChildWorkflowExecutionCanceledEventAttributes != nil {
		{
			size, err := m.ChildWorkflowExecutionCanceledEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_ChildWorkflowExecutionTimedOutEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_ChildWorkflowExecutionTimedOutEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChildWorkflowExecutionTimedOutEventAttributes != nil {
		{
			size, err := m.ChildWorkflowExecutionTimedOutEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_ChildWorkflowExecutionTerminatedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_ChildWorkflowExecutionTerminatedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChildWorkflowExecutionTerminatedEventAttributes != nil {
		{
			size, err := m.ChildWorkflowExecutionTerminatedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_SignalExternalWorkflowExecutionInitiatedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_SignalExternalWorkflowExecutionInitiatedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SignalExternalWorkflowExecutionInitiatedEventAttributes != nil {
		{
			size, err := m.SignalExternalWorkflowExecutionInitiatedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_SignalExternalWorkflowExecutionFailedEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_SignalExternalWorkflowExecutionFailedEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SignalExternalWorkflowExecutionFailedEventAttributes != nil {
		{
			size, err := m.SignalExternalWorkflowExecutionFailedEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_ExternalWorkflowExecutionSignaledEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_ExternalWorkflowExecutionSignaledEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExternalWorkflowExecutionSignaledEventAttributes != nil {
		{
			size, err := m.ExternalWorkflowExecutionSignaledEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *HistoryEvent_UpsertWorkflowSearchAttributesEventAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEvent_UpsertWorkflowSearchAttributesEventAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpsertWorkflowSearchAttributesEventAttributes != nil {
		{
			size, err := m.UpsertWorkflowSearchAttributesEventAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *History) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *History) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *History) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Events[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WorkflowExecutionStartedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkflowType != nil {
		l = m.WorkflowType.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.ParentWorkflowNamespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ParentWorkflowExecution != nil {
		l = m.ParentWorkflowExecution.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ParentInitiatedEventId != 0 {
		n += 1 + sovMessage(uint64(m.ParentInitiatedEventId))
	}
	if m.TaskList != nil {
		l = m.TaskList.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Input != nil {
		l = m.Input.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ExecutionStartToCloseTimeoutSeconds != 0 {
		n += 1 + sovMessage(uint64(m.ExecutionStartToCloseTimeoutSeconds))
	}
	if m.TaskStartToCloseTimeoutSeconds != 0 {
		n += 1 + sovMessage(uint64(m.TaskStartToCloseTimeoutSeconds))
	}
	l = len(m.ContinuedExecutionRunId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Initiator != 0 {
		n += 1 + sovMessage(uint64(m.Initiator))
	}
	l = len(m.ContinuedFailureReason)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ContinuedFailureDetails != nil {
		l = m.ContinuedFailureDetails.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.LastCompletionResult != nil {
		l = m.LastCompletionResult.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.OriginalExecutionRunId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.FirstExecutionRunId)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.RetryPolicy != nil {
		l = m.RetryPolicy.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.Attempt != 0 {
		n += 2 + sovMessage(uint64(m.Attempt))
	}
	if m.ExpirationTimestamp != 0 {
		n += 2 + sovMessage(uint64(m.ExpirationTimestamp))
	}
	l = len(m.CronSchedule)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.FirstDecisionTaskBackoffSeconds != 0 {
		n += 2 + sovMessage(uint64(m.FirstDecisionTaskBackoffSeconds))
	}
	if m.Memo != nil {
		l = m.Memo.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.SearchAttributes != nil {
		l = m.SearchAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.PrevAutoResetPoints != nil {
		l = m.PrevAutoResetPoints.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *WorkflowExecutionCompletedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.DecisionTaskCompletedEventId != 0 {
		n += 1 + sovMessage(uint64(m.DecisionTaskCompletedEventId))
	}
	return n
}

func (m *WorkflowExecutionFailedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.DecisionTaskCompletedEventId != 0 {
		n += 1 + sovMessage(uint64(m.DecisionTaskCompletedEventId))
	}
	return n
}

func (m *WorkflowExecutionTimedOutEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimeoutType != 0 {
		n += 1 + sovMessage(uint64(m.TimeoutType))
	}
	return n
}

func (m *WorkflowExecutionContinuedAsNewEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NewExecutionRunId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowType != nil {
		l = m.WorkflowType.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.TaskList != nil {
		l = m.TaskList.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Input != nil {
		l = m.Input.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ExecutionStartToCloseTimeoutSeconds != 0 {
		n += 1 + sovMessage(uint64(m.ExecutionStartToCloseTimeoutSeconds))
	}
	if m.TaskStartToCloseTimeoutSeconds != 0 {
		n += 1 + sovMessage(uint64(m.TaskStartToCloseTimeoutSeconds))
	}
	if m.DecisionTaskCompletedEventId != 0 {
		n += 1 + sovMessage(uint64(m.DecisionTaskCompletedEventId))
	}
	if m.BackoffStartIntervalInSeconds != 0 {
		n += 1 + sovMessage(uint64(m.BackoffStartIntervalInSeconds))
	}
	if m.Initiator != 0 {
		n += 1 + sovMessage(uint64(m.Initiator))
	}
	l = len(m.FailureReason)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.FailureDetails != nil {
		l = m.FailureDetails.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.LastCompletionResult != nil {
		l = m.LastCompletionResult.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Memo != nil {
		l = m.Memo.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.SearchAttributes != nil {
		l = m.SearchAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *DecisionTaskScheduledEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskList != nil {
		l = m.TaskList.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.StartToCloseTimeoutSeconds != 0 {
		n += 1 + sovMessage(uint64(m.StartToCloseTimeoutSeconds))
	}
	if m.Attempt != 0 {
		n += 1 + sovMessage(uint64(m.Attempt))
	}
	return n
}

func (m *DecisionTaskStartedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScheduledEventId != 0 {
		n += 1 + sovMessage(uint64(m.ScheduledEventId))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *DecisionTaskCompletedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScheduledEventId != 0 {
		n += 1 + sovMessage(uint64(m.ScheduledEventId))
	}
	if m.StartedEventId != 0 {
		n += 1 + sovMessage(uint64(m.StartedEventId))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.BinaryChecksum)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *DecisionTaskTimedOutEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScheduledEventId != 0 {
		n += 1 + sovMessage(uint64(m.ScheduledEventId))
	}
	if m.StartedEventId != 0 {
		n += 1 + sovMessage(uint64(m.StartedEventId))
	}
	if m.TimeoutType != 0 {
		n += 1 + sovMessage(uint64(m.TimeoutType))
	}
	return n
}

func (m *DecisionTaskFailedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScheduledEventId != 0 {
		n += 1 + sovMessage(uint64(m.ScheduledEventId))
	}
	if m.StartedEventId != 0 {
		n += 1 + sovMessage(uint64(m.StartedEventId))
	}
	if m.Cause != 0 {
		n += 1 + sovMessage(uint64(m.Cause))
	}
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.BaseRunId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.NewRunId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ForkEventVersion != 0 {
		n += 1 + sovMessage(uint64(m.ForkEventVersion))
	}
	l = len(m.BinaryChecksum)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *ActivityTaskScheduledEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ActivityId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ActivityType != nil {
		l = m.ActivityType.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.TaskList != nil {
		l = m.TaskList.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Input != nil {
		l = m.Input.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ScheduleToCloseTimeoutSeconds != 0 {
		n += 1 + sovMessage(uint64(m.ScheduleToCloseTimeoutSeconds))
	}
	if m.ScheduleToStartTimeoutSeconds != 0 {
		n += 1 + sovMessage(uint64(m.ScheduleToStartTimeoutSeconds))
	}
	if m.StartToCloseTimeoutSeconds != 0 {
		n += 1 + sovMessage(uint64(m.StartToCloseTimeoutSeconds))
	}
	if m.HeartbeatTimeoutSeconds != 0 {
		n += 1 + sovMessage(uint64(m.HeartbeatTimeoutSeconds))
	}
	if m.DecisionTaskCompletedEventId != 0 {
		n += 1 + sovMessage(uint64(m.DecisionTaskCompletedEventId))
	}
	if m.RetryPolicy != nil {
		l = m.RetryPolicy.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *ActivityTaskStartedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScheduledEventId != 0 {
		n += 1 + sovMessage(uint64(m.ScheduledEventId))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Attempt != 0 {
		n += 1 + sovMessage(uint64(m.Attempt))
	}
	l = len(m.LastFailureReason)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.LastFailureDetails != nil {
		l = m.LastFailureDetails.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *ActivityTaskCompletedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ScheduledEventId != 0 {
		n += 1 + sovMessage(uint64(m.ScheduledEventId))
	}
	if m.StartedEventId != 0 {
		n += 1 + sovMessage(uint64(m.StartedEventId))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *ActivityTaskFailedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ScheduledEventId != 0 {
		n += 1 + sovMessage(uint64(m.ScheduledEventId))
	}
	if m.StartedEventId != 0 {
		n += 1 + sovMessage(uint64(m.StartedEventId))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *ActivityTaskTimedOutEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ScheduledEventId != 0 {
		n += 1 + sovMessage(uint64(m.ScheduledEventId))
	}
	if m.StartedEventId != 0 {
		n += 1 + sovMessage(uint64(m.StartedEventId))
	}
	if m.TimeoutType != 0 {
		n += 1 + sovMessage(uint64(m.TimeoutType))
	}
	l = len(m.LastFailureReason)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.LastFailureDetails != nil {
		l = m.LastFailureDetails.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *ActivityTaskCancelRequestedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ActivityId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.DecisionTaskCompletedEventId != 0 {
		n += 1 + sovMessage(uint64(m.DecisionTaskCompletedEventId))
	}
	return n
}

func (m *RequestCancelActivityTaskFailedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ActivityId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Cause)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.DecisionTaskCompletedEventId != 0 {
		n += 1 + sovMessage(uint64(m.DecisionTaskCompletedEventId))
	}
	return n
}

func (m *ActivityTaskCanceledEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.LatestCancelRequestedEventId != 0 {
		n += 1 + sovMessage(uint64(m.LatestCancelRequestedEventId))
	}
	if m.ScheduledEventId != 0 {
		n += 1 + sovMessage(uint64(m.ScheduledEventId))
	}
	if m.StartedEventId != 0 {
		n += 1 + sovMessage(uint64(m.StartedEventId))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *TimerStartedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TimerId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.StartToFireTimeoutSeconds != 0 {
		n += 1 + sovMessage(uint64(m.StartToFireTimeoutSeconds))
	}
	if m.DecisionTaskCompletedEventId != 0 {
		n += 1 + sovMessage(uint64(m.DecisionTaskCompletedEventId))
	}
	return n
}

func (m *TimerFiredEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TimerId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.StartedEventId != 0 {
		n += 1 + sovMessage(uint64(m.StartedEventId))
	}
	return n
}

func (m *TimerCanceledEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TimerId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.StartedEventId != 0 {
		n += 1 + sovMessage(uint64(m.StartedEventId))
	}
	if m.DecisionTaskCompletedEventId != 0 {
		n += 1 + sovMessage(uint64(m.DecisionTaskCompletedEventId))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *CancelTimerFailedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TimerId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Cause)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.DecisionTaskCompletedEventId != 0 {
		n += 1 + sovMessage(uint64(m.DecisionTaskCompletedEventId))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *WorkflowExecutionCancelRequestedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cause)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ExternalInitiatedEventId != 0 {
		n += 1 + sovMessage(uint64(m.ExternalInitiatedEventId))
	}
	if m.ExternalWorkflowExecution != nil {
		l = m.ExternalWorkflowExecution.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *WorkflowExecutionCanceledEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DecisionTaskCompletedEventId != 0 {
		n += 1 + sovMessage(uint64(m.DecisionTaskCompletedEventId))
	}
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *MarkerRecordedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarkerName)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.DecisionTaskCompletedEventId != 0 {
		n += 1 + sovMessage(uint64(m.DecisionTaskCompletedEventId))
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *WorkflowExecutionSignaledEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SignalName)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Input != nil {
		l = m.Input.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *WorkflowExecutionTerminatedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DecisionTaskCompletedEventId != 0 {
		n += 1 + sovMessage(uint64(m.DecisionTaskCompletedEventId))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Control)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ChildWorkflowOnly {
		n += 2
	}
	return n
}

func (m *RequestCancelExternalWorkflowExecutionFailedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cause != 0 {
		n += 1 + sovMessage(uint64(m.Cause))
	}
	if m.DecisionTaskCompletedEventId != 0 {
		n += 1 + sovMessage(uint64(m.DecisionTaskCompletedEventId))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.InitiatedEventId != 0 {
		n += 1 + sovMessage(uint64(m.InitiatedEventId))
	}
	l = len(m.Control)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *ExternalWorkflowExecutionCancelRequestedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InitiatedEventId != 0 {
		n += 1 + sovMessage(uint64(m.InitiatedEventId))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *SignalExternalWorkflowExecutionInitiatedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DecisionTaskCompletedEventId != 0 {
		n += 1 + sovMessage(uint64(m.DecisionTaskCompletedEventId))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.SignalName)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Input != nil {
		l = m.Input.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Control)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ChildWorkflowOnly {
		n += 2
	}
	return n
}

func (m *SignalExternalWorkflowExecutionFailedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cause != 0 {
		n += 1 + sovMessage(uint64(m.Cause))
	}
	if m.DecisionTaskCompletedEventId != 0 {
		n += 1 + sovMessage(uint64(m.DecisionTaskCompletedEventId))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.InitiatedEventId != 0 {
		n += 1 + sovMessage(uint64(m.InitiatedEventId))
	}
	l = len(m.Control)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *ExternalWorkflowExecutionSignaledEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InitiatedEventId != 0 {
		n += 1 + sovMessage(uint64(m.InitiatedEventId))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Control)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *UpsertWorkflowSearchAttributesEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DecisionTaskCompletedEventId != 0 {
		n += 1 + sovMessage(uint64(m.DecisionTaskCompletedEventId))
	}
	if m.SearchAttributes != nil {
		l = m.SearchAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *StartChildWorkflowExecutionInitiatedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.WorkflowId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowType != nil {
		l = m.WorkflowType.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.TaskList != nil {
		l = m.TaskList.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Input != nil {
		l = m.Input.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ExecutionStartToCloseTimeoutSeconds != 0 {
		n += 1 + sovMessage(uint64(m.ExecutionStartToCloseTimeoutSeconds))
	}
	if m.TaskStartToCloseTimeoutSeconds != 0 {
		n += 1 + sovMessage(uint64(m.TaskStartToCloseTimeoutSeconds))
	}
	if m.ParentClosePolicy != 0 {
		n += 1 + sovMessage(uint64(m.ParentClosePolicy))
	}
	l = len(m.Control)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.DecisionTaskCompletedEventId != 0 {
		n += 1 + sovMessage(uint64(m.DecisionTaskCompletedEventId))
	}
	if m.WorkflowIdReusePolicy != 0 {
		n += 1 + sovMessage(uint64(m.WorkflowIdReusePolicy))
	}
	if m.RetryPolicy != nil {
		l = m.RetryPolicy.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.CronSchedule)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Memo != nil {
		l = m.Memo.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.SearchAttributes != nil {
		l = m.SearchAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *StartChildWorkflowExecutionFailedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.WorkflowId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowType != nil {
		l = m.WorkflowType.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Cause != 0 {
		n += 1 + sovMessage(uint64(m.Cause))
	}
	l = len(m.Control)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.InitiatedEventId != 0 {
		n += 1 + sovMessage(uint64(m.InitiatedEventId))
	}
	if m.DecisionTaskCompletedEventId != 0 {
		n += 1 + sovMessage(uint64(m.DecisionTaskCompletedEventId))
	}
	return n
}

func (m *ChildWorkflowExecutionStartedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.InitiatedEventId != 0 {
		n += 1 + sovMessage(uint64(m.InitiatedEventId))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowType != nil {
		l = m.WorkflowType.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *ChildWorkflowExecutionCompletedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowType != nil {
		l = m.WorkflowType.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.InitiatedEventId != 0 {
		n += 1 + sovMessage(uint64(m.InitiatedEventId))
	}
	if m.StartedEventId != 0 {
		n += 1 + sovMessage(uint64(m.StartedEventId))
	}
	return n
}

func (m *ChildWorkflowExecutionFailedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowType != nil {
		l = m.WorkflowType.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.InitiatedEventId != 0 {
		n += 1 + sovMessage(uint64(m.InitiatedEventId))
	}
	if m.StartedEventId != 0 {
		n += 1 + sovMessage(uint64(m.StartedEventId))
	}
	return n
}

func (m *ChildWorkflowExecutionCanceledEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowType != nil {
		l = m.WorkflowType.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.InitiatedEventId != 0 {
		n += 1 + sovMessage(uint64(m.InitiatedEventId))
	}
	if m.StartedEventId != 0 {
		n += 1 + sovMessage(uint64(m.StartedEventId))
	}
	return n
}

func (m *ChildWorkflowExecutionTimedOutEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimeoutType != 0 {
		n += 1 + sovMessage(uint64(m.TimeoutType))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowType != nil {
		l = m.WorkflowType.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.InitiatedEventId != 0 {
		n += 1 + sovMessage(uint64(m.InitiatedEventId))
	}
	if m.StartedEventId != 0 {
		n += 1 + sovMessage(uint64(m.StartedEventId))
	}
	return n
}

func (m *ChildWorkflowExecutionTerminatedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowType != nil {
		l = m.WorkflowType.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.InitiatedEventId != 0 {
		n += 1 + sovMessage(uint64(m.InitiatedEventId))
	}
	if m.StartedEventId != 0 {
		n += 1 + sovMessage(uint64(m.StartedEventId))
	}
	return n
}

func (m *HistoryEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventId != 0 {
		n += 1 + sovMessage(uint64(m.EventId))
	}
	if m.Timestamp != 0 {
		n += 1 + sovMessage(uint64(m.Timestamp))
	}
	if m.EventType != 0 {
		n += 1 + sovMessage(uint64(m.EventType))
	}
	if m.Version != 0 {
		n += 1 + sovMessage(uint64(m.Version))
	}
	if m.TaskId != 0 {
		n += 1 + sovMessage(uint64(m.TaskId))
	}
	if m.Attributes != nil {
		n += m.Attributes.Size()
	}
	return n
}

func (m *HistoryEvent_WorkflowExecutionStartedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkflowExecutionStartedEventAttributes != nil {
		l = m.WorkflowExecutionStartedEventAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_WorkflowExecutionCompletedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkflowExecutionCompletedEventAttributes != nil {
		l = m.WorkflowExecutionCompletedEventAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_WorkflowExecutionFailedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkflowExecutionFailedEventAttributes != nil {
		l = m.WorkflowExecutionFailedEventAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_WorkflowExecutionTimedOutEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkflowExecutionTimedOutEventAttributes != nil {
		l = m.WorkflowExecutionTimedOutEventAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_DecisionTaskScheduledEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DecisionTaskScheduledEventAttributes != nil {
		l = m.DecisionTaskScheduledEventAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_DecisionTaskStartedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DecisionTaskStartedEventAttributes != nil {
		l = m.DecisionTaskStartedEventAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_DecisionTaskCompletedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DecisionTaskCompletedEventAttributes != nil {
		l = m.DecisionTaskCompletedEventAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_DecisionTaskTimedOutEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DecisionTaskTimedOutEventAttributes != nil {
		l = m.DecisionTaskTimedOutEventAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_DecisionTaskFailedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DecisionTaskFailedEventAttributes != nil {
		l = m.DecisionTaskFailedEventAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_ActivityTaskScheduledEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityTaskScheduledEventAttributes != nil {
		l = m.ActivityTaskScheduledEventAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_ActivityTaskStartedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityTaskStartedEventAttributes != nil {
		l = m.ActivityTaskStartedEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_ActivityTaskCompletedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityTaskCompletedEventAttributes != nil {
		l = m.ActivityTaskCompletedEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_ActivityTaskFailedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityTaskFailedEventAttributes != nil {
		l = m.ActivityTaskFailedEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_ActivityTaskTimedOutEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityTaskTimedOutEventAttributes != nil {
		l = m.ActivityTaskTimedOutEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_TimerStartedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimerStartedEventAttributes != nil {
		l = m.TimerStartedEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_TimerFiredEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimerFiredEventAttributes != nil {
		l = m.TimerFiredEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_ActivityTaskCancelRequestedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityTaskCancelRequestedEventAttributes != nil {
		l = m.ActivityTaskCancelRequestedEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_RequestCancelActivityTaskFailedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestCancelActivityTaskFailedEventAttributes != nil {
		l = m.RequestCancelActivityTaskFailedEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_ActivityTaskCanceledEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityTaskCanceledEventAttributes != nil {
		l = m.ActivityTaskCanceledEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_TimerCanceledEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimerCanceledEventAttributes != nil {
		l = m.TimerCanceledEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_CancelTimerFailedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CancelTimerFailedEventAttributes != nil {
		l = m.CancelTimerFailedEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_MarkerRecordedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MarkerRecordedEventAttributes != nil {
		l = m.MarkerRecordedEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_WorkflowExecutionSignaledEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkflowExecutionSignaledEventAttributes != nil {
		l = m.WorkflowExecutionSignaledEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_WorkflowExecutionTerminatedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkflowExecutionTerminatedEventAttributes != nil {
		l = m.WorkflowExecutionTerminatedEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_WorkflowExecutionCancelRequestedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkflowExecutionCancelRequestedEventAttributes != nil {
		l = m.WorkflowExecutionCancelRequestedEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_WorkflowExecutionCanceledEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkflowExecutionCanceledEventAttributes != nil {
		l = m.WorkflowExecutionCanceledEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestCancelExternalWorkflowExecutionInitiatedEventAttributes != nil {
		l = m.RequestCancelExternalWorkflowExecutionInitiatedEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_RequestCancelExternalWorkflowExecutionFailedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestCancelExternalWorkflowExecutionFailedEventAttributes != nil {
		l = m.RequestCancelExternalWorkflowExecutionFailedEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_ExternalWorkflowExecutionCancelRequestedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExternalWorkflowExecutionCancelRequestedEventAttributes != nil {
		l = m.ExternalWorkflowExecutionCancelRequestedEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_WorkflowExecutionContinuedAsNewEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkflowExecutionContinuedAsNewEventAttributes != nil {
		l = m.WorkflowExecutionContinuedAsNewEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_StartChildWorkflowExecutionInitiatedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartChildWorkflowExecutionInitiatedEventAttributes != nil {
		l = m.StartChildWorkflowExecutionInitiatedEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_StartChildWorkflowExecutionFailedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartChildWorkflowExecutionFailedEventAttributes != nil {
		l = m.StartChildWorkflowExecutionFailedEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_ChildWorkflowExecutionStartedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChildWorkflowExecutionStartedEventAttributes != nil {
		l = m.ChildWorkflowExecutionStartedEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_ChildWorkflowExecutionCompletedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChildWorkflowExecutionCompletedEventAttributes != nil {
		l = m.ChildWorkflowExecutionCompletedEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_ChildWorkflowExecutionFailedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChildWorkflowExecutionFailedEventAttributes != nil {
		l = m.ChildWorkflowExecutionFailedEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_ChildWorkflowExecutionCanceledEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChildWorkflowExecutionCanceledEventAttributes != nil {
		l = m.ChildWorkflowExecutionCanceledEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_ChildWorkflowExecutionTimedOutEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChildWorkflowExecutionTimedOutEventAttributes != nil {
		l = m.ChildWorkflowExecutionTimedOutEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_ChildWorkflowExecutionTerminatedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChildWorkflowExecutionTerminatedEventAttributes != nil {
		l = m.ChildWorkflowExecutionTerminatedEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_SignalExternalWorkflowExecutionInitiatedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignalExternalWorkflowExecutionInitiatedEventAttributes != nil {
		l = m.SignalExternalWorkflowExecutionInitiatedEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_SignalExternalWorkflowExecutionFailedEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignalExternalWorkflowExecutionFailedEventAttributes != nil {
		l = m.SignalExternalWorkflowExecutionFailedEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_ExternalWorkflowExecutionSignaledEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExternalWorkflowExecutionSignaledEventAttributes != nil {
		l = m.ExternalWorkflowExecutionSignaledEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *HistoryEvent_UpsertWorkflowSearchAttributesEventAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpsertWorkflowSearchAttributesEventAttributes != nil {
		l = m.UpsertWorkflowSearchAttributesEventAttributes.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *History) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WorkflowExecutionStartedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowExecutionStartedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowExecutionStartedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowType == nil {
				m.WorkflowType = &common.WorkflowType{}
			}
			if err := m.WorkflowType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentWorkflowNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentWorkflowNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentWorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ParentWorkflowExecution == nil {
				m.ParentWorkflowExecution = &execution.WorkflowExecution{}
			}
			if err := m.ParentWorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentInitiatedEventId", wireType)
			}
			m.ParentInitiatedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentInitiatedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskList == nil {
				m.TaskList = &tasklist.TaskList{}
			}
			if err := m.TaskList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Input == nil {
				m.Input = &common.Payload{}
			}
			if err := m.Input.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionStartToCloseTimeoutSeconds", wireType)
			}
			m.ExecutionStartToCloseTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecutionStartToCloseTimeoutSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskStartToCloseTimeoutSeconds", wireType)
			}
			m.TaskStartToCloseTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskStartToCloseTimeoutSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContinuedExecutionRunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContinuedExecutionRunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Initiator", wireType)
			}
			m.Initiator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Initiator |= common.ContinueAsNewInitiator(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContinuedFailureReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContinuedFailureReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContinuedFailureDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContinuedFailureDetails == nil {
				m.ContinuedFailureDetails = &common.Payload{}
			}
			if err := m.ContinuedFailureDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastCompletionResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastCompletionResult == nil {
				m.LastCompletionResult = &common.Payload{}
			}
			if err := m.LastCompletionResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalExecutionRunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalExecutionRunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstExecutionRunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstExecutionRunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RetryPolicy == nil {
				m.RetryPolicy = &common.RetryPolicy{}
			}
			if err := m.RetryPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attempt", wireType)
			}
			m.Attempt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attempt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTimestamp", wireType)
			}
			m.ExpirationTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CronSchedule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CronSchedule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstDecisionTaskBackoffSeconds", wireType)
			}
			m.FirstDecisionTaskBackoffSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstDecisionTaskBackoffSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Memo == nil {
				m.Memo = &common.Memo{}
			}
			if err := m.Memo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SearchAttributes == nil {
				m.SearchAttributes = &common.SearchAttributes{}
			}
			if err := m.SearchAttributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevAutoResetPoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrevAutoResetPoints == nil {
				m.PrevAutoResetPoints = &execution.ResetPoints{}
			}
			if err := m.PrevAutoResetPoints.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkflowExecutionCompletedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowExecutionCompletedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowExecutionCompletedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &common.Payload{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionTaskCompletedEventId", wireType)
			}
			m.DecisionTaskCompletedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecisionTaskCompletedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkflowExecutionFailedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowExecutionFailedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowExecutionFailedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &common.Payload{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionTaskCompletedEventId", wireType)
			}
			m.DecisionTaskCompletedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecisionTaskCompletedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkflowExecutionTimedOutEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowExecutionTimedOutEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowExecutionTimedOutEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutType", wireType)
			}
			m.TimeoutType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutType |= TimeoutType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkflowExecutionContinuedAsNewEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowExecutionContinuedAsNewEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowExecutionContinuedAsNewEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewExecutionRunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewExecutionRunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowType == nil {
				m.WorkflowType = &common.WorkflowType{}
			}
			if err := m.WorkflowType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskList == nil {
				m.TaskList = &tasklist.TaskList{}
			}
			if err := m.TaskList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Input == nil {
				m.Input = &common.Payload{}
			}
			if err := m.Input.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionStartToCloseTimeoutSeconds", wireType)
			}
			m.ExecutionStartToCloseTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecutionStartToCloseTimeoutSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskStartToCloseTimeoutSeconds", wireType)
			}
			m.TaskStartToCloseTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskStartToCloseTimeoutSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionTaskCompletedEventId", wireType)
			}
			m.DecisionTaskCompletedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecisionTaskCompletedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackoffStartIntervalInSeconds", wireType)
			}
			m.BackoffStartIntervalInSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BackoffStartIntervalInSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Initiator", wireType)
			}
			m.Initiator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Initiator |= common.ContinueAsNewInitiator(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailureReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FailureReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailureDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FailureDetails == nil {
				m.FailureDetails = &common.Payload{}
			}
			if err := m.FailureDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastCompletionResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastCompletionResult == nil {
				m.LastCompletionResult = &common.Payload{}
			}
			if err := m.LastCompletionResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Memo == nil {
				m.Memo = &common.Memo{}
			}
			if err := m.Memo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SearchAttributes == nil {
				m.SearchAttributes = &common.SearchAttributes{}
			}
			if err := m.SearchAttributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DecisionTaskScheduledEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DecisionTaskScheduledEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DecisionTaskScheduledEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskList == nil {
				m.TaskList = &tasklist.TaskList{}
			}
			if err := m.TaskList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartToCloseTimeoutSeconds", wireType)
			}
			m.StartToCloseTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartToCloseTimeoutSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attempt", wireType)
			}
			m.Attempt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attempt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DecisionTaskStartedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DecisionTaskStartedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DecisionTaskStartedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledEventId", wireType)
			}
			m.ScheduledEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduledEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DecisionTaskCompletedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DecisionTaskCompletedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DecisionTaskCompletedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledEventId", wireType)
			}
			m.ScheduledEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduledEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedEventId", wireType)
			}
			m.StartedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinaryChecksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BinaryChecksum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DecisionTaskTimedOutEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DecisionTaskTimedOutEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DecisionTaskTimedOutEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledEventId", wireType)
			}
			m.ScheduledEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduledEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedEventId", wireType)
			}
			m.StartedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutType", wireType)
			}
			m.TimeoutType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutType |= TimeoutType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DecisionTaskFailedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DecisionTaskFailedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DecisionTaskFailedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledEventId", wireType)
			}
			m.ScheduledEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduledEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedEventId", wireType)
			}
			m.StartedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cause", wireType)
			}
			m.Cause = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cause |= DecisionTaskFailedCause(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &common.Payload{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseRunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseRunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewRunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewRunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForkEventVersion", wireType)
			}
			m.ForkEventVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForkEventVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinaryChecksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BinaryChecksum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivityTaskScheduledEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityTaskScheduledEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityTaskScheduledEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActivityType == nil {
				m.ActivityType = &common.ActivityType{}
			}
			if err := m.ActivityType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskList == nil {
				m.TaskList = &tasklist.TaskList{}
			}
			if err := m.TaskList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Input == nil {
				m.Input = &common.Payload{}
			}
			if err := m.Input.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleToCloseTimeoutSeconds", wireType)
			}
			m.ScheduleToCloseTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduleToCloseTimeoutSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleToStartTimeoutSeconds", wireType)
			}
			m.ScheduleToStartTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduleToStartTimeoutSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartToCloseTimeoutSeconds", wireType)
			}
			m.StartToCloseTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartToCloseTimeoutSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatTimeoutSeconds", wireType)
			}
			m.HeartbeatTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeartbeatTimeoutSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionTaskCompletedEventId", wireType)
			}
			m.DecisionTaskCompletedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecisionTaskCompletedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RetryPolicy == nil {
				m.RetryPolicy = &common.RetryPolicy{}
			}
			if err := m.RetryPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivityTaskStartedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityTaskStartedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityTaskStartedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledEventId", wireType)
			}
			m.ScheduledEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduledEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attempt", wireType)
			}
			m.Attempt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attempt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastFailureReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastFailureReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastFailureDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastFailureDetails == nil {
				m.LastFailureDetails = &common.Payload{}
			}
			if err := m.LastFailureDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivityTaskCompletedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityTaskCompletedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityTaskCompletedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &common.Payload{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledEventId", wireType)
			}
			m.ScheduledEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduledEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedEventId", wireType)
			}
			m.StartedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivityTaskFailedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityTaskFailedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityTaskFailedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &common.Payload{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledEventId", wireType)
			}
			m.ScheduledEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduledEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedEventId", wireType)
			}
			m.StartedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivityTaskTimedOutEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityTaskTimedOutEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityTaskTimedOutEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &common.Payload{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledEventId", wireType)
			}
			m.ScheduledEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduledEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedEventId", wireType)
			}
			m.StartedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutType", wireType)
			}
			m.TimeoutType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutType |= TimeoutType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastFailureReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastFailureReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastFailureDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastFailureDetails == nil {
				m.LastFailureDetails = &common.Payload{}
			}
			if err := m.LastFailureDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivityTaskCancelRequestedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityTaskCancelRequestedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityTaskCancelRequestedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionTaskCompletedEventId", wireType)
			}
			m.DecisionTaskCompletedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecisionTaskCompletedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestCancelActivityTaskFailedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestCancelActivityTaskFailedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestCancelActivityTaskFailedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cause", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cause = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionTaskCompletedEventId", wireType)
			}
			m.DecisionTaskCompletedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecisionTaskCompletedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivityTaskCanceledEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityTaskCanceledEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityTaskCanceledEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &common.Payload{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestCancelRequestedEventId", wireType)
			}
			m.LatestCancelRequestedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestCancelRequestedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledEventId", wireType)
			}
			m.ScheduledEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduledEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedEventId", wireType)
			}
			m.StartedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimerStartedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimerStartedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimerStartedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartToFireTimeoutSeconds", wireType)
			}
			m.StartToFireTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartToFireTimeoutSeconds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionTaskCompletedEventId", wireType)
			}
			m.DecisionTaskCompletedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecisionTaskCompletedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimerFiredEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimerFiredEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimerFiredEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedEventId", wireType)
			}
			m.StartedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimerCanceledEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimerCanceledEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimerCanceledEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedEventId", wireType)
			}
			m.StartedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionTaskCompletedEventId", wireType)
			}
			m.DecisionTaskCompletedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecisionTaskCompletedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelTimerFailedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelTimerFailedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelTimerFailedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cause", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cause = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionTaskCompletedEventId", wireType)
			}
			m.DecisionTaskCompletedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecisionTaskCompletedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkflowExecutionCancelRequestedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowExecutionCancelRequestedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowExecutionCancelRequestedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cause", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cause = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalInitiatedEventId", wireType)
			}
			m.ExternalInitiatedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExternalInitiatedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalWorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExternalWorkflowExecution == nil {
				m.ExternalWorkflowExecution = &execution.WorkflowExecution{}
			}
			if err := m.ExternalWorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkflowExecutionCanceledEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowExecutionCanceledEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowExecutionCanceledEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionTaskCompletedEventId", wireType)
			}
			m.DecisionTaskCompletedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecisionTaskCompletedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &common.Payload{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarkerRecordedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarkerRecordedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarkerRecordedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarkerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarkerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &common.Payload{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionTaskCompletedEventId", wireType)
			}
			m.DecisionTaskCompletedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecisionTaskCompletedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkflowExecutionSignaledEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowExecutionSignaledEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowExecutionSignaledEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignalName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Input == nil {
				m.Input = &common.Payload{}
			}
			if err := m.Input.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkflowExecutionTerminatedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowExecutionTerminatedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowExecutionTerminatedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &common.Payload{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestCancelExternalWorkflowExecutionInitiatedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestCancelExternalWorkflowExecutionInitiatedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionTaskCompletedEventId", wireType)
			}
			m.DecisionTaskCompletedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecisionTaskCompletedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &execution.WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Control", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Control = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildWorkflowOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChildWorkflowOnly = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestCancelExternalWorkflowExecutionFailedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestCancelExternalWorkflowExecutionFailedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestCancelExternalWorkflowExecutionFailedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cause", wireType)
			}
			m.Cause = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cause |= WorkflowExecutionFailedCause(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionTaskCompletedEventId", wireType)
			}
			m.DecisionTaskCompletedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecisionTaskCompletedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &execution.WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatedEventId", wireType)
			}
			m.InitiatedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitiatedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Control", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Control = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExternalWorkflowExecutionCancelRequestedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExternalWorkflowExecutionCancelRequestedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExternalWorkflowExecutionCancelRequestedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatedEventId", wireType)
			}
			m.InitiatedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitiatedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &execution.WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignalExternalWorkflowExecutionInitiatedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignalExternalWorkflowExecutionInitiatedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignalExternalWorkflowExecutionInitiatedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionTaskCompletedEventId", wireType)
			}
			m.DecisionTaskCompletedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecisionTaskCompletedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &execution.WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignalName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Input == nil {
				m.Input = &common.Payload{}
			}
			if err := m.Input.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Control", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Control = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildWorkflowOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChildWorkflowOnly = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignalExternalWorkflowExecutionFailedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignalExternalWorkflowExecutionFailedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignalExternalWorkflowExecutionFailedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cause", wireType)
			}
			m.Cause = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cause |= WorkflowExecutionFailedCause(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionTaskCompletedEventId", wireType)
			}
			m.DecisionTaskCompletedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecisionTaskCompletedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &execution.WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatedEventId", wireType)
			}
			m.InitiatedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitiatedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Control", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Control = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExternalWorkflowExecutionSignaledEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExternalWorkflowExecutionSignaledEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExternalWorkflowExecutionSignaledEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatedEventId", wireType)
			}
			m.InitiatedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitiatedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &execution.WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Control", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Control = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertWorkflowSearchAttributesEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertWorkflowSearchAttributesEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertWorkflowSearchAttributesEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionTaskCompletedEventId", wireType)
			}
			m.DecisionTaskCompletedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecisionTaskCompletedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SearchAttributes == nil {
				m.SearchAttributes = &common.SearchAttributes{}
			}
			if err := m.SearchAttributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartChildWorkflowExecutionInitiatedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartChildWorkflowExecutionInitiatedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartChildWorkflowExecutionInitiatedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowType == nil {
				m.WorkflowType = &common.WorkflowType{}
			}
			if err := m.WorkflowType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskList == nil {
				m.TaskList = &tasklist.TaskList{}
			}
			if err := m.TaskList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Input == nil {
				m.Input = &common.Payload{}
			}
			if err := m.Input.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionStartToCloseTimeoutSeconds", wireType)
			}
			m.ExecutionStartToCloseTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecutionStartToCloseTimeoutSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskStartToCloseTimeoutSeconds", wireType)
			}
			m.TaskStartToCloseTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskStartToCloseTimeoutSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentClosePolicy", wireType)
			}
			m.ParentClosePolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentClosePolicy |= common.ParentClosePolicy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Control", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Control = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionTaskCompletedEventId", wireType)
			}
			m.DecisionTaskCompletedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecisionTaskCompletedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowIdReusePolicy", wireType)
			}
			m.WorkflowIdReusePolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkflowIdReusePolicy |= common.WorkflowIdReusePolicy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RetryPolicy == nil {
				m.RetryPolicy = &common.RetryPolicy{}
			}
			if err := m.RetryPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CronSchedule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CronSchedule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Memo == nil {
				m.Memo = &common.Memo{}
			}
			if err := m.Memo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SearchAttributes == nil {
				m.SearchAttributes = &common.SearchAttributes{}
			}
			if err := m.SearchAttributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartChildWorkflowExecutionFailedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartChildWorkflowExecutionFailedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartChildWorkflowExecutionFailedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowType == nil {
				m.WorkflowType = &common.WorkflowType{}
			}
			if err := m.WorkflowType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cause", wireType)
			}
			m.Cause = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cause |= WorkflowExecutionFailedCause(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Control", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Control = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatedEventId", wireType)
			}
			m.InitiatedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitiatedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionTaskCompletedEventId", wireType)
			}
			m.DecisionTaskCompletedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecisionTaskCompletedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChildWorkflowExecutionStartedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChildWorkflowExecutionStartedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChildWorkflowExecutionStartedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatedEventId", wireType)
			}
			m.InitiatedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitiatedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &execution.WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowType == nil {
				m.WorkflowType = &common.WorkflowType{}
			}
			if err := m.WorkflowType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChildWorkflowExecutionCompletedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChildWorkflowExecutionCompletedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChildWorkflowExecutionCompletedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &common.Payload{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &execution.WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowType == nil {
				m.WorkflowType = &common.WorkflowType{}
			}
			if err := m.WorkflowType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatedEventId", wireType)
			}
			m.InitiatedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitiatedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedEventId", wireType)
			}
			m.StartedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChildWorkflowExecutionFailedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChildWorkflowExecutionFailedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChildWorkflowExecutionFailedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &common.Payload{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &execution.WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowType == nil {
				m.WorkflowType = &common.WorkflowType{}
			}
			if err := m.WorkflowType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatedEventId", wireType)
			}
			m.InitiatedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitiatedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedEventId", wireType)
			}
			m.StartedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChildWorkflowExecutionCanceledEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChildWorkflowExecutionCanceledEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChildWorkflowExecutionCanceledEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &common.Payload{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &execution.WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowType == nil {
				m.WorkflowType = &common.WorkflowType{}
			}
			if err := m.WorkflowType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatedEventId", wireType)
			}
			m.InitiatedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitiatedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedEventId", wireType)
			}
			m.StartedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChildWorkflowExecutionTimedOutEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChildWorkflowExecutionTimedOutEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChildWorkflowExecutionTimedOutEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutType", wireType)
			}
			m.TimeoutType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutType |= TimeoutType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &execution.WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowType == nil {
				m.WorkflowType = &common.WorkflowType{}
			}
			if err := m.WorkflowType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatedEventId", wireType)
			}
			m.InitiatedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitiatedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedEventId", wireType)
			}
			m.StartedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChildWorkflowExecutionTerminatedEventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChildWorkflowExecutionTerminatedEventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChildWorkflowExecutionTerminatedEventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &execution.WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowType == nil {
				m.WorkflowType = &common.WorkflowType{}
			}
			if err := m.WorkflowType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatedEventId", wireType)
			}
			m.InitiatedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitiatedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedEventId", wireType)
			}
			m.StartedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HistoryEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HistoryEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HistoryEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= EventType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecutionStartedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WorkflowExecutionStartedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_WorkflowExecutionStartedEventAttributes{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecutionCompletedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WorkflowExecutionCompletedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_WorkflowExecutionCompletedEventAttributes{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecutionFailedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WorkflowExecutionFailedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_WorkflowExecutionFailedEventAttributes{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecutionTimedOutEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WorkflowExecutionTimedOutEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_WorkflowExecutionTimedOutEventAttributes{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionTaskScheduledEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DecisionTaskScheduledEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_DecisionTaskScheduledEventAttributes{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionTaskStartedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DecisionTaskStartedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_DecisionTaskStartedEventAttributes{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionTaskCompletedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DecisionTaskCompletedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_DecisionTaskCompletedEventAttributes{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionTaskTimedOutEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DecisionTaskTimedOutEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_DecisionTaskTimedOutEventAttributes{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionTaskFailedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DecisionTaskFailedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_DecisionTaskFailedEventAttributes{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityTaskScheduledEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActivityTaskScheduledEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_ActivityTaskScheduledEventAttributes{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityTaskStartedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActivityTaskStartedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_ActivityTaskStartedEventAttributes{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityTaskCompletedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActivityTaskCompletedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_ActivityTaskCompletedEventAttributes{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityTaskFailedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActivityTaskFailedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_ActivityTaskFailedEventAttributes{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityTaskTimedOutEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActivityTaskTimedOutEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_ActivityTaskTimedOutEventAttributes{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimerStartedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TimerStartedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_TimerStartedEventAttributes{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimerFiredEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TimerFiredEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_TimerFiredEventAttributes{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityTaskCancelRequestedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActivityTaskCancelRequestedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_ActivityTaskCancelRequestedEventAttributes{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestCancelActivityTaskFailedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestCancelActivityTaskFailedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_RequestCancelActivityTaskFailedEventAttributes{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityTaskCanceledEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActivityTaskCanceledEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_ActivityTaskCanceledEventAttributes{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimerCanceledEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TimerCanceledEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_TimerCanceledEventAttributes{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelTimerFailedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CancelTimerFailedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_CancelTimerFailedEventAttributes{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarkerRecordedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MarkerRecordedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_MarkerRecordedEventAttributes{v}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecutionSignaledEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WorkflowExecutionSignaledEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_WorkflowExecutionSignaledEventAttributes{v}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecutionTerminatedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WorkflowExecutionTerminatedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_WorkflowExecutionTerminatedEventAttributes{v}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecutionCancelRequestedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WorkflowExecutionCancelRequestedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_WorkflowExecutionCancelRequestedEventAttributes{v}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecutionCanceledEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WorkflowExecutionCanceledEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_WorkflowExecutionCanceledEventAttributes{v}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestCancelExternalWorkflowExecutionInitiatedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestCancelExternalWorkflowExecutionInitiatedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_RequestCancelExternalWorkflowExecutionInitiatedEventAttributes{v}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestCancelExternalWorkflowExecutionFailedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestCancelExternalWorkflowExecutionFailedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_RequestCancelExternalWorkflowExecutionFailedEventAttributes{v}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalWorkflowExecutionCancelRequestedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ExternalWorkflowExecutionCancelRequestedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_ExternalWorkflowExecutionCancelRequestedEventAttributes{v}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecutionContinuedAsNewEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WorkflowExecutionContinuedAsNewEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_WorkflowExecutionContinuedAsNewEventAttributes{v}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartChildWorkflowExecutionInitiatedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StartChildWorkflowExecutionInitiatedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_StartChildWorkflowExecutionInitiatedEventAttributes{v}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartChildWorkflowExecutionFailedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StartChildWorkflowExecutionFailedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_StartChildWorkflowExecutionFailedEventAttributes{v}
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildWorkflowExecutionStartedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChildWorkflowExecutionStartedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_ChildWorkflowExecutionStartedEventAttributes{v}
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildWorkflowExecutionCompletedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChildWorkflowExecutionCompletedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_ChildWorkflowExecutionCompletedEventAttributes{v}
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildWorkflowExecutionFailedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChildWorkflowExecutionFailedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_ChildWorkflowExecutionFailedEventAttributes{v}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildWorkflowExecutionCanceledEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChildWorkflowExecutionCanceledEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_ChildWorkflowExecutionCanceledEventAttributes{v}
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildWorkflowExecutionTimedOutEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChildWorkflowExecutionTimedOutEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_ChildWorkflowExecutionTimedOutEventAttributes{v}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildWorkflowExecutionTerminatedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChildWorkflowExecutionTerminatedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_ChildWorkflowExecutionTerminatedEventAttributes{v}
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalExternalWorkflowExecutionInitiatedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SignalExternalWorkflowExecutionInitiatedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_SignalExternalWorkflowExecutionInitiatedEventAttributes{v}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalExternalWorkflowExecutionFailedEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SignalExternalWorkflowExecutionFailedEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_SignalExternalWorkflowExecutionFailedEventAttributes{v}
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalWorkflowExecutionSignaledEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ExternalWorkflowExecutionSignaledEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_ExternalWorkflowExecutionSignaledEventAttributes{v}
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpsertWorkflowSearchAttributesEventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpsertWorkflowSearchAttributesEventAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &HistoryEvent_UpsertWorkflowSearchAttributesEventAttributes{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *History) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: History: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: History: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &HistoryEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)

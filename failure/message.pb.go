// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: failure/message.proto

package failure

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	common "go.temporal.io/temporal-proto/common"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ApplicationFailureInfo struct {
	Type         string           `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	NonRetryable bool             `protobuf:"varint,2,opt,name=nonRetryable,proto3" json:"nonRetryable,omitempty"`
	Details      *common.Payloads `protobuf:"bytes,3,opt,name=details,proto3" json:"details,omitempty"`
}

func (m *ApplicationFailureInfo) Reset()         { *m = ApplicationFailureInfo{} }
func (m *ApplicationFailureInfo) String() string { return proto.CompactTextString(m) }
func (*ApplicationFailureInfo) ProtoMessage()    {}
func (*ApplicationFailureInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a6d6035a0763f36, []int{0}
}
func (m *ApplicationFailureInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationFailureInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationFailureInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationFailureInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationFailureInfo.Merge(m, src)
}
func (m *ApplicationFailureInfo) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationFailureInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationFailureInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationFailureInfo proto.InternalMessageInfo

func (m *ApplicationFailureInfo) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ApplicationFailureInfo) GetNonRetryable() bool {
	if m != nil {
		return m.NonRetryable
	}
	return false
}

func (m *ApplicationFailureInfo) GetDetails() *common.Payloads {
	if m != nil {
		return m.Details
	}
	return nil
}

type TimeoutFailureInfo struct {
	TimeoutType          common.TimeoutType `protobuf:"varint,1,opt,name=timeoutType,proto3,enum=common.TimeoutType" json:"timeoutType,omitempty"`
	LastHeartbeatDetails *common.Payloads   `protobuf:"bytes,2,opt,name=lastHeartbeatDetails,proto3" json:"lastHeartbeatDetails,omitempty"`
	LastFailure          *Failure           `protobuf:"bytes,3,opt,name=lastFailure,proto3" json:"lastFailure,omitempty"`
}

func (m *TimeoutFailureInfo) Reset()         { *m = TimeoutFailureInfo{} }
func (m *TimeoutFailureInfo) String() string { return proto.CompactTextString(m) }
func (*TimeoutFailureInfo) ProtoMessage()    {}
func (*TimeoutFailureInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a6d6035a0763f36, []int{1}
}
func (m *TimeoutFailureInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimeoutFailureInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimeoutFailureInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimeoutFailureInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeoutFailureInfo.Merge(m, src)
}
func (m *TimeoutFailureInfo) XXX_Size() int {
	return m.Size()
}
func (m *TimeoutFailureInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeoutFailureInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TimeoutFailureInfo proto.InternalMessageInfo

func (m *TimeoutFailureInfo) GetTimeoutType() common.TimeoutType {
	if m != nil {
		return m.TimeoutType
	}
	return common.TimeoutType_StartToClose
}

func (m *TimeoutFailureInfo) GetLastHeartbeatDetails() *common.Payloads {
	if m != nil {
		return m.LastHeartbeatDetails
	}
	return nil
}

func (m *TimeoutFailureInfo) GetLastFailure() *Failure {
	if m != nil {
		return m.LastFailure
	}
	return nil
}

type CanceledFailureInfo struct {
	Details *common.Payloads `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (m *CanceledFailureInfo) Reset()         { *m = CanceledFailureInfo{} }
func (m *CanceledFailureInfo) String() string { return proto.CompactTextString(m) }
func (*CanceledFailureInfo) ProtoMessage()    {}
func (*CanceledFailureInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a6d6035a0763f36, []int{2}
}
func (m *CanceledFailureInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CanceledFailureInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CanceledFailureInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CanceledFailureInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CanceledFailureInfo.Merge(m, src)
}
func (m *CanceledFailureInfo) XXX_Size() int {
	return m.Size()
}
func (m *CanceledFailureInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CanceledFailureInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CanceledFailureInfo proto.InternalMessageInfo

func (m *CanceledFailureInfo) GetDetails() *common.Payloads {
	if m != nil {
		return m.Details
	}
	return nil
}

type TerminatedFailureInfo struct {
}

func (m *TerminatedFailureInfo) Reset()         { *m = TerminatedFailureInfo{} }
func (m *TerminatedFailureInfo) String() string { return proto.CompactTextString(m) }
func (*TerminatedFailureInfo) ProtoMessage()    {}
func (*TerminatedFailureInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a6d6035a0763f36, []int{3}
}
func (m *TerminatedFailureInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TerminatedFailureInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TerminatedFailureInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TerminatedFailureInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TerminatedFailureInfo.Merge(m, src)
}
func (m *TerminatedFailureInfo) XXX_Size() int {
	return m.Size()
}
func (m *TerminatedFailureInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TerminatedFailureInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TerminatedFailureInfo proto.InternalMessageInfo

type ServerFailureInfo struct {
	NonRetryable bool `protobuf:"varint,1,opt,name=nonRetryable,proto3" json:"nonRetryable,omitempty"`
}

func (m *ServerFailureInfo) Reset()         { *m = ServerFailureInfo{} }
func (m *ServerFailureInfo) String() string { return proto.CompactTextString(m) }
func (*ServerFailureInfo) ProtoMessage()    {}
func (*ServerFailureInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a6d6035a0763f36, []int{4}
}
func (m *ServerFailureInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServerFailureInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServerFailureInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServerFailureInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerFailureInfo.Merge(m, src)
}
func (m *ServerFailureInfo) XXX_Size() int {
	return m.Size()
}
func (m *ServerFailureInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerFailureInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ServerFailureInfo proto.InternalMessageInfo

func (m *ServerFailureInfo) GetNonRetryable() bool {
	if m != nil {
		return m.NonRetryable
	}
	return false
}

type ResetWorkflowFailureInfo struct {
	LastHeartbeatDetails *common.Payloads `protobuf:"bytes,1,opt,name=lastHeartbeatDetails,proto3" json:"lastHeartbeatDetails,omitempty"`
}

func (m *ResetWorkflowFailureInfo) Reset()         { *m = ResetWorkflowFailureInfo{} }
func (m *ResetWorkflowFailureInfo) String() string { return proto.CompactTextString(m) }
func (*ResetWorkflowFailureInfo) ProtoMessage()    {}
func (*ResetWorkflowFailureInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a6d6035a0763f36, []int{5}
}
func (m *ResetWorkflowFailureInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResetWorkflowFailureInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResetWorkflowFailureInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResetWorkflowFailureInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResetWorkflowFailureInfo.Merge(m, src)
}
func (m *ResetWorkflowFailureInfo) XXX_Size() int {
	return m.Size()
}
func (m *ResetWorkflowFailureInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ResetWorkflowFailureInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ResetWorkflowFailureInfo proto.InternalMessageInfo

func (m *ResetWorkflowFailureInfo) GetLastHeartbeatDetails() *common.Payloads {
	if m != nil {
		return m.LastHeartbeatDetails
	}
	return nil
}

type ActivityTaskFailureInfo struct {
	ScheduledEventId int64                `protobuf:"varint,1,opt,name=scheduledEventId,proto3" json:"scheduledEventId,omitempty"`
	StartedEventId   int64                `protobuf:"varint,2,opt,name=startedEventId,proto3" json:"startedEventId,omitempty"`
	Identity         string               `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	ActivityType     *common.ActivityType `protobuf:"bytes,4,opt,name=activityType,proto3" json:"activityType,omitempty"`
	ActivityId       string               `protobuf:"bytes,5,opt,name=activityId,proto3" json:"activityId,omitempty"`
}

func (m *ActivityTaskFailureInfo) Reset()         { *m = ActivityTaskFailureInfo{} }
func (m *ActivityTaskFailureInfo) String() string { return proto.CompactTextString(m) }
func (*ActivityTaskFailureInfo) ProtoMessage()    {}
func (*ActivityTaskFailureInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a6d6035a0763f36, []int{6}
}
func (m *ActivityTaskFailureInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivityTaskFailureInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivityTaskFailureInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivityTaskFailureInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityTaskFailureInfo.Merge(m, src)
}
func (m *ActivityTaskFailureInfo) XXX_Size() int {
	return m.Size()
}
func (m *ActivityTaskFailureInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityTaskFailureInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityTaskFailureInfo proto.InternalMessageInfo

func (m *ActivityTaskFailureInfo) GetScheduledEventId() int64 {
	if m != nil {
		return m.ScheduledEventId
	}
	return 0
}

func (m *ActivityTaskFailureInfo) GetStartedEventId() int64 {
	if m != nil {
		return m.StartedEventId
	}
	return 0
}

func (m *ActivityTaskFailureInfo) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *ActivityTaskFailureInfo) GetActivityType() *common.ActivityType {
	if m != nil {
		return m.ActivityType
	}
	return nil
}

func (m *ActivityTaskFailureInfo) GetActivityId() string {
	if m != nil {
		return m.ActivityId
	}
	return ""
}

type ChildWorkflowExecutionFailureInfo struct {
	Namespace         string                    `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkflowExecution *common.WorkflowExecution `protobuf:"bytes,2,opt,name=workflowExecution,proto3" json:"workflowExecution,omitempty"`
	WorkflowType      *common.WorkflowType      `protobuf:"bytes,3,opt,name=workflowType,proto3" json:"workflowType,omitempty"`
	InitiatedEventId  int64                     `protobuf:"varint,4,opt,name=initiatedEventId,proto3" json:"initiatedEventId,omitempty"`
	StartedEventId    int64                     `protobuf:"varint,5,opt,name=startedEventId,proto3" json:"startedEventId,omitempty"`
}

func (m *ChildWorkflowExecutionFailureInfo) Reset()         { *m = ChildWorkflowExecutionFailureInfo{} }
func (m *ChildWorkflowExecutionFailureInfo) String() string { return proto.CompactTextString(m) }
func (*ChildWorkflowExecutionFailureInfo) ProtoMessage()    {}
func (*ChildWorkflowExecutionFailureInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a6d6035a0763f36, []int{7}
}
func (m *ChildWorkflowExecutionFailureInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChildWorkflowExecutionFailureInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChildWorkflowExecutionFailureInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChildWorkflowExecutionFailureInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChildWorkflowExecutionFailureInfo.Merge(m, src)
}
func (m *ChildWorkflowExecutionFailureInfo) XXX_Size() int {
	return m.Size()
}
func (m *ChildWorkflowExecutionFailureInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ChildWorkflowExecutionFailureInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ChildWorkflowExecutionFailureInfo proto.InternalMessageInfo

func (m *ChildWorkflowExecutionFailureInfo) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ChildWorkflowExecutionFailureInfo) GetWorkflowExecution() *common.WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *ChildWorkflowExecutionFailureInfo) GetWorkflowType() *common.WorkflowType {
	if m != nil {
		return m.WorkflowType
	}
	return nil
}

func (m *ChildWorkflowExecutionFailureInfo) GetInitiatedEventId() int64 {
	if m != nil {
		return m.InitiatedEventId
	}
	return 0
}

func (m *ChildWorkflowExecutionFailureInfo) GetStartedEventId() int64 {
	if m != nil {
		return m.StartedEventId
	}
	return 0
}

type Failure struct {
	Message    string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Source     string   `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	StackTrace string   `protobuf:"bytes,3,opt,name=stackTrace,proto3" json:"stackTrace,omitempty"`
	Cause      *Failure `protobuf:"bytes,4,opt,name=cause,proto3" json:"cause,omitempty"`
	// Types that are valid to be assigned to FailureInfo:
	//	*Failure_ApplicationFailureInfo
	//	*Failure_TimeoutFailureInfo
	//	*Failure_CanceledFailureInfo
	//	*Failure_TerminatedFailureInfo
	//	*Failure_ServerFailureInfo
	//	*Failure_ResetWorkflowFailureInfo
	//	*Failure_ActivityTaskFailureInfo
	//	*Failure_ChildWorkflowExecutionFailureInfo
	FailureInfo isFailure_FailureInfo `protobuf_oneof:"failureInfo"`
}

func (m *Failure) Reset()         { *m = Failure{} }
func (m *Failure) String() string { return proto.CompactTextString(m) }
func (*Failure) ProtoMessage()    {}
func (*Failure) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a6d6035a0763f36, []int{8}
}
func (m *Failure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Failure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Failure.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Failure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Failure.Merge(m, src)
}
func (m *Failure) XXX_Size() int {
	return m.Size()
}
func (m *Failure) XXX_DiscardUnknown() {
	xxx_messageInfo_Failure.DiscardUnknown(m)
}

var xxx_messageInfo_Failure proto.InternalMessageInfo

type isFailure_FailureInfo interface {
	isFailure_FailureInfo()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Failure_ApplicationFailureInfo struct {
	ApplicationFailureInfo *ApplicationFailureInfo `protobuf:"bytes,5,opt,name=applicationFailureInfo,proto3,oneof" json:"applicationFailureInfo,omitempty"`
}
type Failure_TimeoutFailureInfo struct {
	TimeoutFailureInfo *TimeoutFailureInfo `protobuf:"bytes,6,opt,name=timeoutFailureInfo,proto3,oneof" json:"timeoutFailureInfo,omitempty"`
}
type Failure_CanceledFailureInfo struct {
	CanceledFailureInfo *CanceledFailureInfo `protobuf:"bytes,7,opt,name=canceledFailureInfo,proto3,oneof" json:"canceledFailureInfo,omitempty"`
}
type Failure_TerminatedFailureInfo struct {
	TerminatedFailureInfo *TerminatedFailureInfo `protobuf:"bytes,8,opt,name=terminatedFailureInfo,proto3,oneof" json:"terminatedFailureInfo,omitempty"`
}
type Failure_ServerFailureInfo struct {
	ServerFailureInfo *ServerFailureInfo `protobuf:"bytes,9,opt,name=serverFailureInfo,proto3,oneof" json:"serverFailureInfo,omitempty"`
}
type Failure_ResetWorkflowFailureInfo struct {
	ResetWorkflowFailureInfo *ResetWorkflowFailureInfo `protobuf:"bytes,10,opt,name=resetWorkflowFailureInfo,proto3,oneof" json:"resetWorkflowFailureInfo,omitempty"`
}
type Failure_ActivityTaskFailureInfo struct {
	ActivityTaskFailureInfo *ActivityTaskFailureInfo `protobuf:"bytes,11,opt,name=activityTaskFailureInfo,proto3,oneof" json:"activityTaskFailureInfo,omitempty"`
}
type Failure_ChildWorkflowExecutionFailureInfo struct {
	ChildWorkflowExecutionFailureInfo *ChildWorkflowExecutionFailureInfo `protobuf:"bytes,12,opt,name=childWorkflowExecutionFailureInfo,proto3,oneof" json:"childWorkflowExecutionFailureInfo,omitempty"`
}

func (*Failure_ApplicationFailureInfo) isFailure_FailureInfo()            {}
func (*Failure_TimeoutFailureInfo) isFailure_FailureInfo()                {}
func (*Failure_CanceledFailureInfo) isFailure_FailureInfo()               {}
func (*Failure_TerminatedFailureInfo) isFailure_FailureInfo()             {}
func (*Failure_ServerFailureInfo) isFailure_FailureInfo()                 {}
func (*Failure_ResetWorkflowFailureInfo) isFailure_FailureInfo()          {}
func (*Failure_ActivityTaskFailureInfo) isFailure_FailureInfo()           {}
func (*Failure_ChildWorkflowExecutionFailureInfo) isFailure_FailureInfo() {}

func (m *Failure) GetFailureInfo() isFailure_FailureInfo {
	if m != nil {
		return m.FailureInfo
	}
	return nil
}

func (m *Failure) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Failure) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Failure) GetStackTrace() string {
	if m != nil {
		return m.StackTrace
	}
	return ""
}

func (m *Failure) GetCause() *Failure {
	if m != nil {
		return m.Cause
	}
	return nil
}

func (m *Failure) GetApplicationFailureInfo() *ApplicationFailureInfo {
	if x, ok := m.GetFailureInfo().(*Failure_ApplicationFailureInfo); ok {
		return x.ApplicationFailureInfo
	}
	return nil
}

func (m *Failure) GetTimeoutFailureInfo() *TimeoutFailureInfo {
	if x, ok := m.GetFailureInfo().(*Failure_TimeoutFailureInfo); ok {
		return x.TimeoutFailureInfo
	}
	return nil
}

func (m *Failure) GetCanceledFailureInfo() *CanceledFailureInfo {
	if x, ok := m.GetFailureInfo().(*Failure_CanceledFailureInfo); ok {
		return x.CanceledFailureInfo
	}
	return nil
}

func (m *Failure) GetTerminatedFailureInfo() *TerminatedFailureInfo {
	if x, ok := m.GetFailureInfo().(*Failure_TerminatedFailureInfo); ok {
		return x.TerminatedFailureInfo
	}
	return nil
}

func (m *Failure) GetServerFailureInfo() *ServerFailureInfo {
	if x, ok := m.GetFailureInfo().(*Failure_ServerFailureInfo); ok {
		return x.ServerFailureInfo
	}
	return nil
}

func (m *Failure) GetResetWorkflowFailureInfo() *ResetWorkflowFailureInfo {
	if x, ok := m.GetFailureInfo().(*Failure_ResetWorkflowFailureInfo); ok {
		return x.ResetWorkflowFailureInfo
	}
	return nil
}

func (m *Failure) GetActivityTaskFailureInfo() *ActivityTaskFailureInfo {
	if x, ok := m.GetFailureInfo().(*Failure_ActivityTaskFailureInfo); ok {
		return x.ActivityTaskFailureInfo
	}
	return nil
}

func (m *Failure) GetChildWorkflowExecutionFailureInfo() *ChildWorkflowExecutionFailureInfo {
	if x, ok := m.GetFailureInfo().(*Failure_ChildWorkflowExecutionFailureInfo); ok {
		return x.ChildWorkflowExecutionFailureInfo
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Failure) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Failure_ApplicationFailureInfo)(nil),
		(*Failure_TimeoutFailureInfo)(nil),
		(*Failure_CanceledFailureInfo)(nil),
		(*Failure_TerminatedFailureInfo)(nil),
		(*Failure_ServerFailureInfo)(nil),
		(*Failure_ResetWorkflowFailureInfo)(nil),
		(*Failure_ActivityTaskFailureInfo)(nil),
		(*Failure_ChildWorkflowExecutionFailureInfo)(nil),
	}
}

func init() {
	proto.RegisterType((*ApplicationFailureInfo)(nil), "failure.ApplicationFailureInfo")
	proto.RegisterType((*TimeoutFailureInfo)(nil), "failure.TimeoutFailureInfo")
	proto.RegisterType((*CanceledFailureInfo)(nil), "failure.CanceledFailureInfo")
	proto.RegisterType((*TerminatedFailureInfo)(nil), "failure.TerminatedFailureInfo")
	proto.RegisterType((*ServerFailureInfo)(nil), "failure.ServerFailureInfo")
	proto.RegisterType((*ResetWorkflowFailureInfo)(nil), "failure.ResetWorkflowFailureInfo")
	proto.RegisterType((*ActivityTaskFailureInfo)(nil), "failure.ActivityTaskFailureInfo")
	proto.RegisterType((*ChildWorkflowExecutionFailureInfo)(nil), "failure.ChildWorkflowExecutionFailureInfo")
	proto.RegisterType((*Failure)(nil), "failure.Failure")
}

func init() { proto.RegisterFile("failure/message.proto", fileDescriptor_8a6d6035a0763f36) }

var fileDescriptor_8a6d6035a0763f36 = []byte{
	// 779 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0x5d, 0x6b, 0xd3, 0x50,
	0x18, 0x4e, 0xba, 0xad, 0x5d, 0xdf, 0xce, 0xb1, 0x9e, 0x7d, 0x65, 0x75, 0xc4, 0x2e, 0xe0, 0x18,
	0x03, 0x3b, 0xa8, 0x88, 0xde, 0xd6, 0x6d, 0x9a, 0x09, 0xc2, 0x38, 0x16, 0x87, 0x32, 0xd0, 0xb3,
	0xe4, 0x74, 0x3b, 0x2c, 0xc9, 0x29, 0xc9, 0xe9, 0x66, 0xc5, 0x1f, 0xe1, 0xa5, 0x7f, 0x48, 0xf0,
	0x72, 0x97, 0x5e, 0xca, 0x7a, 0xed, 0x7f, 0x90, 0x9e, 0x24, 0x6d, 0xda, 0x24, 0x14, 0xef, 0x7a,
	0x9e, 0xf7, 0x79, 0x9f, 0xbc, 0x1f, 0xe7, 0x3c, 0x85, 0xf5, 0x0e, 0x61, 0x4e, 0xcf, 0xa7, 0x07,
	0x2e, 0x0d, 0x02, 0x72, 0x49, 0x1b, 0x5d, 0x9f, 0x0b, 0x8e, 0x4a, 0x11, 0x5c, 0x5b, 0xb3, 0xb8,
	0xeb, 0x72, 0x6f, 0x32, 0x5c, 0xab, 0x46, 0x28, 0xf5, 0x7a, 0x6e, 0x08, 0x19, 0xdf, 0x60, 0xa3,
	0xd5, 0xed, 0x3a, 0xcc, 0x22, 0x82, 0x71, 0xef, 0x55, 0x98, 0x7e, 0xe2, 0x75, 0x38, 0x42, 0x30,
	0x2f, 0xfa, 0x5d, 0xaa, 0xa9, 0x75, 0x75, 0xaf, 0x8c, 0xe5, 0x6f, 0x64, 0xc0, 0x92, 0xc7, 0x3d,
	0x4c, 0x85, 0xdf, 0x27, 0x17, 0x0e, 0xd5, 0x0a, 0x75, 0x75, 0x6f, 0x11, 0x4f, 0x60, 0x68, 0x1f,
	0x4a, 0x36, 0x15, 0x84, 0x39, 0x81, 0x36, 0x57, 0x57, 0xf7, 0x2a, 0xcd, 0x95, 0x46, 0xf8, 0xd9,
	0xc6, 0x29, 0xe9, 0x3b, 0x9c, 0xd8, 0x01, 0x8e, 0x09, 0xc6, 0x4f, 0x15, 0x50, 0x9b, 0xb9, 0x94,
	0xf7, 0x44, 0xf2, 0xd3, 0xcf, 0xa0, 0x22, 0x42, 0xb4, 0x1d, 0x57, 0xb0, 0xdc, 0x5c, 0x8d, 0x65,
	0xda, 0xe3, 0x10, 0x4e, 0xf2, 0xd0, 0x11, 0xac, 0x39, 0x24, 0x10, 0x26, 0x25, 0xbe, 0xb8, 0xa0,
	0x44, 0x1c, 0x45, 0x65, 0x14, 0x72, 0xca, 0xc8, 0x64, 0xa3, 0x26, 0x54, 0x86, 0x78, 0x54, 0xcf,
	0xa8, 0x87, 0x68, 0xb2, 0x8d, 0x08, 0xc7, 0x49, 0x92, 0xd1, 0x82, 0xd5, 0x43, 0xe2, 0x59, 0xd4,
	0xa1, 0x76, 0xb2, 0x8f, 0xc4, 0x28, 0xd4, 0x59, 0xa3, 0xd8, 0x84, 0xf5, 0x36, 0xf5, 0x5d, 0xe6,
	0x11, 0x31, 0x21, 0x62, 0x3c, 0x87, 0xea, 0x3b, 0xea, 0xdf, 0x50, 0x3f, 0xa9, 0x3c, 0xbd, 0x08,
	0x35, 0xbd, 0x08, 0xe3, 0x33, 0x68, 0x98, 0x06, 0x54, 0x9c, 0x71, 0xff, 0xba, 0xe3, 0xf0, 0xdb,
	0x64, 0x7e, 0xde, 0xa8, 0xd4, 0xff, 0x19, 0x95, 0x31, 0x50, 0x61, 0xb3, 0x65, 0x09, 0x76, 0xc3,
	0x44, 0xbf, 0x4d, 0x82, 0xeb, 0xc9, 0xde, 0x57, 0x02, 0xeb, 0x8a, 0xda, 0x3d, 0x87, 0xda, 0xc7,
	0x37, 0xd4, 0x13, 0x27, 0xb6, 0x54, 0x9f, 0xc3, 0x29, 0x1c, 0xed, 0xc2, 0x72, 0x20, 0x88, 0x2f,
	0xc6, 0xcc, 0x82, 0x64, 0x4e, 0xa1, 0xa8, 0x06, 0x8b, 0xcc, 0xa6, 0x9e, 0x60, 0xa2, 0x2f, 0xf7,
	0x52, 0xc6, 0xa3, 0x33, 0x7a, 0x01, 0x4b, 0x24, 0x2e, 0x65, 0x78, 0x69, 0xe6, 0x65, 0x27, 0x6b,
	0x71, 0x27, 0xad, 0x44, 0x0c, 0x4f, 0x30, 0x91, 0x0e, 0x10, 0x9f, 0x4f, 0x6c, 0x6d, 0x41, 0xea,
	0x26, 0x10, 0xe3, 0x47, 0x01, 0x76, 0x0e, 0xaf, 0x98, 0x63, 0xc7, 0x83, 0x3c, 0xfe, 0x42, 0xad,
	0xde, 0xf4, 0x73, 0xd9, 0x86, 0xb2, 0x47, 0x5c, 0x1a, 0x74, 0x89, 0x15, 0xbf, 0x99, 0x31, 0x80,
	0x5e, 0x43, 0xf5, 0x76, 0x3a, 0x3b, 0xba, 0x97, 0x5b, 0x71, 0x89, 0x29, 0x79, 0x9c, 0xce, 0x19,
	0xb6, 0x19, 0x83, 0xb2, 0xcd, 0xb9, 0xc9, 0x36, 0xcf, 0x12, 0x31, 0x3c, 0xc1, 0x1c, 0x2e, 0x84,
	0x79, 0x4c, 0x30, 0x92, 0x18, 0xf3, 0x7c, 0xb8, 0x90, 0x69, 0x3c, 0x63, 0x21, 0x0b, 0x59, 0x0b,
	0x31, 0xfe, 0x16, 0xa1, 0x14, 0x0d, 0x01, 0x69, 0x50, 0x8a, 0xdc, 0x26, 0x6a, 0x3f, 0x3e, 0xa2,
	0x0d, 0x28, 0x06, 0xbc, 0xe7, 0x5b, 0xa1, 0x5f, 0x94, 0x71, 0x74, 0x1a, 0x0e, 0x3e, 0x10, 0xc4,
	0xba, 0x6e, 0xfb, 0xc3, 0x99, 0x85, 0x0b, 0x4d, 0x20, 0x68, 0x17, 0x16, 0x2c, 0xd2, 0x0b, 0xe2,
	0x5d, 0xa6, 0xdf, 0x60, 0x18, 0x46, 0x1f, 0x60, 0x83, 0x64, 0x7a, 0x98, 0xac, 0xba, 0xd2, 0x7c,
	0x34, 0x4a, 0xcc, 0xb6, 0x3a, 0x53, 0xc1, 0x39, 0x02, 0xe8, 0x2d, 0x20, 0x91, 0xf2, 0x27, 0xad,
	0x28, 0x65, 0x1f, 0x8e, 0x64, 0xd3, 0x16, 0x66, 0x2a, 0x38, 0x23, 0x11, 0x9d, 0xc2, 0xaa, 0x95,
	0xf6, 0x09, 0xad, 0x24, 0xf5, 0xb6, 0x47, 0x7a, 0x19, 0x5e, 0x62, 0x2a, 0x38, 0x2b, 0x15, 0xbd,
	0x87, 0x75, 0x91, 0x65, 0x1b, 0xda, 0xa2, 0xd4, 0xd4, 0xc7, 0x35, 0x66, 0xb1, 0x4c, 0x05, 0x67,
	0xa7, 0xa3, 0x37, 0x50, 0x0d, 0xa6, 0x5d, 0x47, 0x2b, 0x4b, 0xcd, 0xda, 0x48, 0x33, 0xe5, 0x4b,
	0xa6, 0x82, 0xd3, 0x69, 0xe8, 0x13, 0x68, 0x7e, 0x8e, 0x11, 0x69, 0x20, 0x25, 0x77, 0x46, 0x92,
	0x79, 0x8e, 0x65, 0x2a, 0x38, 0x57, 0x04, 0x9d, 0xc3, 0x26, 0xc9, 0xb6, 0x21, 0xad, 0x22, 0xf5,
	0xeb, 0xe3, 0x1b, 0x90, 0xcd, 0x33, 0x15, 0x9c, 0x27, 0x81, 0xbe, 0xc2, 0x8e, 0x35, 0xeb, 0xf9,
	0x6b, 0x4b, 0xf2, 0x3b, 0xfb, 0xe3, 0x15, 0xce, 0xca, 0x30, 0x15, 0x3c, 0x5b, 0xf6, 0xe5, 0x03,
	0xa8, 0x74, 0x12, 0xc7, 0xf3, 0x5f, 0xf7, 0xba, 0x7a, 0x77, 0xaf, 0xab, 0x7f, 0xee, 0x75, 0xf5,
	0xfb, 0x40, 0x57, 0xee, 0x06, 0xba, 0xf2, 0x7b, 0xa0, 0x2b, 0xb0, 0xc5, 0x78, 0x43, 0x50, 0xb7,
	0xcb, 0x7d, 0xe2, 0x84, 0x7f, 0xed, 0x71, 0x29, 0xa7, 0xea, 0xc7, 0xc7, 0x97, 0x89, 0x20, 0xe3,
	0x07, 0xf1, 0xef, 0x27, 0x92, 0x78, 0x10, 0x11, 0x2f, 0x8a, 0xf2, 0xf8, 0xf4, 0x5f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xda, 0x3e, 0x64, 0x6d, 0x5d, 0x08, 0x00, 0x00,
}

func (m *ApplicationFailureInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationFailureInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationFailureInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Details != nil {
		{
			size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.NonRetryable {
		i--
		if m.NonRetryable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TimeoutFailureInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeoutFailureInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimeoutFailureInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastFailure != nil {
		{
			size, err := m.LastFailure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.LastHeartbeatDetails != nil {
		{
			size, err := m.LastHeartbeatDetails.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TimeoutType != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.TimeoutType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CanceledFailureInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CanceledFailureInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CanceledFailureInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Details != nil {
		{
			size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TerminatedFailureInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TerminatedFailureInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TerminatedFailureInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ServerFailureInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerFailureInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServerFailureInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NonRetryable {
		i--
		if m.NonRetryable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResetWorkflowFailureInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResetWorkflowFailureInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResetWorkflowFailureInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastHeartbeatDetails != nil {
		{
			size, err := m.LastHeartbeatDetails.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActivityTaskFailureInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityTaskFailureInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityTaskFailureInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ActivityId) > 0 {
		i -= len(m.ActivityId)
		copy(dAtA[i:], m.ActivityId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ActivityId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ActivityType != nil {
		{
			size, err := m.ActivityType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x1a
	}
	if m.StartedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartedEventId))
		i--
		dAtA[i] = 0x10
	}
	if m.ScheduledEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ScheduledEventId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChildWorkflowExecutionFailureInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChildWorkflowExecutionFailureInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChildWorkflowExecutionFailureInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StartedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartedEventId))
		i--
		dAtA[i] = 0x28
	}
	if m.InitiatedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.InitiatedEventId))
		i--
		dAtA[i] = 0x20
	}
	if m.WorkflowType != nil {
		{
			size, err := m.WorkflowType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Failure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Failure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Failure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FailureInfo != nil {
		{
			size := m.FailureInfo.Size()
			i -= size
			if _, err := m.FailureInfo.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Cause != nil {
		{
			size, err := m.Cause.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.StackTrace) > 0 {
		i -= len(m.StackTrace)
		copy(dAtA[i:], m.StackTrace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.StackTrace)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Failure_ApplicationFailureInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Failure_ApplicationFailureInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApplicationFailureInfo != nil {
		{
			size, err := m.ApplicationFailureInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Failure_TimeoutFailureInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Failure_TimeoutFailureInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TimeoutFailureInfo != nil {
		{
			size, err := m.TimeoutFailureInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *Failure_CanceledFailureInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Failure_CanceledFailureInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CanceledFailureInfo != nil {
		{
			size, err := m.CanceledFailureInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *Failure_TerminatedFailureInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Failure_TerminatedFailureInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TerminatedFailureInfo != nil {
		{
			size, err := m.TerminatedFailureInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *Failure_ServerFailureInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Failure_ServerFailureInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ServerFailureInfo != nil {
		{
			size, err := m.ServerFailureInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *Failure_ResetWorkflowFailureInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Failure_ResetWorkflowFailureInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ResetWorkflowFailureInfo != nil {
		{
			size, err := m.ResetWorkflowFailureInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *Failure_ActivityTaskFailureInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Failure_ActivityTaskFailureInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActivityTaskFailureInfo != nil {
		{
			size, err := m.ActivityTaskFailureInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *Failure_ChildWorkflowExecutionFailureInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Failure_ChildWorkflowExecutionFailureInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChildWorkflowExecutionFailureInfo != nil {
		{
			size, err := m.ChildWorkflowExecutionFailureInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ApplicationFailureInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.NonRetryable {
		n += 2
	}
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *TimeoutFailureInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimeoutType != 0 {
		n += 1 + sovMessage(uint64(m.TimeoutType))
	}
	if m.LastHeartbeatDetails != nil {
		l = m.LastHeartbeatDetails.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.LastFailure != nil {
		l = m.LastFailure.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *CanceledFailureInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *TerminatedFailureInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ServerFailureInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NonRetryable {
		n += 2
	}
	return n
}

func (m *ResetWorkflowFailureInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastHeartbeatDetails != nil {
		l = m.LastHeartbeatDetails.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *ActivityTaskFailureInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScheduledEventId != 0 {
		n += 1 + sovMessage(uint64(m.ScheduledEventId))
	}
	if m.StartedEventId != 0 {
		n += 1 + sovMessage(uint64(m.StartedEventId))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ActivityType != nil {
		l = m.ActivityType.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.ActivityId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *ChildWorkflowExecutionFailureInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowType != nil {
		l = m.WorkflowType.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.InitiatedEventId != 0 {
		n += 1 + sovMessage(uint64(m.InitiatedEventId))
	}
	if m.StartedEventId != 0 {
		n += 1 + sovMessage(uint64(m.StartedEventId))
	}
	return n
}

func (m *Failure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.StackTrace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Cause != nil {
		l = m.Cause.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.FailureInfo != nil {
		n += m.FailureInfo.Size()
	}
	return n
}

func (m *Failure_ApplicationFailureInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApplicationFailureInfo != nil {
		l = m.ApplicationFailureInfo.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Failure_TimeoutFailureInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimeoutFailureInfo != nil {
		l = m.TimeoutFailureInfo.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Failure_CanceledFailureInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CanceledFailureInfo != nil {
		l = m.CanceledFailureInfo.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Failure_TerminatedFailureInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TerminatedFailureInfo != nil {
		l = m.TerminatedFailureInfo.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Failure_ServerFailureInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServerFailureInfo != nil {
		l = m.ServerFailureInfo.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Failure_ResetWorkflowFailureInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResetWorkflowFailureInfo != nil {
		l = m.ResetWorkflowFailureInfo.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Failure_ActivityTaskFailureInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityTaskFailureInfo != nil {
		l = m.ActivityTaskFailureInfo.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Failure_ChildWorkflowExecutionFailureInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChildWorkflowExecutionFailureInfo != nil {
		l = m.ChildWorkflowExecutionFailureInfo.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ApplicationFailureInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationFailureInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationFailureInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonRetryable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NonRetryable = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &common.Payloads{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimeoutFailureInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeoutFailureInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeoutFailureInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutType", wireType)
			}
			m.TimeoutType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutType |= common.TimeoutType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeartbeatDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastHeartbeatDetails == nil {
				m.LastHeartbeatDetails = &common.Payloads{}
			}
			if err := m.LastHeartbeatDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastFailure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastFailure == nil {
				m.LastFailure = &Failure{}
			}
			if err := m.LastFailure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CanceledFailureInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CanceledFailureInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CanceledFailureInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &common.Payloads{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TerminatedFailureInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TerminatedFailureInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TerminatedFailureInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerFailureInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerFailureInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerFailureInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonRetryable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NonRetryable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResetWorkflowFailureInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResetWorkflowFailureInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResetWorkflowFailureInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeartbeatDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastHeartbeatDetails == nil {
				m.LastHeartbeatDetails = &common.Payloads{}
			}
			if err := m.LastHeartbeatDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivityTaskFailureInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityTaskFailureInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityTaskFailureInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledEventId", wireType)
			}
			m.ScheduledEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduledEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedEventId", wireType)
			}
			m.StartedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActivityType == nil {
				m.ActivityType = &common.ActivityType{}
			}
			if err := m.ActivityType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChildWorkflowExecutionFailureInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChildWorkflowExecutionFailureInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChildWorkflowExecutionFailureInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &common.WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowType == nil {
				m.WorkflowType = &common.WorkflowType{}
			}
			if err := m.WorkflowType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatedEventId", wireType)
			}
			m.InitiatedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitiatedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedEventId", wireType)
			}
			m.StartedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Failure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Failure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Failure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StackTrace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StackTrace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cause", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cause == nil {
				m.Cause = &Failure{}
			}
			if err := m.Cause.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationFailureInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ApplicationFailureInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FailureInfo = &Failure_ApplicationFailureInfo{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutFailureInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TimeoutFailureInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FailureInfo = &Failure_TimeoutFailureInfo{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanceledFailureInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CanceledFailureInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FailureInfo = &Failure_CanceledFailureInfo{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TerminatedFailureInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TerminatedFailureInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FailureInfo = &Failure_TerminatedFailureInfo{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFailureInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServerFailureInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FailureInfo = &Failure_ServerFailureInfo{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResetWorkflowFailureInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResetWorkflowFailureInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FailureInfo = &Failure_ResetWorkflowFailureInfo{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityTaskFailureInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActivityTaskFailureInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FailureInfo = &Failure_ActivityTaskFailureInfo{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildWorkflowExecutionFailureInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChildWorkflowExecutionFailureInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FailureInfo = &Failure_ChildWorkflowExecutionFailureInfo{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)

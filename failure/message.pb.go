// The MIT License (MIT)
//
// Copyright (c) 2020 Temporal Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: failure/message.proto

package failure

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type WorkflowExecutionAlreadyStarted struct {
	StartRequestId string `protobuf:"bytes,1,opt,name=startRequestId,proto3" json:"startRequestId,omitempty"`
	RunId          string `protobuf:"bytes,2,opt,name=runId,proto3" json:"runId,omitempty"`
}

func (m *WorkflowExecutionAlreadyStarted) Reset()         { *m = WorkflowExecutionAlreadyStarted{} }
func (m *WorkflowExecutionAlreadyStarted) String() string { return proto.CompactTextString(m) }
func (*WorkflowExecutionAlreadyStarted) ProtoMessage()    {}
func (*WorkflowExecutionAlreadyStarted) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a6d6035a0763f36, []int{0}
}
func (m *WorkflowExecutionAlreadyStarted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowExecutionAlreadyStarted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowExecutionAlreadyStarted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowExecutionAlreadyStarted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowExecutionAlreadyStarted.Merge(m, src)
}
func (m *WorkflowExecutionAlreadyStarted) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowExecutionAlreadyStarted) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowExecutionAlreadyStarted.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowExecutionAlreadyStarted proto.InternalMessageInfo

func (m *WorkflowExecutionAlreadyStarted) GetStartRequestId() string {
	if m != nil {
		return m.StartRequestId
	}
	return ""
}

func (m *WorkflowExecutionAlreadyStarted) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

type NamespaceNotActive struct {
	Namespace      string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	CurrentCluster string `protobuf:"bytes,2,opt,name=currentCluster,proto3" json:"currentCluster,omitempty"`
	ActiveCluster  string `protobuf:"bytes,3,opt,name=activeCluster,proto3" json:"activeCluster,omitempty"`
}

func (m *NamespaceNotActive) Reset()         { *m = NamespaceNotActive{} }
func (m *NamespaceNotActive) String() string { return proto.CompactTextString(m) }
func (*NamespaceNotActive) ProtoMessage()    {}
func (*NamespaceNotActive) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a6d6035a0763f36, []int{1}
}
func (m *NamespaceNotActive) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NamespaceNotActive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NamespaceNotActive.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NamespaceNotActive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamespaceNotActive.Merge(m, src)
}
func (m *NamespaceNotActive) XXX_Size() int {
	return m.Size()
}
func (m *NamespaceNotActive) XXX_DiscardUnknown() {
	xxx_messageInfo_NamespaceNotActive.DiscardUnknown(m)
}

var xxx_messageInfo_NamespaceNotActive proto.InternalMessageInfo

func (m *NamespaceNotActive) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *NamespaceNotActive) GetCurrentCluster() string {
	if m != nil {
		return m.CurrentCluster
	}
	return ""
}

func (m *NamespaceNotActive) GetActiveCluster() string {
	if m != nil {
		return m.ActiveCluster
	}
	return ""
}

type RetryTask struct {
	NamespaceId string `protobuf:"bytes,1,opt,name=namespaceId,proto3" json:"namespaceId,omitempty"`
	WorkflowId  string `protobuf:"bytes,2,opt,name=workflowId,proto3" json:"workflowId,omitempty"`
	RunId       string `protobuf:"bytes,3,opt,name=runId,proto3" json:"runId,omitempty"`
	NextEventId int64  `protobuf:"varint,4,opt,name=nextEventId,proto3" json:"nextEventId,omitempty"`
}

func (m *RetryTask) Reset()         { *m = RetryTask{} }
func (m *RetryTask) String() string { return proto.CompactTextString(m) }
func (*RetryTask) ProtoMessage()    {}
func (*RetryTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a6d6035a0763f36, []int{2}
}
func (m *RetryTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetryTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetryTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetryTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetryTask.Merge(m, src)
}
func (m *RetryTask) XXX_Size() int {
	return m.Size()
}
func (m *RetryTask) XXX_DiscardUnknown() {
	xxx_messageInfo_RetryTask.DiscardUnknown(m)
}

var xxx_messageInfo_RetryTask proto.InternalMessageInfo

func (m *RetryTask) GetNamespaceId() string {
	if m != nil {
		return m.NamespaceId
	}
	return ""
}

func (m *RetryTask) GetWorkflowId() string {
	if m != nil {
		return m.WorkflowId
	}
	return ""
}

func (m *RetryTask) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

func (m *RetryTask) GetNextEventId() int64 {
	if m != nil {
		return m.NextEventId
	}
	return 0
}

type RetryTaskV2 struct {
	NamespaceId       string `protobuf:"bytes,1,opt,name=namespaceId,proto3" json:"namespaceId,omitempty"`
	WorkflowId        string `protobuf:"bytes,2,opt,name=workflowId,proto3" json:"workflowId,omitempty"`
	RunId             string `protobuf:"bytes,3,opt,name=runId,proto3" json:"runId,omitempty"`
	StartEventId      int64  `protobuf:"varint,4,opt,name=startEventId,proto3" json:"startEventId,omitempty"`
	StartEventVersion int64  `protobuf:"varint,5,opt,name=startEventVersion,proto3" json:"startEventVersion,omitempty"`
	EndEventId        int64  `protobuf:"varint,6,opt,name=endEventId,proto3" json:"endEventId,omitempty"`
	EndEventVersion   int64  `protobuf:"varint,7,opt,name=endEventVersion,proto3" json:"endEventVersion,omitempty"`
}

func (m *RetryTaskV2) Reset()         { *m = RetryTaskV2{} }
func (m *RetryTaskV2) String() string { return proto.CompactTextString(m) }
func (*RetryTaskV2) ProtoMessage()    {}
func (*RetryTaskV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a6d6035a0763f36, []int{3}
}
func (m *RetryTaskV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetryTaskV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetryTaskV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetryTaskV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetryTaskV2.Merge(m, src)
}
func (m *RetryTaskV2) XXX_Size() int {
	return m.Size()
}
func (m *RetryTaskV2) XXX_DiscardUnknown() {
	xxx_messageInfo_RetryTaskV2.DiscardUnknown(m)
}

var xxx_messageInfo_RetryTaskV2 proto.InternalMessageInfo

func (m *RetryTaskV2) GetNamespaceId() string {
	if m != nil {
		return m.NamespaceId
	}
	return ""
}

func (m *RetryTaskV2) GetWorkflowId() string {
	if m != nil {
		return m.WorkflowId
	}
	return ""
}

func (m *RetryTaskV2) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

func (m *RetryTaskV2) GetStartEventId() int64 {
	if m != nil {
		return m.StartEventId
	}
	return 0
}

func (m *RetryTaskV2) GetStartEventVersion() int64 {
	if m != nil {
		return m.StartEventVersion
	}
	return 0
}

func (m *RetryTaskV2) GetEndEventId() int64 {
	if m != nil {
		return m.EndEventId
	}
	return 0
}

func (m *RetryTaskV2) GetEndEventVersion() int64 {
	if m != nil {
		return m.EndEventVersion
	}
	return 0
}

type ClientVersionNotSupported struct {
	ClientVersion     string `protobuf:"bytes,1,opt,name=clientVersion,proto3" json:"clientVersion,omitempty"`
	ClientImpl        string `protobuf:"bytes,2,opt,name=clientImpl,proto3" json:"clientImpl,omitempty"`
	SupportedVersions string `protobuf:"bytes,3,opt,name=supportedVersions,proto3" json:"supportedVersions,omitempty"`
}

func (m *ClientVersionNotSupported) Reset()         { *m = ClientVersionNotSupported{} }
func (m *ClientVersionNotSupported) String() string { return proto.CompactTextString(m) }
func (*ClientVersionNotSupported) ProtoMessage()    {}
func (*ClientVersionNotSupported) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a6d6035a0763f36, []int{4}
}
func (m *ClientVersionNotSupported) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientVersionNotSupported) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientVersionNotSupported.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientVersionNotSupported) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientVersionNotSupported.Merge(m, src)
}
func (m *ClientVersionNotSupported) XXX_Size() int {
	return m.Size()
}
func (m *ClientVersionNotSupported) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientVersionNotSupported.DiscardUnknown(m)
}

var xxx_messageInfo_ClientVersionNotSupported proto.InternalMessageInfo

func (m *ClientVersionNotSupported) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *ClientVersionNotSupported) GetClientImpl() string {
	if m != nil {
		return m.ClientImpl
	}
	return ""
}

func (m *ClientVersionNotSupported) GetSupportedVersions() string {
	if m != nil {
		return m.SupportedVersions
	}
	return ""
}

type FeatureVersionNotSupported struct {
	Feature           string `protobuf:"bytes,1,opt,name=feature,proto3" json:"feature,omitempty"`
	FeatureVersion    string `protobuf:"bytes,2,opt,name=featureVersion,proto3" json:"featureVersion,omitempty"`
	SupportedVersions string `protobuf:"bytes,3,opt,name=supportedVersions,proto3" json:"supportedVersions,omitempty"`
}

func (m *FeatureVersionNotSupported) Reset()         { *m = FeatureVersionNotSupported{} }
func (m *FeatureVersionNotSupported) String() string { return proto.CompactTextString(m) }
func (*FeatureVersionNotSupported) ProtoMessage()    {}
func (*FeatureVersionNotSupported) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a6d6035a0763f36, []int{5}
}
func (m *FeatureVersionNotSupported) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeatureVersionNotSupported) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeatureVersionNotSupported.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeatureVersionNotSupported) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureVersionNotSupported.Merge(m, src)
}
func (m *FeatureVersionNotSupported) XXX_Size() int {
	return m.Size()
}
func (m *FeatureVersionNotSupported) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureVersionNotSupported.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureVersionNotSupported proto.InternalMessageInfo

func (m *FeatureVersionNotSupported) GetFeature() string {
	if m != nil {
		return m.Feature
	}
	return ""
}

func (m *FeatureVersionNotSupported) GetFeatureVersion() string {
	if m != nil {
		return m.FeatureVersion
	}
	return ""
}

func (m *FeatureVersionNotSupported) GetSupportedVersions() string {
	if m != nil {
		return m.SupportedVersions
	}
	return ""
}

type CurrentBranchChanged struct {
	CurrentBranchToken []byte `protobuf:"bytes,1,opt,name=currentBranchToken,proto3" json:"currentBranchToken,omitempty"`
}

func (m *CurrentBranchChanged) Reset()         { *m = CurrentBranchChanged{} }
func (m *CurrentBranchChanged) String() string { return proto.CompactTextString(m) }
func (*CurrentBranchChanged) ProtoMessage()    {}
func (*CurrentBranchChanged) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a6d6035a0763f36, []int{6}
}
func (m *CurrentBranchChanged) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CurrentBranchChanged) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CurrentBranchChanged.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CurrentBranchChanged) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrentBranchChanged.Merge(m, src)
}
func (m *CurrentBranchChanged) XXX_Size() int {
	return m.Size()
}
func (m *CurrentBranchChanged) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrentBranchChanged.DiscardUnknown(m)
}

var xxx_messageInfo_CurrentBranchChanged proto.InternalMessageInfo

func (m *CurrentBranchChanged) GetCurrentBranchToken() []byte {
	if m != nil {
		return m.CurrentBranchToken
	}
	return nil
}

type ShardOwnershipLost struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *ShardOwnershipLost) Reset()         { *m = ShardOwnershipLost{} }
func (m *ShardOwnershipLost) String() string { return proto.CompactTextString(m) }
func (*ShardOwnershipLost) ProtoMessage()    {}
func (*ShardOwnershipLost) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a6d6035a0763f36, []int{7}
}
func (m *ShardOwnershipLost) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardOwnershipLost) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardOwnershipLost.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardOwnershipLost) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardOwnershipLost.Merge(m, src)
}
func (m *ShardOwnershipLost) XXX_Size() int {
	return m.Size()
}
func (m *ShardOwnershipLost) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardOwnershipLost.DiscardUnknown(m)
}

var xxx_messageInfo_ShardOwnershipLost proto.InternalMessageInfo

func (m *ShardOwnershipLost) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type NamespaceAlreadyExists struct {
}

func (m *NamespaceAlreadyExists) Reset()         { *m = NamespaceAlreadyExists{} }
func (m *NamespaceAlreadyExists) String() string { return proto.CompactTextString(m) }
func (*NamespaceAlreadyExists) ProtoMessage()    {}
func (*NamespaceAlreadyExists) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a6d6035a0763f36, []int{8}
}
func (m *NamespaceAlreadyExists) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NamespaceAlreadyExists) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NamespaceAlreadyExists.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NamespaceAlreadyExists) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamespaceAlreadyExists.Merge(m, src)
}
func (m *NamespaceAlreadyExists) XXX_Size() int {
	return m.Size()
}
func (m *NamespaceAlreadyExists) XXX_DiscardUnknown() {
	xxx_messageInfo_NamespaceAlreadyExists.DiscardUnknown(m)
}

var xxx_messageInfo_NamespaceAlreadyExists proto.InternalMessageInfo

type CancellationAlreadyRequested struct {
}

func (m *CancellationAlreadyRequested) Reset()         { *m = CancellationAlreadyRequested{} }
func (m *CancellationAlreadyRequested) String() string { return proto.CompactTextString(m) }
func (*CancellationAlreadyRequested) ProtoMessage()    {}
func (*CancellationAlreadyRequested) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a6d6035a0763f36, []int{9}
}
func (m *CancellationAlreadyRequested) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancellationAlreadyRequested) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancellationAlreadyRequested.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancellationAlreadyRequested) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancellationAlreadyRequested.Merge(m, src)
}
func (m *CancellationAlreadyRequested) XXX_Size() int {
	return m.Size()
}
func (m *CancellationAlreadyRequested) XXX_DiscardUnknown() {
	xxx_messageInfo_CancellationAlreadyRequested.DiscardUnknown(m)
}

var xxx_messageInfo_CancellationAlreadyRequested proto.InternalMessageInfo

type QueryFailed struct {
}

func (m *QueryFailed) Reset()         { *m = QueryFailed{} }
func (m *QueryFailed) String() string { return proto.CompactTextString(m) }
func (*QueryFailed) ProtoMessage()    {}
func (*QueryFailed) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a6d6035a0763f36, []int{10}
}
func (m *QueryFailed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFailed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFailed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFailed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFailed.Merge(m, src)
}
func (m *QueryFailed) XXX_Size() int {
	return m.Size()
}
func (m *QueryFailed) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFailed.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFailed proto.InternalMessageInfo

type EventAlreadyStarted struct {
}

func (m *EventAlreadyStarted) Reset()         { *m = EventAlreadyStarted{} }
func (m *EventAlreadyStarted) String() string { return proto.CompactTextString(m) }
func (*EventAlreadyStarted) ProtoMessage()    {}
func (*EventAlreadyStarted) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a6d6035a0763f36, []int{11}
}
func (m *EventAlreadyStarted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAlreadyStarted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAlreadyStarted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAlreadyStarted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAlreadyStarted.Merge(m, src)
}
func (m *EventAlreadyStarted) XXX_Size() int {
	return m.Size()
}
func (m *EventAlreadyStarted) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAlreadyStarted.DiscardUnknown(m)
}

var xxx_messageInfo_EventAlreadyStarted proto.InternalMessageInfo

func init() {
	proto.RegisterType((*WorkflowExecutionAlreadyStarted)(nil), "failure.WorkflowExecutionAlreadyStarted")
	proto.RegisterType((*NamespaceNotActive)(nil), "failure.NamespaceNotActive")
	proto.RegisterType((*RetryTask)(nil), "failure.RetryTask")
	proto.RegisterType((*RetryTaskV2)(nil), "failure.RetryTaskV2")
	proto.RegisterType((*ClientVersionNotSupported)(nil), "failure.ClientVersionNotSupported")
	proto.RegisterType((*FeatureVersionNotSupported)(nil), "failure.FeatureVersionNotSupported")
	proto.RegisterType((*CurrentBranchChanged)(nil), "failure.CurrentBranchChanged")
	proto.RegisterType((*ShardOwnershipLost)(nil), "failure.ShardOwnershipLost")
	proto.RegisterType((*NamespaceAlreadyExists)(nil), "failure.NamespaceAlreadyExists")
	proto.RegisterType((*CancellationAlreadyRequested)(nil), "failure.CancellationAlreadyRequested")
	proto.RegisterType((*QueryFailed)(nil), "failure.QueryFailed")
	proto.RegisterType((*EventAlreadyStarted)(nil), "failure.EventAlreadyStarted")
}

func init() { proto.RegisterFile("failure/message.proto", fileDescriptor_8a6d6035a0763f36) }

var fileDescriptor_8a6d6035a0763f36 = []byte{
	// 567 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0xc1, 0x6e, 0xd3, 0x4c,
	0x10, 0xc7, 0xeb, 0xe6, 0x6b, 0xa3, 0x4c, 0x9a, 0x0f, 0xb1, 0xb4, 0x28, 0x45, 0x95, 0x89, 0x56,
	0x05, 0x45, 0x08, 0x12, 0x09, 0x9e, 0xa0, 0x8d, 0x12, 0x29, 0x12, 0x0a, 0x90, 0x54, 0x45, 0x42,
	0x48, 0x68, 0xb1, 0x27, 0x89, 0x15, 0xc7, 0x6b, 0x76, 0xd7, 0x4d, 0x72, 0x83, 0x03, 0x37, 0x24,
	0x78, 0x2c, 0x8e, 0x3d, 0x72, 0x44, 0xc9, 0x8b, 0x20, 0xaf, 0xd7, 0x89, 0x9d, 0xf6, 0xc2, 0x81,
	0x9b, 0xe7, 0x37, 0xe3, 0xd9, 0xff, 0xcc, 0xce, 0x0e, 0x1c, 0x0d, 0x99, 0xe7, 0x47, 0x02, 0x9b,
	0x53, 0x94, 0x92, 0x8d, 0xb0, 0x11, 0x0a, 0xae, 0x38, 0x29, 0x1a, 0x4c, 0x3f, 0xc0, 0xc3, 0xb7,
	0x5c, 0x4c, 0x86, 0x3e, 0x9f, 0xb5, 0xe7, 0xe8, 0x44, 0xca, 0xe3, 0xc1, 0x99, 0x2f, 0x90, 0xb9,
	0x8b, 0x81, 0x62, 0x42, 0xa1, 0x4b, 0x1e, 0xc3, 0xff, 0x32, 0xfe, 0xec, 0xe3, 0xa7, 0x08, 0xa5,
	0xea, 0xba, 0x55, 0xab, 0x66, 0xd5, 0x4b, 0xfd, 0x2d, 0x4a, 0x0e, 0x61, 0x4f, 0x44, 0x41, 0xd7,
	0xad, 0xee, 0x6a, 0x77, 0x62, 0xd0, 0xcf, 0x16, 0x90, 0x1e, 0x9b, 0xa2, 0x0c, 0x99, 0x83, 0x3d,
	0xae, 0xce, 0x1c, 0xe5, 0x5d, 0x21, 0x39, 0x81, 0x52, 0x90, 0x52, 0x93, 0x6f, 0x03, 0xe2, 0x23,
	0x9d, 0x48, 0x08, 0x0c, 0x54, 0xcb, 0x8f, 0xa4, 0x42, 0x61, 0x72, 0x6e, 0x51, 0x72, 0x0a, 0x15,
	0xa6, 0xf3, 0xa5, 0x61, 0x05, 0x1d, 0x96, 0x87, 0xf4, 0xab, 0x05, 0xa5, 0x3e, 0x2a, 0xb1, 0xb8,
	0x60, 0x72, 0x42, 0x6a, 0x50, 0x5e, 0x1f, 0xb4, 0xae, 0x25, 0x8b, 0x88, 0x0d, 0x30, 0x33, 0x3d,
	0x59, 0x57, 0x93, 0x21, 0x9b, 0x42, 0x0b, 0x99, 0x42, 0x75, 0x5e, 0x9c, 0xab, 0xf6, 0x15, 0x06,
	0x71, 0x8f, 0xfe, 0xab, 0x59, 0xf5, 0x42, 0x3f, 0x8b, 0xe8, 0x97, 0x5d, 0x28, 0xaf, 0x75, 0x5c,
	0x3e, 0xff, 0x67, 0x4a, 0x28, 0x1c, 0xe8, 0xab, 0xc9, 0x4b, 0xc9, 0x31, 0xf2, 0x14, 0xee, 0x6e,
	0xec, 0x4b, 0x14, 0xd2, 0xe3, 0x41, 0x75, 0x4f, 0x07, 0xde, 0x74, 0xc4, 0x3a, 0x30, 0x70, 0xd3,
	0x7c, 0xfb, 0x3a, 0x2c, 0x43, 0x48, 0x1d, 0xee, 0xa4, 0x56, 0x9a, 0xab, 0xa8, 0x83, 0xb6, 0x31,
	0xfd, 0x6e, 0xc1, 0x71, 0xcb, 0xf7, 0x36, 0xa4, 0xc7, 0xd5, 0x20, 0x0a, 0x43, 0xae, 0x47, 0xed,
	0x14, 0x2a, 0x4e, 0xd6, 0x69, 0x7a, 0x92, 0x87, 0xb1, 0x9a, 0x04, 0x74, 0xa7, 0xa1, 0x9f, 0x76,
	0x65, 0x43, 0x74, 0x6d, 0x69, 0x4a, 0xf3, 0x8f, 0x34, 0x1d, 0xba, 0xe9, 0xa0, 0xdf, 0x2c, 0x78,
	0xd0, 0x41, 0xa6, 0x22, 0x81, 0xb7, 0x49, 0xaa, 0x42, 0x71, 0x98, 0x78, 0x8d, 0x98, 0xd4, 0x8c,
	0x87, 0x74, 0x98, 0xfb, 0x2f, 0x1d, 0xd2, 0x3c, 0xfd, 0x4b, 0x39, 0x1d, 0x38, 0x6c, 0x25, 0x43,
	0x7e, 0x2e, 0x58, 0xe0, 0x8c, 0x5b, 0x63, 0x16, 0x8c, 0xd0, 0x25, 0x0d, 0x20, 0x4e, 0x96, 0x5f,
	0xf0, 0x09, 0x26, 0xfd, 0x39, 0xe8, 0xdf, 0xe2, 0xa1, 0x4f, 0x80, 0x0c, 0xc6, 0x4c, 0xb8, 0xaf,
	0x66, 0x01, 0x0a, 0x39, 0xf6, 0xc2, 0x97, 0x5c, 0xaa, 0x78, 0x60, 0x78, 0x0c, 0x4c, 0x2d, 0x89,
	0x41, 0xab, 0x70, 0x7f, 0xfd, 0x44, 0xcd, 0xe3, 0x6f, 0xcf, 0x3d, 0xa9, 0x24, 0xb5, 0xe1, 0xa4,
	0xc5, 0x02, 0x07, 0x7d, 0x9f, 0x65, 0x36, 0x83, 0x79, 0xf3, 0xe8, 0xd2, 0x0a, 0x94, 0xdf, 0x44,
	0x28, 0x16, 0x1d, 0xe6, 0xf9, 0xe8, 0xd2, 0x23, 0xb8, 0xa7, 0x6f, 0x3b, 0xbf, 0x41, 0xce, 0xdf,
	0xff, 0x5c, 0xda, 0xd6, 0xf5, 0xd2, 0xb6, 0x7e, 0x2f, 0x6d, 0xeb, 0xc7, 0xca, 0xde, 0xb9, 0x5e,
	0xd9, 0x3b, 0xbf, 0x56, 0xf6, 0x0e, 0x1c, 0x7b, 0xbc, 0xa1, 0x70, 0x1a, 0x72, 0xc1, 0xfc, 0x64,
	0x35, 0x35, 0xcc, 0x66, 0x7a, 0x6d, 0xbd, 0x7b, 0x34, 0xca, 0x38, 0x3d, 0xde, 0x4c, 0xbf, 0x9f,
	0xe9, 0xc0, 0xa6, 0x09, 0xfc, 0xb8, 0xaf, 0xcd, 0x17, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xdf,
	0x8d, 0xbc, 0xe9, 0xeb, 0x04, 0x00, 0x00,
}

func (m *WorkflowExecutionAlreadyStarted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowExecutionAlreadyStarted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowExecutionAlreadyStarted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RunId) > 0 {
		i -= len(m.RunId)
		copy(dAtA[i:], m.RunId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.RunId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StartRequestId) > 0 {
		i -= len(m.StartRequestId)
		copy(dAtA[i:], m.StartRequestId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.StartRequestId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NamespaceNotActive) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamespaceNotActive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NamespaceNotActive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ActiveCluster) > 0 {
		i -= len(m.ActiveCluster)
		copy(dAtA[i:], m.ActiveCluster)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ActiveCluster)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CurrentCluster) > 0 {
		i -= len(m.CurrentCluster)
		copy(dAtA[i:], m.CurrentCluster)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.CurrentCluster)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RetryTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetryTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetryTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.NextEventId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.RunId) > 0 {
		i -= len(m.RunId)
		copy(dAtA[i:], m.RunId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.RunId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WorkflowId) > 0 {
		i -= len(m.WorkflowId)
		copy(dAtA[i:], m.WorkflowId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.WorkflowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NamespaceId) > 0 {
		i -= len(m.NamespaceId)
		copy(dAtA[i:], m.NamespaceId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.NamespaceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RetryTaskV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetryTaskV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetryTaskV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndEventVersion != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.EndEventVersion))
		i--
		dAtA[i] = 0x38
	}
	if m.EndEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.EndEventId))
		i--
		dAtA[i] = 0x30
	}
	if m.StartEventVersion != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartEventVersion))
		i--
		dAtA[i] = 0x28
	}
	if m.StartEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartEventId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.RunId) > 0 {
		i -= len(m.RunId)
		copy(dAtA[i:], m.RunId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.RunId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WorkflowId) > 0 {
		i -= len(m.WorkflowId)
		copy(dAtA[i:], m.WorkflowId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.WorkflowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NamespaceId) > 0 {
		i -= len(m.NamespaceId)
		copy(dAtA[i:], m.NamespaceId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.NamespaceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClientVersionNotSupported) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientVersionNotSupported) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientVersionNotSupported) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SupportedVersions) > 0 {
		i -= len(m.SupportedVersions)
		copy(dAtA[i:], m.SupportedVersions)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.SupportedVersions)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClientImpl) > 0 {
		i -= len(m.ClientImpl)
		copy(dAtA[i:], m.ClientImpl)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ClientImpl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClientVersion) > 0 {
		i -= len(m.ClientVersion)
		copy(dAtA[i:], m.ClientVersion)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ClientVersion)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FeatureVersionNotSupported) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeatureVersionNotSupported) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeatureVersionNotSupported) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SupportedVersions) > 0 {
		i -= len(m.SupportedVersions)
		copy(dAtA[i:], m.SupportedVersions)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.SupportedVersions)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FeatureVersion) > 0 {
		i -= len(m.FeatureVersion)
		copy(dAtA[i:], m.FeatureVersion)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.FeatureVersion)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Feature) > 0 {
		i -= len(m.Feature)
		copy(dAtA[i:], m.Feature)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Feature)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CurrentBranchChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CurrentBranchChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CurrentBranchChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CurrentBranchToken) > 0 {
		i -= len(m.CurrentBranchToken)
		copy(dAtA[i:], m.CurrentBranchToken)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.CurrentBranchToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ShardOwnershipLost) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardOwnershipLost) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShardOwnershipLost) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NamespaceAlreadyExists) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamespaceAlreadyExists) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NamespaceAlreadyExists) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CancellationAlreadyRequested) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancellationAlreadyRequested) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CancellationAlreadyRequested) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryFailed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFailed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFailed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *EventAlreadyStarted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAlreadyStarted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAlreadyStarted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WorkflowExecutionAlreadyStarted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StartRequestId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.RunId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *NamespaceNotActive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.CurrentCluster)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.ActiveCluster)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *RetryTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NamespaceId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.WorkflowId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.RunId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.NextEventId != 0 {
		n += 1 + sovMessage(uint64(m.NextEventId))
	}
	return n
}

func (m *RetryTaskV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NamespaceId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.WorkflowId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.RunId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.StartEventId != 0 {
		n += 1 + sovMessage(uint64(m.StartEventId))
	}
	if m.StartEventVersion != 0 {
		n += 1 + sovMessage(uint64(m.StartEventVersion))
	}
	if m.EndEventId != 0 {
		n += 1 + sovMessage(uint64(m.EndEventId))
	}
	if m.EndEventVersion != 0 {
		n += 1 + sovMessage(uint64(m.EndEventVersion))
	}
	return n
}

func (m *ClientVersionNotSupported) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClientVersion)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.ClientImpl)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.SupportedVersions)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *FeatureVersionNotSupported) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Feature)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.FeatureVersion)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.SupportedVersions)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *CurrentBranchChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CurrentBranchToken)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *ShardOwnershipLost) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *NamespaceAlreadyExists) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CancellationAlreadyRequested) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryFailed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *EventAlreadyStarted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WorkflowExecutionAlreadyStarted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowExecutionAlreadyStarted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowExecutionAlreadyStarted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartRequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartRequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NamespaceNotActive) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamespaceNotActive: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamespaceNotActive: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentCluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentCluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveCluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActiveCluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetryTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetryTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetryTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextEventId", wireType)
			}
			m.NextEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetryTaskV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetryTaskV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetryTaskV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartEventId", wireType)
			}
			m.StartEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartEventVersion", wireType)
			}
			m.StartEventVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartEventVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndEventId", wireType)
			}
			m.EndEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndEventVersion", wireType)
			}
			m.EndEventVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndEventVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientVersionNotSupported) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientVersionNotSupported: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientVersionNotSupported: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientImpl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientImpl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportedVersions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupportedVersions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeatureVersionNotSupported) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeatureVersionNotSupported: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeatureVersionNotSupported: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Feature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeatureVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportedVersions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupportedVersions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CurrentBranchChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CurrentBranchChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CurrentBranchChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentBranchToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentBranchToken = append(m.CurrentBranchToken[:0], dAtA[iNdEx:postIndex]...)
			if m.CurrentBranchToken == nil {
				m.CurrentBranchToken = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardOwnershipLost) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardOwnershipLost: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardOwnershipLost: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NamespaceAlreadyExists) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamespaceAlreadyExists: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamespaceAlreadyExists: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancellationAlreadyRequested) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancellationAlreadyRequested: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancellationAlreadyRequested: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFailed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFailed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFailed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAlreadyStarted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAlreadyStarted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAlreadyStarted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)

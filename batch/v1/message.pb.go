// Code generated by protoc-gen-go. DO NOT EDIT.
// plugins:
// 	protoc-gen-go
// 	protoc
// source: temporal/api/batch/v1/message.proto

package batch

import (
	reflect "reflect"
	sync "sync"

	v14 "go.temporal.io/api/activity/v1"
	v11 "go.temporal.io/api/common/v1"
	v1 "go.temporal.io/api/enums/v1"
	v13 "go.temporal.io/api/rules/v1"
	v12 "go.temporal.io/api/workflow/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BatchOperationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Batch job ID
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// Batch operation state
	State v1.BatchOperationState `protobuf:"varint,2,opt,name=state,proto3,enum=temporal.api.enums.v1.BatchOperationState" json:"state,omitempty"`
	// Batch operation start time
	StartTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Batch operation close time
	CloseTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=close_time,json=closeTime,proto3" json:"close_time,omitempty"`
}

func (x *BatchOperationInfo) Reset() {
	*x = BatchOperationInfo{}
	mi := &file_temporal_api_batch_v1_message_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchOperationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOperationInfo) ProtoMessage() {}

func (x *BatchOperationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_batch_v1_message_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOperationInfo.ProtoReflect.Descriptor instead.
func (*BatchOperationInfo) Descriptor() ([]byte, []int) {
	return file_temporal_api_batch_v1_message_proto_rawDescGZIP(), []int{0}
}

func (x *BatchOperationInfo) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *BatchOperationInfo) GetState() v1.BatchOperationState {
	if x != nil {
		return x.State
	}
	return v1.BatchOperationState(0)
}

func (x *BatchOperationInfo) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *BatchOperationInfo) GetCloseTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CloseTime
	}
	return nil
}

// BatchOperationTermination sends terminate requests to batch workflows.
// Keep the parameter in sync with temporal.api.workflowservice.v1.TerminateWorkflowExecutionRequest.
// Ignore first_execution_run_id because this is used for single workflow operation.
type BatchOperationTermination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Serialized value(s) to provide to the termination event
	Details *v11.Payloads `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	// The identity of the worker/client
	Identity string `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (x *BatchOperationTermination) Reset() {
	*x = BatchOperationTermination{}
	mi := &file_temporal_api_batch_v1_message_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchOperationTermination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOperationTermination) ProtoMessage() {}

func (x *BatchOperationTermination) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_batch_v1_message_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOperationTermination.ProtoReflect.Descriptor instead.
func (*BatchOperationTermination) Descriptor() ([]byte, []int) {
	return file_temporal_api_batch_v1_message_proto_rawDescGZIP(), []int{1}
}

func (x *BatchOperationTermination) GetDetails() *v11.Payloads {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *BatchOperationTermination) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

// BatchOperationSignal sends signals to batch workflows.
// Keep the parameter in sync with temporal.api.workflowservice.v1.SignalWorkflowExecutionRequest.
type BatchOperationSignal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The workflow author-defined name of the signal to send to the workflow
	Signal string `protobuf:"bytes,1,opt,name=signal,proto3" json:"signal,omitempty"`
	// Serialized value(s) to provide with the signal
	Input *v11.Payloads `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	// Headers that are passed with the signal to the processing workflow.
	// These can include things like auth or tracing tokens.
	Header *v11.Header `protobuf:"bytes,3,opt,name=header,proto3" json:"header,omitempty"`
	// The identity of the worker/client
	Identity string `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (x *BatchOperationSignal) Reset() {
	*x = BatchOperationSignal{}
	mi := &file_temporal_api_batch_v1_message_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchOperationSignal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOperationSignal) ProtoMessage() {}

func (x *BatchOperationSignal) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_batch_v1_message_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOperationSignal.ProtoReflect.Descriptor instead.
func (*BatchOperationSignal) Descriptor() ([]byte, []int) {
	return file_temporal_api_batch_v1_message_proto_rawDescGZIP(), []int{2}
}

func (x *BatchOperationSignal) GetSignal() string {
	if x != nil {
		return x.Signal
	}
	return ""
}

func (x *BatchOperationSignal) GetInput() *v11.Payloads {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *BatchOperationSignal) GetHeader() *v11.Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *BatchOperationSignal) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

// BatchOperationCancellation sends cancel requests to batch workflows.
// Keep the parameter in sync with temporal.api.workflowservice.v1.RequestCancelWorkflowExecutionRequest.
// Ignore first_execution_run_id because this is used for single workflow operation.
type BatchOperationCancellation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identity of the worker/client
	Identity string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (x *BatchOperationCancellation) Reset() {
	*x = BatchOperationCancellation{}
	mi := &file_temporal_api_batch_v1_message_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchOperationCancellation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOperationCancellation) ProtoMessage() {}

func (x *BatchOperationCancellation) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_batch_v1_message_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOperationCancellation.ProtoReflect.Descriptor instead.
func (*BatchOperationCancellation) Descriptor() ([]byte, []int) {
	return file_temporal_api_batch_v1_message_proto_rawDescGZIP(), []int{3}
}

func (x *BatchOperationCancellation) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

// BatchOperationDeletion sends deletion requests to batch workflows.
// Keep the parameter in sync with temporal.api.workflowservice.v1.DeleteWorkflowExecutionRequest.
type BatchOperationDeletion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identity of the worker/client
	Identity string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (x *BatchOperationDeletion) Reset() {
	*x = BatchOperationDeletion{}
	mi := &file_temporal_api_batch_v1_message_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchOperationDeletion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOperationDeletion) ProtoMessage() {}

func (x *BatchOperationDeletion) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_batch_v1_message_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOperationDeletion.ProtoReflect.Descriptor instead.
func (*BatchOperationDeletion) Descriptor() ([]byte, []int) {
	return file_temporal_api_batch_v1_message_proto_rawDescGZIP(), []int{4}
}

func (x *BatchOperationDeletion) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

// BatchOperationReset sends reset requests to batch workflows.
// Keep the parameter in sync with temporal.api.workflowservice.v1.ResetWorkflowExecutionRequest.
type BatchOperationReset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identity of the worker/client.
	Identity string `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	// Describes what to reset to and how. If set, `reset_type` and `reset_reapply_type` are ignored.
	Options *v11.ResetOptions `protobuf:"bytes,4,opt,name=options,proto3" json:"options,omitempty"`
	// Deprecated. Use `options`.
	//
	// Deprecated: Marked as deprecated in temporal/api/batch/v1/message.proto.
	ResetType v1.ResetType `protobuf:"varint,1,opt,name=reset_type,json=resetType,proto3,enum=temporal.api.enums.v1.ResetType" json:"reset_type,omitempty"`
	// Deprecated. Use `options`.
	//
	// Deprecated: Marked as deprecated in temporal/api/batch/v1/message.proto.
	ResetReapplyType v1.ResetReapplyType `protobuf:"varint,2,opt,name=reset_reapply_type,json=resetReapplyType,proto3,enum=temporal.api.enums.v1.ResetReapplyType" json:"reset_reapply_type,omitempty"`
	// Operations to perform after the workflow has been reset. These operations will be applied
	// to the *new* run of the workflow execution in the order they are provided.
	// All operations are applied to the workflow before the first new workflow task is generated
	PostResetOperations []*v12.PostResetOperation `protobuf:"bytes,5,rep,name=post_reset_operations,json=postResetOperations,proto3" json:"post_reset_operations,omitempty"`
}

func (x *BatchOperationReset) Reset() {
	*x = BatchOperationReset{}
	mi := &file_temporal_api_batch_v1_message_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchOperationReset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOperationReset) ProtoMessage() {}

func (x *BatchOperationReset) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_batch_v1_message_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOperationReset.ProtoReflect.Descriptor instead.
func (*BatchOperationReset) Descriptor() ([]byte, []int) {
	return file_temporal_api_batch_v1_message_proto_rawDescGZIP(), []int{5}
}

func (x *BatchOperationReset) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *BatchOperationReset) GetOptions() *v11.ResetOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

// Deprecated: Marked as deprecated in temporal/api/batch/v1/message.proto.
func (x *BatchOperationReset) GetResetType() v1.ResetType {
	if x != nil {
		return x.ResetType
	}
	return v1.ResetType(0)
}

// Deprecated: Marked as deprecated in temporal/api/batch/v1/message.proto.
func (x *BatchOperationReset) GetResetReapplyType() v1.ResetReapplyType {
	if x != nil {
		return x.ResetReapplyType
	}
	return v1.ResetReapplyType(0)
}

func (x *BatchOperationReset) GetPostResetOperations() []*v12.PostResetOperation {
	if x != nil {
		return x.PostResetOperations
	}
	return nil
}

// BatchOperationUpdateWorkflowExecutionOptions sends UpdateWorkflowExecutionOptions requests to batch workflows.
// Keep the parameters in sync with temporal.api.workflowservice.v1.UpdateWorkflowExecutionOptionsRequest.
type BatchOperationUpdateWorkflowExecutionOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identity of the worker/client.
	Identity string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	// Update Workflow options that were originally specified via StartWorkflowExecution. Partial updates are accepted and controlled by update_mask.
	WorkflowExecutionOptions *v12.WorkflowExecutionOptions `protobuf:"bytes,2,opt,name=workflow_execution_options,json=workflowExecutionOptions,proto3" json:"workflow_execution_options,omitempty"`
	// Controls which fields from `workflow_execution_options` will be applied.
	// To unset a field, set it to null and use the update mask to indicate that it should be mutated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *BatchOperationUpdateWorkflowExecutionOptions) Reset() {
	*x = BatchOperationUpdateWorkflowExecutionOptions{}
	mi := &file_temporal_api_batch_v1_message_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchOperationUpdateWorkflowExecutionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOperationUpdateWorkflowExecutionOptions) ProtoMessage() {}

func (x *BatchOperationUpdateWorkflowExecutionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_batch_v1_message_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOperationUpdateWorkflowExecutionOptions.ProtoReflect.Descriptor instead.
func (*BatchOperationUpdateWorkflowExecutionOptions) Descriptor() ([]byte, []int) {
	return file_temporal_api_batch_v1_message_proto_rawDescGZIP(), []int{6}
}

func (x *BatchOperationUpdateWorkflowExecutionOptions) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *BatchOperationUpdateWorkflowExecutionOptions) GetWorkflowExecutionOptions() *v12.WorkflowExecutionOptions {
	if x != nil {
		return x.WorkflowExecutionOptions
	}
	return nil
}

func (x *BatchOperationUpdateWorkflowExecutionOptions) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// BatchOperationUnpauseActivities sends unpause requests to batch workflows.
type BatchOperationUnpauseActivities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identity of the worker/client.
	Identity string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	// The activity to unpause. If match_all is set to true, all activities will be unpaused.
	//
	// Types that are assignable to Activity:
	//
	//	*BatchOperationUnpauseActivities_Type
	//	*BatchOperationUnpauseActivities_MatchAll
	Activity isBatchOperationUnpauseActivities_Activity `protobuf_oneof:"activity"`
	// Setting this flag will also reset the number of attempts.
	ResetAttempts bool `protobuf:"varint,4,opt,name=reset_attempts,json=resetAttempts,proto3" json:"reset_attempts,omitempty"`
	// Setting this flag will also reset the heartbeat details.
	ResetHeartbeat bool `protobuf:"varint,5,opt,name=reset_heartbeat,json=resetHeartbeat,proto3" json:"reset_heartbeat,omitempty"`
	// If set, the activity will start at a random time within the specified jitter
	// duration, introducing variability to the start time.
	Jitter *durationpb.Duration `protobuf:"bytes,6,opt,name=jitter,proto3" json:"jitter,omitempty"`
}

func (x *BatchOperationUnpauseActivities) Reset() {
	*x = BatchOperationUnpauseActivities{}
	mi := &file_temporal_api_batch_v1_message_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchOperationUnpauseActivities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOperationUnpauseActivities) ProtoMessage() {}

func (x *BatchOperationUnpauseActivities) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_batch_v1_message_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOperationUnpauseActivities.ProtoReflect.Descriptor instead.
func (*BatchOperationUnpauseActivities) Descriptor() ([]byte, []int) {
	return file_temporal_api_batch_v1_message_proto_rawDescGZIP(), []int{7}
}

func (x *BatchOperationUnpauseActivities) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (m *BatchOperationUnpauseActivities) GetActivity() isBatchOperationUnpauseActivities_Activity {
	if m != nil {
		return m.Activity
	}
	return nil
}

func (x *BatchOperationUnpauseActivities) GetType() string {
	if x, ok := x.GetActivity().(*BatchOperationUnpauseActivities_Type); ok {
		return x.Type
	}
	return ""
}

func (x *BatchOperationUnpauseActivities) GetMatchAll() bool {
	if x, ok := x.GetActivity().(*BatchOperationUnpauseActivities_MatchAll); ok {
		return x.MatchAll
	}
	return false
}

func (x *BatchOperationUnpauseActivities) GetResetAttempts() bool {
	if x != nil {
		return x.ResetAttempts
	}
	return false
}

func (x *BatchOperationUnpauseActivities) GetResetHeartbeat() bool {
	if x != nil {
		return x.ResetHeartbeat
	}
	return false
}

func (x *BatchOperationUnpauseActivities) GetJitter() *durationpb.Duration {
	if x != nil {
		return x.Jitter
	}
	return nil
}

type isBatchOperationUnpauseActivities_Activity interface {
	isBatchOperationUnpauseActivities_Activity()
}

type BatchOperationUnpauseActivities_Type struct {
	Type string `protobuf:"bytes,2,opt,name=type,proto3,oneof"`
}

type BatchOperationUnpauseActivities_MatchAll struct {
	MatchAll bool `protobuf:"varint,3,opt,name=match_all,json=matchAll,proto3,oneof"`
}

func (*BatchOperationUnpauseActivities_Type) isBatchOperationUnpauseActivities_Activity() {}

func (*BatchOperationUnpauseActivities_MatchAll) isBatchOperationUnpauseActivities_Activity() {}

// BatchOperationTriggerWorkflowRule sends TriggerWorkflowRule requests to batch workflows.
type BatchOperationTriggerWorkflowRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identity of the worker/client.
	Identity string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	// Types that are assignable to Rule:
	//
	//	*BatchOperationTriggerWorkflowRule_Id
	//	*BatchOperationTriggerWorkflowRule_Spec
	Rule isBatchOperationTriggerWorkflowRule_Rule `protobuf_oneof:"rule"`
}

func (x *BatchOperationTriggerWorkflowRule) Reset() {
	*x = BatchOperationTriggerWorkflowRule{}
	mi := &file_temporal_api_batch_v1_message_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchOperationTriggerWorkflowRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOperationTriggerWorkflowRule) ProtoMessage() {}

func (x *BatchOperationTriggerWorkflowRule) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_batch_v1_message_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOperationTriggerWorkflowRule.ProtoReflect.Descriptor instead.
func (*BatchOperationTriggerWorkflowRule) Descriptor() ([]byte, []int) {
	return file_temporal_api_batch_v1_message_proto_rawDescGZIP(), []int{8}
}

func (x *BatchOperationTriggerWorkflowRule) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (m *BatchOperationTriggerWorkflowRule) GetRule() isBatchOperationTriggerWorkflowRule_Rule {
	if m != nil {
		return m.Rule
	}
	return nil
}

func (x *BatchOperationTriggerWorkflowRule) GetId() string {
	if x, ok := x.GetRule().(*BatchOperationTriggerWorkflowRule_Id); ok {
		return x.Id
	}
	return ""
}

func (x *BatchOperationTriggerWorkflowRule) GetSpec() *v13.WorkflowRuleSpec {
	if x, ok := x.GetRule().(*BatchOperationTriggerWorkflowRule_Spec); ok {
		return x.Spec
	}
	return nil
}

type isBatchOperationTriggerWorkflowRule_Rule interface {
	isBatchOperationTriggerWorkflowRule_Rule()
}

type BatchOperationTriggerWorkflowRule_Id struct {
	// ID of existing rule.
	Id string `protobuf:"bytes,2,opt,name=id,proto3,oneof"`
}

type BatchOperationTriggerWorkflowRule_Spec struct {
	// Rule specification to be applied to the workflow without creating a new rule.
	Spec *v13.WorkflowRuleSpec `protobuf:"bytes,3,opt,name=spec,proto3,oneof"`
}

func (*BatchOperationTriggerWorkflowRule_Id) isBatchOperationTriggerWorkflowRule_Rule() {}

func (*BatchOperationTriggerWorkflowRule_Spec) isBatchOperationTriggerWorkflowRule_Rule() {}

// BatchOperationResetActivities sends activity reset requests in a batch.
// NOTE: keep in sync with temporal.api.workflowservice.v1.ResetActivityRequest
type BatchOperationResetActivities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identity of the worker/client.
	Identity string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	// The activities to reset. If match_all is set to true, all activities will be reset.
	//
	// Types that are assignable to Activity:
	//
	//	*BatchOperationResetActivities_Type
	//	*BatchOperationResetActivities_MatchAll
	Activity isBatchOperationResetActivities_Activity `protobuf_oneof:"activity"`
	// Setting this flag will also reset the number of attempts.
	ResetAttempts bool `protobuf:"varint,4,opt,name=reset_attempts,json=resetAttempts,proto3" json:"reset_attempts,omitempty"`
	// Setting this flag will also reset the heartbeat details.
	ResetHeartbeat bool `protobuf:"varint,5,opt,name=reset_heartbeat,json=resetHeartbeat,proto3" json:"reset_heartbeat,omitempty"`
	// If activity is paused, it will remain paused after reset
	KeepPaused bool `protobuf:"varint,6,opt,name=keep_paused,json=keepPaused,proto3" json:"keep_paused,omitempty"`
	// If set, the activity will start at a random time within the specified jitter
	// duration, introducing variability to the start time.
	Jitter *durationpb.Duration `protobuf:"bytes,7,opt,name=jitter,proto3" json:"jitter,omitempty"`
	// If set, the activity options will be restored to the defaults.
	// Default options are then options activity was created with.
	// They are part of the first ActivityTaskScheduled event.
	RestoreOriginalOptions bool `protobuf:"varint,8,opt,name=restore_original_options,json=restoreOriginalOptions,proto3" json:"restore_original_options,omitempty"`
}

func (x *BatchOperationResetActivities) Reset() {
	*x = BatchOperationResetActivities{}
	mi := &file_temporal_api_batch_v1_message_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchOperationResetActivities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOperationResetActivities) ProtoMessage() {}

func (x *BatchOperationResetActivities) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_batch_v1_message_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOperationResetActivities.ProtoReflect.Descriptor instead.
func (*BatchOperationResetActivities) Descriptor() ([]byte, []int) {
	return file_temporal_api_batch_v1_message_proto_rawDescGZIP(), []int{9}
}

func (x *BatchOperationResetActivities) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (m *BatchOperationResetActivities) GetActivity() isBatchOperationResetActivities_Activity {
	if m != nil {
		return m.Activity
	}
	return nil
}

func (x *BatchOperationResetActivities) GetType() string {
	if x, ok := x.GetActivity().(*BatchOperationResetActivities_Type); ok {
		return x.Type
	}
	return ""
}

func (x *BatchOperationResetActivities) GetMatchAll() bool {
	if x, ok := x.GetActivity().(*BatchOperationResetActivities_MatchAll); ok {
		return x.MatchAll
	}
	return false
}

func (x *BatchOperationResetActivities) GetResetAttempts() bool {
	if x != nil {
		return x.ResetAttempts
	}
	return false
}

func (x *BatchOperationResetActivities) GetResetHeartbeat() bool {
	if x != nil {
		return x.ResetHeartbeat
	}
	return false
}

func (x *BatchOperationResetActivities) GetKeepPaused() bool {
	if x != nil {
		return x.KeepPaused
	}
	return false
}

func (x *BatchOperationResetActivities) GetJitter() *durationpb.Duration {
	if x != nil {
		return x.Jitter
	}
	return nil
}

func (x *BatchOperationResetActivities) GetRestoreOriginalOptions() bool {
	if x != nil {
		return x.RestoreOriginalOptions
	}
	return false
}

type isBatchOperationResetActivities_Activity interface {
	isBatchOperationResetActivities_Activity()
}

type BatchOperationResetActivities_Type struct {
	Type string `protobuf:"bytes,2,opt,name=type,proto3,oneof"`
}

type BatchOperationResetActivities_MatchAll struct {
	MatchAll bool `protobuf:"varint,3,opt,name=match_all,json=matchAll,proto3,oneof"`
}

func (*BatchOperationResetActivities_Type) isBatchOperationResetActivities_Activity() {}

func (*BatchOperationResetActivities_MatchAll) isBatchOperationResetActivities_Activity() {}

// BatchOperationUpdateActivityOptions sends an update-activity-options requests in a batch.
// NOTE: keep in sync with temporal.api.workflowservice.v1.UpdateActivityRequest
type BatchOperationUpdateActivityOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identity of the worker/client.
	Identity string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	// The activity to update. If match_all is set to true, all activities will be updated.
	//
	// Types that are assignable to Activity:
	//
	//	*BatchOperationUpdateActivityOptions_Type
	//	*BatchOperationUpdateActivityOptions_MatchAll
	Activity isBatchOperationUpdateActivityOptions_Activity `protobuf_oneof:"activity"`
	// Update Activity options. Partial updates are accepted and controlled by update_mask.
	ActivityOptions *v14.ActivityOptions `protobuf:"bytes,4,opt,name=activity_options,json=activityOptions,proto3" json:"activity_options,omitempty"`
	// Controls which fields from `activity_options` will be applied
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,5,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// If set, the activity options will be restored to the default.
	// Default options are then options activity was created with.
	// They are part of the first ActivityTaskScheduled event.
	// This flag cannot be combined with any other option; if you supply
	// restore_original together with other options, the request will be rejected.
	RestoreOriginal bool `protobuf:"varint,6,opt,name=restore_original,json=restoreOriginal,proto3" json:"restore_original,omitempty"`
}

func (x *BatchOperationUpdateActivityOptions) Reset() {
	*x = BatchOperationUpdateActivityOptions{}
	mi := &file_temporal_api_batch_v1_message_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchOperationUpdateActivityOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOperationUpdateActivityOptions) ProtoMessage() {}

func (x *BatchOperationUpdateActivityOptions) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_batch_v1_message_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOperationUpdateActivityOptions.ProtoReflect.Descriptor instead.
func (*BatchOperationUpdateActivityOptions) Descriptor() ([]byte, []int) {
	return file_temporal_api_batch_v1_message_proto_rawDescGZIP(), []int{10}
}

func (x *BatchOperationUpdateActivityOptions) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (m *BatchOperationUpdateActivityOptions) GetActivity() isBatchOperationUpdateActivityOptions_Activity {
	if m != nil {
		return m.Activity
	}
	return nil
}

func (x *BatchOperationUpdateActivityOptions) GetType() string {
	if x, ok := x.GetActivity().(*BatchOperationUpdateActivityOptions_Type); ok {
		return x.Type
	}
	return ""
}

func (x *BatchOperationUpdateActivityOptions) GetMatchAll() bool {
	if x, ok := x.GetActivity().(*BatchOperationUpdateActivityOptions_MatchAll); ok {
		return x.MatchAll
	}
	return false
}

func (x *BatchOperationUpdateActivityOptions) GetActivityOptions() *v14.ActivityOptions {
	if x != nil {
		return x.ActivityOptions
	}
	return nil
}

func (x *BatchOperationUpdateActivityOptions) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *BatchOperationUpdateActivityOptions) GetRestoreOriginal() bool {
	if x != nil {
		return x.RestoreOriginal
	}
	return false
}

type isBatchOperationUpdateActivityOptions_Activity interface {
	isBatchOperationUpdateActivityOptions_Activity()
}

type BatchOperationUpdateActivityOptions_Type struct {
	Type string `protobuf:"bytes,2,opt,name=type,proto3,oneof"`
}

type BatchOperationUpdateActivityOptions_MatchAll struct {
	MatchAll bool `protobuf:"varint,3,opt,name=match_all,json=matchAll,proto3,oneof"`
}

func (*BatchOperationUpdateActivityOptions_Type) isBatchOperationUpdateActivityOptions_Activity() {}

func (*BatchOperationUpdateActivityOptions_MatchAll) isBatchOperationUpdateActivityOptions_Activity() {
}

var File_temporal_api_batch_v1_message_proto protoreflect.FileDescriptor

var file_temporal_api_batch_v1_message_proto_rawDesc = []byte{
	0x0a, 0x23, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x26, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61,
	0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x74,
	0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x74, 0x65, 0x6d, 0x70,
	0x6f, 0x72, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x74,
	0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x26, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe3, 0x01, 0x0a, 0x12, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72,
	0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x73, 0x0a, 0x19, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73,
	0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xba, 0x01, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x36,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x22, 0x38, 0x0a, 0x1a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x34, 0x0a, 0x16,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x22, 0xf3, 0x02, 0x0a, 0x13, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72,
	0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x6d,
	0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x09, 0x72, 0x65, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x59, 0x0a, 0x12, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72,
	0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x10, 0x72, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x60, 0x0a, 0x15, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x13, 0x70, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xf9, 0x01, 0x0a, 0x2c, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x70, 0x0a, 0x1a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x74, 0x65, 0x6d, 0x70,
	0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x18, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x73, 0x6b, 0x22, 0x81, 0x02, 0x0a, 0x1f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x70, 0x61, 0x75, 0x73, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x6a, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x42, 0x0a, 0x0a, 0x08,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0x98, 0x01, 0x0a, 0x21, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x65, 0x6d,
	0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x48, 0x00, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x42, 0x06, 0x0a, 0x04, 0x72,
	0x75, 0x6c, 0x65, 0x22, 0xda, 0x02, 0x0a, 0x1d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x14, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f,
	0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x74, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x70,
	0x61, 0x75, 0x73, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6b, 0x65, 0x65,
	0x70, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x6a, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x06, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x18, 0x72, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x72, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x22, 0xc0, 0x02, 0x0a, 0x23, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x12, 0x54, 0x0a, 0x10, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x29, 0x0a, 0x10,
	0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x42, 0x84, 0x01, 0x0a, 0x18, 0x69, 0x6f, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f,
	0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x42, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x21, 0x67, 0x6f, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6f,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x76, 0x31, 0x3b, 0x62, 0x61,
	0x74, 0x63, 0x68, 0xaa, 0x02, 0x17, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x69, 0x6f,
	0x2e, 0x41, 0x70, 0x69, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x56, 0x31, 0xea, 0x02, 0x1a,
	0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x69, 0x6f, 0x3a, 0x3a, 0x41, 0x70, 0x69, 0x3a,
	0x3a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_temporal_api_batch_v1_message_proto_rawDescOnce sync.Once
	file_temporal_api_batch_v1_message_proto_rawDescData = file_temporal_api_batch_v1_message_proto_rawDesc
)

func file_temporal_api_batch_v1_message_proto_rawDescGZIP() []byte {
	file_temporal_api_batch_v1_message_proto_rawDescOnce.Do(func() {
		file_temporal_api_batch_v1_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_temporal_api_batch_v1_message_proto_rawDescData)
	})
	return file_temporal_api_batch_v1_message_proto_rawDescData
}

var file_temporal_api_batch_v1_message_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_temporal_api_batch_v1_message_proto_goTypes = []any{
	(*BatchOperationInfo)(nil),                           // 0: temporal.api.batch.v1.BatchOperationInfo
	(*BatchOperationTermination)(nil),                    // 1: temporal.api.batch.v1.BatchOperationTermination
	(*BatchOperationSignal)(nil),                         // 2: temporal.api.batch.v1.BatchOperationSignal
	(*BatchOperationCancellation)(nil),                   // 3: temporal.api.batch.v1.BatchOperationCancellation
	(*BatchOperationDeletion)(nil),                       // 4: temporal.api.batch.v1.BatchOperationDeletion
	(*BatchOperationReset)(nil),                          // 5: temporal.api.batch.v1.BatchOperationReset
	(*BatchOperationUpdateWorkflowExecutionOptions)(nil), // 6: temporal.api.batch.v1.BatchOperationUpdateWorkflowExecutionOptions
	(*BatchOperationUnpauseActivities)(nil),              // 7: temporal.api.batch.v1.BatchOperationUnpauseActivities
	(*BatchOperationTriggerWorkflowRule)(nil),            // 8: temporal.api.batch.v1.BatchOperationTriggerWorkflowRule
	(*BatchOperationResetActivities)(nil),                // 9: temporal.api.batch.v1.BatchOperationResetActivities
	(*BatchOperationUpdateActivityOptions)(nil),          // 10: temporal.api.batch.v1.BatchOperationUpdateActivityOptions
	(v1.BatchOperationState)(0),                          // 11: temporal.api.enums.v1.BatchOperationState
	(*timestamppb.Timestamp)(nil),                        // 12: google.protobuf.Timestamp
	(*v11.Payloads)(nil),                                 // 13: temporal.api.common.v1.Payloads
	(*v11.Header)(nil),                                   // 14: temporal.api.common.v1.Header
	(*v11.ResetOptions)(nil),                             // 15: temporal.api.common.v1.ResetOptions
	(v1.ResetType)(0),                                    // 16: temporal.api.enums.v1.ResetType
	(v1.ResetReapplyType)(0),                             // 17: temporal.api.enums.v1.ResetReapplyType
	(*v12.PostResetOperation)(nil),                       // 18: temporal.api.workflow.v1.PostResetOperation
	(*v12.WorkflowExecutionOptions)(nil),                 // 19: temporal.api.workflow.v1.WorkflowExecutionOptions
	(*fieldmaskpb.FieldMask)(nil),                        // 20: google.protobuf.FieldMask
	(*durationpb.Duration)(nil),                          // 21: google.protobuf.Duration
	(*v13.WorkflowRuleSpec)(nil),                         // 22: temporal.api.rules.v1.WorkflowRuleSpec
	(*v14.ActivityOptions)(nil),                          // 23: temporal.api.activity.v1.ActivityOptions
}
var file_temporal_api_batch_v1_message_proto_depIdxs = []int32{
	11, // 0: temporal.api.batch.v1.BatchOperationInfo.state:type_name -> temporal.api.enums.v1.BatchOperationState
	12, // 1: temporal.api.batch.v1.BatchOperationInfo.start_time:type_name -> google.protobuf.Timestamp
	12, // 2: temporal.api.batch.v1.BatchOperationInfo.close_time:type_name -> google.protobuf.Timestamp
	13, // 3: temporal.api.batch.v1.BatchOperationTermination.details:type_name -> temporal.api.common.v1.Payloads
	13, // 4: temporal.api.batch.v1.BatchOperationSignal.input:type_name -> temporal.api.common.v1.Payloads
	14, // 5: temporal.api.batch.v1.BatchOperationSignal.header:type_name -> temporal.api.common.v1.Header
	15, // 6: temporal.api.batch.v1.BatchOperationReset.options:type_name -> temporal.api.common.v1.ResetOptions
	16, // 7: temporal.api.batch.v1.BatchOperationReset.reset_type:type_name -> temporal.api.enums.v1.ResetType
	17, // 8: temporal.api.batch.v1.BatchOperationReset.reset_reapply_type:type_name -> temporal.api.enums.v1.ResetReapplyType
	18, // 9: temporal.api.batch.v1.BatchOperationReset.post_reset_operations:type_name -> temporal.api.workflow.v1.PostResetOperation
	19, // 10: temporal.api.batch.v1.BatchOperationUpdateWorkflowExecutionOptions.workflow_execution_options:type_name -> temporal.api.workflow.v1.WorkflowExecutionOptions
	20, // 11: temporal.api.batch.v1.BatchOperationUpdateWorkflowExecutionOptions.update_mask:type_name -> google.protobuf.FieldMask
	21, // 12: temporal.api.batch.v1.BatchOperationUnpauseActivities.jitter:type_name -> google.protobuf.Duration
	22, // 13: temporal.api.batch.v1.BatchOperationTriggerWorkflowRule.spec:type_name -> temporal.api.rules.v1.WorkflowRuleSpec
	21, // 14: temporal.api.batch.v1.BatchOperationResetActivities.jitter:type_name -> google.protobuf.Duration
	23, // 15: temporal.api.batch.v1.BatchOperationUpdateActivityOptions.activity_options:type_name -> temporal.api.activity.v1.ActivityOptions
	20, // 16: temporal.api.batch.v1.BatchOperationUpdateActivityOptions.update_mask:type_name -> google.protobuf.FieldMask
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_temporal_api_batch_v1_message_proto_init() }
func file_temporal_api_batch_v1_message_proto_init() {
	if File_temporal_api_batch_v1_message_proto != nil {
		return
	}
	file_temporal_api_batch_v1_message_proto_msgTypes[7].OneofWrappers = []any{
		(*BatchOperationUnpauseActivities_Type)(nil),
		(*BatchOperationUnpauseActivities_MatchAll)(nil),
	}
	file_temporal_api_batch_v1_message_proto_msgTypes[8].OneofWrappers = []any{
		(*BatchOperationTriggerWorkflowRule_Id)(nil),
		(*BatchOperationTriggerWorkflowRule_Spec)(nil),
	}
	file_temporal_api_batch_v1_message_proto_msgTypes[9].OneofWrappers = []any{
		(*BatchOperationResetActivities_Type)(nil),
		(*BatchOperationResetActivities_MatchAll)(nil),
	}
	file_temporal_api_batch_v1_message_proto_msgTypes[10].OneofWrappers = []any{
		(*BatchOperationUpdateActivityOptions_Type)(nil),
		(*BatchOperationUpdateActivityOptions_MatchAll)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_temporal_api_batch_v1_message_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_temporal_api_batch_v1_message_proto_goTypes,
		DependencyIndexes: file_temporal_api_batch_v1_message_proto_depIdxs,
		MessageInfos:      file_temporal_api_batch_v1_message_proto_msgTypes,
	}.Build()
	File_temporal_api_batch_v1_message_proto = out.File
	file_temporal_api_batch_v1_message_proto_rawDesc = nil
	file_temporal_api_batch_v1_message_proto_goTypes = nil
	file_temporal_api_batch_v1_message_proto_depIdxs = nil
}

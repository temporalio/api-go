// Code generated by protoc-gen-go-helpers. DO NOT EDIT.
package worker

import (
	"google.golang.org/protobuf/proto"
)

// Marshal an object of type FetchWorkerConfigRequestPayload to the protobuf v3 wire format
func (val *FetchWorkerConfigRequestPayload) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type FetchWorkerConfigRequestPayload from the protobuf v3 wire format
func (val *FetchWorkerConfigRequestPayload) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *FetchWorkerConfigRequestPayload) Size() int {
	return proto.Size(val)
}

// Equal returns whether two FetchWorkerConfigRequestPayload values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *FetchWorkerConfigRequestPayload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *FetchWorkerConfigRequestPayload
	switch t := that.(type) {
	case *FetchWorkerConfigRequestPayload:
		that1 = t
	case FetchWorkerConfigRequestPayload:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type WorkerConfigEntry to the protobuf v3 wire format
func (val *WorkerConfigEntry) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type WorkerConfigEntry from the protobuf v3 wire format
func (val *WorkerConfigEntry) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *WorkerConfigEntry) Size() int {
	return proto.Size(val)
}

// Equal returns whether two WorkerConfigEntry values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *WorkerConfigEntry) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *WorkerConfigEntry
	switch t := that.(type) {
	case *WorkerConfigEntry:
		that1 = t
	case WorkerConfigEntry:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type FetchWorkerConfigResponsePayload to the protobuf v3 wire format
func (val *FetchWorkerConfigResponsePayload) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type FetchWorkerConfigResponsePayload from the protobuf v3 wire format
func (val *FetchWorkerConfigResponsePayload) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *FetchWorkerConfigResponsePayload) Size() int {
	return proto.Size(val)
}

// Equal returns whether two FetchWorkerConfigResponsePayload values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *FetchWorkerConfigResponsePayload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *FetchWorkerConfigResponsePayload
	switch t := that.(type) {
	case *FetchWorkerConfigResponsePayload:
		that1 = t
	case FetchWorkerConfigResponsePayload:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type UpdateWorkerConfigRequestPayload to the protobuf v3 wire format
func (val *UpdateWorkerConfigRequestPayload) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type UpdateWorkerConfigRequestPayload from the protobuf v3 wire format
func (val *UpdateWorkerConfigRequestPayload) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *UpdateWorkerConfigRequestPayload) Size() int {
	return proto.Size(val)
}

// Equal returns whether two UpdateWorkerConfigRequestPayload values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *UpdateWorkerConfigRequestPayload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *UpdateWorkerConfigRequestPayload
	switch t := that.(type) {
	case *UpdateWorkerConfigRequestPayload:
		that1 = t
	case UpdateWorkerConfigRequestPayload:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type UpdateWorkerConfigResponsePayload to the protobuf v3 wire format
func (val *UpdateWorkerConfigResponsePayload) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type UpdateWorkerConfigResponsePayload from the protobuf v3 wire format
func (val *UpdateWorkerConfigResponsePayload) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *UpdateWorkerConfigResponsePayload) Size() int {
	return proto.Size(val)
}

// Equal returns whether two UpdateWorkerConfigResponsePayload values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *UpdateWorkerConfigResponsePayload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *UpdateWorkerConfigResponsePayload
	switch t := that.(type) {
	case *UpdateWorkerConfigResponsePayload:
		that1 = t
	case UpdateWorkerConfigResponsePayload:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

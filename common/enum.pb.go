// The MIT License (MIT)
//
// Copyright (c) 2020 Temporal Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: common/enum.proto

package common

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	math "math"
	strconv "strconv"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EncodingType int32

const (
	EncodingType_Proto3 EncodingType = 0
	EncodingType_JSON   EncodingType = 1
)

var EncodingType_name = map[int32]string{
	0: "Proto3",
	1: "JSON",
}

var EncodingType_value = map[string]int32{
	"Proto3": 0,
	"JSON":   1,
}

func (EncodingType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_874a7323d1d47736, []int{0}
}

type WorkflowIdReusePolicy int32

const (
	// Allow start a workflow execution using the same workflow Id, when workflow not running.
	WorkflowIdReusePolicy_AllowDuplicate WorkflowIdReusePolicy = 0
	// Allow start a workflow execution using the same workflow Id, when workflow not running, and the last execution close state is in
	// [terminated, cancelled, timed out, failed].
	WorkflowIdReusePolicy_AllowDuplicateFailedOnly WorkflowIdReusePolicy = 1
	// Do not allow start a workflow execution using the same workflow Id at all.
	WorkflowIdReusePolicy_RejectDuplicate WorkflowIdReusePolicy = 2
)

var WorkflowIdReusePolicy_name = map[int32]string{
	0: "AllowDuplicate",
	1: "AllowDuplicateFailedOnly",
	2: "RejectDuplicate",
}

var WorkflowIdReusePolicy_value = map[string]int32{
	"AllowDuplicate":           0,
	"AllowDuplicateFailedOnly": 1,
	"RejectDuplicate":          2,
}

func (WorkflowIdReusePolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_874a7323d1d47736, []int{1}
}

type ParentClosePolicy int32

const (
	ParentClosePolicy_Abandon       ParentClosePolicy = 0
	ParentClosePolicy_RequestCancel ParentClosePolicy = 1
	ParentClosePolicy_Terminate     ParentClosePolicy = 2
)

var ParentClosePolicy_name = map[int32]string{
	0: "Abandon",
	1: "RequestCancel",
	2: "Terminate",
}

var ParentClosePolicy_value = map[string]int32{
	"Abandon":       0,
	"RequestCancel": 1,
	"Terminate":     2,
}

func (ParentClosePolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_874a7323d1d47736, []int{2}
}

type IndexedValueType int32

const (
	IndexedValueType_String   IndexedValueType = 0
	IndexedValueType_Keyword  IndexedValueType = 1
	IndexedValueType_Int      IndexedValueType = 2
	IndexedValueType_Double   IndexedValueType = 3
	IndexedValueType_Bool     IndexedValueType = 4
	IndexedValueType_Datetime IndexedValueType = 5
)

var IndexedValueType_name = map[int32]string{
	0: "String",
	1: "Keyword",
	2: "Int",
	3: "Double",
	4: "Bool",
	5: "Datetime",
}

var IndexedValueType_value = map[string]int32{
	"String":   0,
	"Keyword":  1,
	"Int":      2,
	"Double":   3,
	"Bool":     4,
	"Datetime": 5,
}

func (IndexedValueType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_874a7323d1d47736, []int{3}
}

type ContinueAsNewInitiator int32

const (
	ContinueAsNewInitiator_ContinueAsNewInitiatorDecider      ContinueAsNewInitiator = 0
	ContinueAsNewInitiator_ContinueAsNewInitiatorRetryPolicy  ContinueAsNewInitiator = 1
	ContinueAsNewInitiator_ContinueAsNewInitiatorCronSchedule ContinueAsNewInitiator = 2
)

var ContinueAsNewInitiator_name = map[int32]string{
	0: "ContinueAsNewInitiatorDecider",
	1: "ContinueAsNewInitiatorRetryPolicy",
	2: "ContinueAsNewInitiatorCronSchedule",
}

var ContinueAsNewInitiator_value = map[string]int32{
	"ContinueAsNewInitiatorDecider":      0,
	"ContinueAsNewInitiatorRetryPolicy":  1,
	"ContinueAsNewInitiatorCronSchedule": 2,
}

func (ContinueAsNewInitiator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_874a7323d1d47736, []int{4}
}

func init() {
	proto.RegisterEnum("common.EncodingType", EncodingType_name, EncodingType_value)
	proto.RegisterEnum("common.WorkflowIdReusePolicy", WorkflowIdReusePolicy_name, WorkflowIdReusePolicy_value)
	proto.RegisterEnum("common.ParentClosePolicy", ParentClosePolicy_name, ParentClosePolicy_value)
	proto.RegisterEnum("common.IndexedValueType", IndexedValueType_name, IndexedValueType_value)
	proto.RegisterEnum("common.ContinueAsNewInitiator", ContinueAsNewInitiator_name, ContinueAsNewInitiator_value)
}

func init() { proto.RegisterFile("common/enum.proto", fileDescriptor_874a7323d1d47736) }

var fileDescriptor_874a7323d1d47736 = []byte{
	// 443 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xcd, 0x6e, 0x13, 0x31,
	0x14, 0x85, 0xed, 0xb4, 0xa4, 0xe5, 0xd2, 0x82, 0x63, 0x7e, 0x54, 0x21, 0xb0, 0x54, 0x54, 0x58,
	0x44, 0x22, 0x59, 0xf4, 0x09, 0xf2, 0x03, 0x52, 0x40, 0x6a, 0xa3, 0xa4, 0x02, 0xc4, 0x02, 0x69,
	0x32, 0xbe, 0x0c, 0x06, 0x8f, 0x6f, 0x70, 0x3c, 0x84, 0xd9, 0xb1, 0x66, 0xc5, 0x63, 0xf0, 0x28,
	0x2c, 0xb3, 0xec, 0x92, 0x4c, 0x36, 0x2c, 0xfb, 0x08, 0x68, 0x3a, 0x0a, 0x3f, 0x52, 0x76, 0xd7,
	0xe7, 0x7c, 0x3e, 0xd2, 0xd1, 0xbd, 0xd0, 0x88, 0x29, 0x4d, 0xc9, 0xb5, 0xd1, 0x65, 0x69, 0x6b,
	0xea, 0x29, 0x90, 0xac, 0x57, 0xd2, 0xdd, 0x5b, 0x09, 0x25, 0x74, 0x29, 0xb5, 0xcb, 0xa9, 0x72,
	0x9b, 0x47, 0xb0, 0xf7, 0xc4, 0xc5, 0xa4, 0x8d, 0x4b, 0xce, 0xf2, 0x29, 0x4a, 0x80, 0xfa, 0xb0,
	0x34, 0x8e, 0x05, 0x93, 0xbb, 0xb0, 0xfd, 0x6c, 0x7c, 0x7a, 0x22, 0x78, 0xf3, 0x0d, 0xdc, 0x7e,
	0x49, 0xfe, 0xc3, 0x5b, 0x4b, 0xf3, 0x81, 0x1e, 0x61, 0x36, 0xc3, 0x21, 0x59, 0x13, 0xe7, 0x52,
	0xc2, 0xf5, 0x8e, 0xb5, 0x34, 0xef, 0x67, 0x53, 0x6b, 0xe2, 0x28, 0xa0, 0x60, 0xf2, 0x1e, 0x1c,
	0xfc, 0xaf, 0x3d, 0x8d, 0x8c, 0x45, 0x7d, 0xea, 0x6c, 0x2e, 0xb8, 0xbc, 0x09, 0x37, 0x46, 0xf8,
	0x1e, 0xe3, 0xf0, 0xf7, 0x4b, 0xad, 0xd9, 0x85, 0xc6, 0x30, 0xf2, 0xe8, 0x42, 0xcf, 0xd2, 0x9f,
	0xec, 0x6b, 0xb0, 0xd3, 0x99, 0x44, 0x4e, 0x93, 0x13, 0x4c, 0x36, 0x60, 0x7f, 0x84, 0x1f, 0x33,
	0x9c, 0x85, 0x5e, 0xe4, 0x62, 0xb4, 0x82, 0xcb, 0x7d, 0xb8, 0x7a, 0x86, 0x3e, 0x35, 0xae, 0xca,
	0x78, 0x05, 0x62, 0xe0, 0x34, 0x7e, 0x46, 0xfd, 0x22, 0xb2, 0x19, 0xae, 0xdb, 0x8c, 0x83, 0x37,
	0x2e, 0x11, 0xac, 0x8c, 0x7b, 0x8e, 0xf9, 0x9c, 0xbc, 0x16, 0x5c, 0xee, 0xc0, 0xd6, 0xc0, 0x05,
	0x51, 0x2b, 0x89, 0x3e, 0x65, 0x13, 0x8b, 0x62, 0xab, 0xec, 0xdb, 0x25, 0xb2, 0x62, 0x5b, 0xee,
	0xc1, 0x6e, 0x3f, 0x0a, 0x18, 0x4c, 0x8a, 0xe2, 0x4a, 0xf3, 0x2b, 0x87, 0x3b, 0x3d, 0x72, 0xc1,
	0xb8, 0x0c, 0x3b, 0xb3, 0x13, 0x9c, 0x0f, 0x9c, 0x09, 0x26, 0x0a, 0xe4, 0xe5, 0x21, 0xdc, 0xdf,
	0xec, 0xf4, 0x31, 0x36, 0x1a, 0xbd, 0x60, 0xf2, 0x21, 0x1c, 0x6e, 0x46, 0x46, 0x18, 0x7c, 0x5e,
	0x75, 0x15, 0x5c, 0x3e, 0x82, 0x07, 0x9b, 0xb1, 0x9e, 0x27, 0x37, 0x8e, 0xdf, 0xa1, 0xce, 0x2c,
	0x8a, 0x5a, 0xf7, 0xd3, 0x62, 0xa9, 0xf8, 0xf9, 0x52, 0xb1, 0x8b, 0xa5, 0xe2, 0x5f, 0x0a, 0xc5,
	0xbf, 0x17, 0x8a, 0xff, 0x28, 0x14, 0x5f, 0x14, 0x8a, 0xff, 0x2c, 0x14, 0xff, 0x55, 0x28, 0x76,
	0x51, 0x28, 0xfe, 0x6d, 0xa5, 0xd8, 0x62, 0xa5, 0xd8, 0xf9, 0x4a, 0x31, 0x38, 0x30, 0xd4, 0x0a,
	0x98, 0x4e, 0xc9, 0x47, 0xb6, 0xda, 0x7c, 0xab, 0x3a, 0x8b, 0x21, 0x7f, 0x7d, 0x94, 0xfc, 0xe3,
	0x19, 0x6a, 0xaf, 0xe7, 0xc7, 0xd5, 0xb1, 0x54, 0xdc, 0xa4, 0x7e, 0xf9, 0x3a, 0xfe, 0x1d, 0x00,
	0x00, 0xff, 0xff, 0x1a, 0xa1, 0x82, 0x53, 0x62, 0x02, 0x00, 0x00,
}

func (x EncodingType) String() string {
	s, ok := EncodingType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x WorkflowIdReusePolicy) String() string {
	s, ok := WorkflowIdReusePolicy_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ParentClosePolicy) String() string {
	s, ok := ParentClosePolicy_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x IndexedValueType) String() string {
	s, ok := IndexedValueType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ContinueAsNewInitiator) String() string {
	s, ok := ContinueAsNewInitiator_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

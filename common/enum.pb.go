// The MIT License (MIT)
//
// Copyright (c) 2020 Temporal Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: common/enum.proto

package common

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
	strconv "strconv"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EncodingType int32

const (
	EncodingTypeProto3 EncodingType = 0
	EncodingTypeJSON   EncodingType = 1
)

var EncodingType_name = map[int32]string{
	0: "EncodingTypeProto3",
	1: "EncodingTypeJSON",
}

var EncodingType_value = map[string]int32{
	"EncodingTypeProto3": 0,
	"EncodingTypeJSON":   1,
}

func (EncodingType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_874a7323d1d47736, []int{0}
}

type WorkflowIdReusePolicy int32

const (
	// Allow start a workflow execution using the same workflow Id, when workflow not running.
	WorkflowIdReusePolicyAllowDuplicate WorkflowIdReusePolicy = 0
	// Allow start a workflow execution using the same workflow Id, when workflow not running, and the last execution close state is in
	// [terminated, cancelled, timed out, failed].
	WorkflowIdReusePolicyAllowDuplicateFailedOnly WorkflowIdReusePolicy = 1
	// Do not allow start a workflow execution using the same workflow Id at all.
	WorkflowIdReusePolicyRejectDuplicate WorkflowIdReusePolicy = 2
)

var WorkflowIdReusePolicy_name = map[int32]string{
	0: "WorkflowIdReusePolicyAllowDuplicate",
	1: "WorkflowIdReusePolicyAllowDuplicateFailedOnly",
	2: "WorkflowIdReusePolicyRejectDuplicate",
}

var WorkflowIdReusePolicy_value = map[string]int32{
	"WorkflowIdReusePolicyAllowDuplicate":           0,
	"WorkflowIdReusePolicyAllowDuplicateFailedOnly": 1,
	"WorkflowIdReusePolicyRejectDuplicate":          2,
}

func (WorkflowIdReusePolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_874a7323d1d47736, []int{1}
}

type ParentClosePolicy int32

const (
	ParentClosePolicyAbandon       ParentClosePolicy = 0
	ParentClosePolicyRequestCancel ParentClosePolicy = 1
	ParentClosePolicyTerminate     ParentClosePolicy = 2
)

var ParentClosePolicy_name = map[int32]string{
	0: "ParentClosePolicyAbandon",
	1: "ParentClosePolicyRequestCancel",
	2: "ParentClosePolicyTerminate",
}

var ParentClosePolicy_value = map[string]int32{
	"ParentClosePolicyAbandon":       0,
	"ParentClosePolicyRequestCancel": 1,
	"ParentClosePolicyTerminate":     2,
}

func (ParentClosePolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_874a7323d1d47736, []int{2}
}

type IndexedValueType int32

const (
	IndexedValueTypeString   IndexedValueType = 0
	IndexedValueTypeKeyword  IndexedValueType = 1
	IndexedValueTypeInt      IndexedValueType = 2
	IndexedValueTypeDouble   IndexedValueType = 3
	IndexedValueTypeBool     IndexedValueType = 4
	IndexedValueTypeDatetime IndexedValueType = 5
)

var IndexedValueType_name = map[int32]string{
	0: "IndexedValueTypeString",
	1: "IndexedValueTypeKeyword",
	2: "IndexedValueTypeInt",
	3: "IndexedValueTypeDouble",
	4: "IndexedValueTypeBool",
	5: "IndexedValueTypeDatetime",
}

var IndexedValueType_value = map[string]int32{
	"IndexedValueTypeString":   0,
	"IndexedValueTypeKeyword":  1,
	"IndexedValueTypeInt":      2,
	"IndexedValueTypeDouble":   3,
	"IndexedValueTypeBool":     4,
	"IndexedValueTypeDatetime": 5,
}

func (IndexedValueType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_874a7323d1d47736, []int{3}
}

type ContinueAsNewInitiator int32

const (
	ContinueAsNewInitiatorDecider      ContinueAsNewInitiator = 0
	ContinueAsNewInitiatorRetryPolicy  ContinueAsNewInitiator = 1
	ContinueAsNewInitiatorCronSchedule ContinueAsNewInitiator = 2
)

var ContinueAsNewInitiator_name = map[int32]string{
	0: "ContinueAsNewInitiatorDecider",
	1: "ContinueAsNewInitiatorRetryPolicy",
	2: "ContinueAsNewInitiatorCronSchedule",
}

var ContinueAsNewInitiator_value = map[string]int32{
	"ContinueAsNewInitiatorDecider":      0,
	"ContinueAsNewInitiatorRetryPolicy":  1,
	"ContinueAsNewInitiatorCronSchedule": 2,
}

func (ContinueAsNewInitiator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_874a7323d1d47736, []int{4}
}

func init() {
	proto.RegisterEnum("common.EncodingType", EncodingType_name, EncodingType_value)
	proto.RegisterEnum("common.WorkflowIdReusePolicy", WorkflowIdReusePolicy_name, WorkflowIdReusePolicy_value)
	proto.RegisterEnum("common.ParentClosePolicy", ParentClosePolicy_name, ParentClosePolicy_value)
	proto.RegisterEnum("common.IndexedValueType", IndexedValueType_name, IndexedValueType_value)
	proto.RegisterEnum("common.ContinueAsNewInitiator", ContinueAsNewInitiator_name, ContinueAsNewInitiator_value)
}

func init() { proto.RegisterFile("common/enum.proto", fileDescriptor_874a7323d1d47736) }

var fileDescriptor_874a7323d1d47736 = []byte{
	// 464 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xbf, 0x6e, 0x13, 0x41,
	0x10, 0x87, 0x77, 0x03, 0xa4, 0x18, 0x51, 0x6c, 0x96, 0xe0, 0x58, 0x01, 0x56, 0x4a, 0x08, 0x7f,
	0x64, 0x29, 0xb6, 0x50, 0x5a, 0x1a, 0xc7, 0x06, 0xc9, 0x20, 0x25, 0x96, 0x1d, 0x81, 0x44, 0x77,
	0xbe, 0x1b, 0xcc, 0xc2, 0xde, 0x8e, 0x59, 0xef, 0x62, 0xae, 0xa3, 0xa6, 0xe2, 0x05, 0xe8, 0x79,
	0x04, 0x1e, 0x81, 0xd2, 0x65, 0x4a, 0x7c, 0x6e, 0x28, 0xf3, 0x08, 0x28, 0x3e, 0x01, 0x96, 0x7d,
	0x05, 0xdd, 0xcd, 0xef, 0xfb, 0x66, 0xee, 0x6e, 0x34, 0xb0, 0x15, 0x53, 0x9a, 0x92, 0x6d, 0xa0,
	0x0d, 0x69, 0x7d, 0xe4, 0xc8, 0x93, 0xdc, 0x2c, 0xa2, 0xda, 0x63, 0xb8, 0xfe, 0xc4, 0xc6, 0x94,
	0x68, 0x3b, 0x3c, 0xcb, 0x46, 0x28, 0x2b, 0x20, 0x97, 0xeb, 0xee, 0xa5, 0x7c, 0x24, 0x98, 0xdc,
	0x06, 0xb1, 0x9c, 0x3f, 0xeb, 0x9f, 0x9e, 0x08, 0x5e, 0xfb, 0xca, 0xe1, 0xe6, 0x4b, 0x72, 0xef,
	0x5e, 0x1b, 0x9a, 0x74, 0x92, 0x1e, 0x86, 0x31, 0x76, 0xc9, 0xe8, 0x38, 0x93, 0x0f, 0xe0, 0x6e,
	0x29, 0x68, 0x1a, 0x43, 0x93, 0x76, 0x18, 0x19, 0x1d, 0x47, 0x1e, 0x05, 0x93, 0x8f, 0xe0, 0xf0,
	0x3f, 0xc4, 0xa7, 0x91, 0x36, 0x98, 0x9c, 0x5a, 0x93, 0x09, 0x2e, 0x1f, 0xc2, 0x41, 0x69, 0x4b,
	0x0f, 0xdf, 0x62, 0xec, 0xff, 0x0d, 0xdf, 0xa8, 0x05, 0xd8, 0xea, 0x46, 0x0e, 0xad, 0x6f, 0x19,
	0xfa, 0xfb, 0x69, 0xb7, 0xa1, 0xba, 0x16, 0x36, 0x07, 0x91, 0x4d, 0xc8, 0x0a, 0x26, 0xf7, 0x41,
	0xad, 0xd1, 0x1e, 0xbe, 0x0f, 0x38, 0xf6, 0xad, 0xc8, 0xc6, 0x68, 0x04, 0x97, 0x0a, 0x76, 0xd7,
	0x9c, 0x33, 0x74, 0xa9, 0xb6, 0xc5, 0x6b, 0xbf, 0x73, 0x10, 0x1d, 0x9b, 0xe0, 0x47, 0x4c, 0x5e,
	0x44, 0x26, 0xe0, 0x62, 0xb3, 0xbb, 0x50, 0x59, 0xcd, 0xfa, 0xde, 0x69, 0x3b, 0x14, 0x4c, 0xde,
	0x82, 0x9d, 0x55, 0xf6, 0x1c, 0xb3, 0x09, 0xb9, 0x44, 0x70, 0xb9, 0x03, 0x37, 0x56, 0x61, 0xc7,
	0x7a, 0xb1, 0x51, 0x36, 0xb1, 0x4d, 0x61, 0x60, 0x50, 0x5c, 0x91, 0x55, 0xd8, 0x5e, 0x65, 0xc7,
	0x44, 0x46, 0x5c, 0xbd, 0xfc, 0xfd, 0xb5, 0xae, 0xc8, 0xa3, 0xd7, 0x29, 0x8a, 0x6b, 0xb5, 0xcf,
	0x1c, 0x2a, 0x2d, 0xb2, 0x5e, 0xdb, 0x80, 0xcd, 0xf1, 0x09, 0x4e, 0x3a, 0x56, 0x7b, 0x1d, 0x79,
	0x72, 0x72, 0x0f, 0xee, 0x94, 0x93, 0x36, 0xc6, 0x3a, 0x41, 0x27, 0x98, 0xbc, 0x07, 0x7b, 0xe5,
	0x4a, 0x0f, 0xbd, 0xcb, 0x8a, 0x45, 0x09, 0x2e, 0xef, 0xc3, 0x7e, 0xb9, 0xd6, 0x72, 0x64, 0xfb,
	0xf1, 0x1b, 0x4c, 0x82, 0x41, 0xb1, 0x71, 0xfc, 0x61, 0x3a, 0x53, 0xec, 0x7c, 0xa6, 0xd8, 0xc5,
	0x4c, 0xf1, 0x4f, 0xb9, 0xe2, 0xdf, 0x72, 0xc5, 0x7f, 0xe4, 0x8a, 0x4f, 0x73, 0xc5, 0x7f, 0xe6,
	0x8a, 0xff, 0xca, 0x15, 0xbb, 0xc8, 0x15, 0xff, 0x32, 0x57, 0x6c, 0x3a, 0x57, 0xec, 0x7c, 0xae,
	0x18, 0x54, 0x35, 0xd5, 0x3d, 0xa6, 0x23, 0x72, 0x91, 0x29, 0xae, 0xbd, 0x5e, 0x1c, 0x7b, 0x97,
	0xbf, 0x3a, 0x18, 0x2e, 0x31, 0x4d, 0x8d, 0x3f, 0xcf, 0x87, 0x0b, 0xaf, 0x51, 0x78, 0x83, 0xcd,
	0x45, 0x75, 0xf4, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x9f, 0x55, 0x98, 0xeb, 0x38, 0x03, 0x00, 0x00,
}

func (x EncodingType) String() string {
	s, ok := EncodingType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x WorkflowIdReusePolicy) String() string {
	s, ok := WorkflowIdReusePolicy_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ParentClosePolicy) String() string {
	s, ok := ParentClosePolicy_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x IndexedValueType) String() string {
	s, ok := IndexedValueType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ContinueAsNewInitiator) String() string {
	s, ok := ContinueAsNewInitiator_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

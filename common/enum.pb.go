// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: common/enum.proto

package common

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
	strconv "strconv"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EncodingType int32

const (
	ENCODING_TYPE_PROTO3 EncodingType = 0
	ENCODING_TYPE_JSON   EncodingType = 1
)

var EncodingType_name = map[int32]string{
	0: "Proto3",
	1: "Json",
}

var EncodingType_value = map[string]int32{
	"Proto3": 0,
	"Json":   1,
}

func (EncodingType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_874a7323d1d47736, []int{0}
}

type WorkflowIdReusePolicy int32

const (
	// Allow start a workflow execution using the same workflow Id, when workflow not running.
	WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE WorkflowIdReusePolicy = 0
	// Allow start a workflow execution using the same workflow Id, when workflow not running, and the last execution close state is in
	// [terminated, cancelled, timed out, failed].
	WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE_FAILED_ONLY WorkflowIdReusePolicy = 1
	// Do not allow start a workflow execution using the same workflow Id at all.
	WORKFLOW_ID_REUSE_POLICY_REJECT_DUPLICATE WorkflowIdReusePolicy = 2
)

var WorkflowIdReusePolicy_name = map[int32]string{
	0: "AllowDuplicate",
	1: "AllowDuplicateFailedOnly",
	2: "RejectDuplicate",
}

var WorkflowIdReusePolicy_value = map[string]int32{
	"AllowDuplicate":           0,
	"AllowDuplicateFailedOnly": 1,
	"RejectDuplicate":          2,
}

func (WorkflowIdReusePolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_874a7323d1d47736, []int{1}
}

type ParentClosePolicy int32

const (
	PARENT_CLOSE_POLICY_ABANDON        ParentClosePolicy = 0
	PARENT_CLOSE_POLICY_REQUEST_CANCEL ParentClosePolicy = 1
	PARENT_CLOSE_POLICY_TERMINATE      ParentClosePolicy = 2
)

var ParentClosePolicy_name = map[int32]string{
	0: "Abandon",
	1: "RequestCancel",
	2: "Terminate",
}

var ParentClosePolicy_value = map[string]int32{
	"Abandon":       0,
	"RequestCancel": 1,
	"Terminate":     2,
}

func (ParentClosePolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_874a7323d1d47736, []int{2}
}

type IndexedValueType int32

const (
	INDEXED_VALUE_TYPE_STRING   IndexedValueType = 0
	INDEXED_VALUE_TYPE_KEYWORD  IndexedValueType = 1
	INDEXED_VALUE_TYPE_INT      IndexedValueType = 2
	INDEXED_VALUE_TYPE_DOUBLE   IndexedValueType = 3
	INDEXED_VALUE_TYPE_BOOL     IndexedValueType = 4
	INDEXED_VALUE_TYPE_DATETIME IndexedValueType = 5
)

var IndexedValueType_name = map[int32]string{
	0: "String",
	1: "Keyword",
	2: "Int",
	3: "Double",
	4: "Bool",
	5: "Datetime",
}

var IndexedValueType_value = map[string]int32{
	"String":   0,
	"Keyword":  1,
	"Int":      2,
	"Double":   3,
	"Bool":     4,
	"Datetime": 5,
}

func (IndexedValueType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_874a7323d1d47736, []int{3}
}

type ContinueAsNewInitiator int32

const (
	CONTINUE_AS_NEW_INITIATOR_DECIDER       ContinueAsNewInitiator = 0
	CONTINUE_AS_NEW_INITIATOR_RETRY         ContinueAsNewInitiator = 1
	CONTINUE_AS_NEW_INITIATOR_CRON_SCHEDULE ContinueAsNewInitiator = 2
)

var ContinueAsNewInitiator_name = map[int32]string{
	0: "Decider",
	1: "Retry",
	2: "CronSchedule",
}

var ContinueAsNewInitiator_value = map[string]int32{
	"Decider":      0,
	"Retry":        1,
	"CronSchedule": 2,
}

func (ContinueAsNewInitiator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_874a7323d1d47736, []int{4}
}

type TimeoutType int32

const (
	TIMEOUT_TYPE_START_TO_CLOSE    TimeoutType = 0
	TIMEOUT_TYPE_SCHEDULE_TO_START TimeoutType = 1
	TIMEOUT_TYPE_SCHEDULE_TO_CLOSE TimeoutType = 2
	TIMEOUT_TYPE_HEARTBEAT         TimeoutType = 3
)

var TimeoutType_name = map[int32]string{
	0: "StartToClose",
	1: "ScheduleToStart",
	2: "ScheduleToClose",
	3: "Heartbeat",
}

var TimeoutType_value = map[string]int32{
	"StartToClose":    0,
	"ScheduleToStart": 1,
	"ScheduleToClose": 2,
	"Heartbeat":       3,
}

func (TimeoutType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_874a7323d1d47736, []int{5}
}

type RetryStatus int32

const (
	RETRY_STATUS_IN_PROGRESS              RetryStatus = 0
	RETRY_STATUS_NON_RETRYABLE_FAILURE    RetryStatus = 1
	RETRY_STATUS_TIMEOUT                  RetryStatus = 2
	RETRY_STATUS_MAXIMUM_ATTEMPTS_REACHED RetryStatus = 3
	RETRY_STATUS_RETRY_POLICY_NOT_SET     RetryStatus = 4
	RETRY_STATUS_INTERNAL_SERVER_ERROR    RetryStatus = 5
	RETRY_STATUS_CANCEL_REQUESTED         RetryStatus = 6
)

var RetryStatus_name = map[int32]string{
	0: "InProgress",
	1: "NonRetryableFailure",
	2: "Timeout",
	3: "MaximumAttemptsReached",
	4: "RetryPolicyNotSet",
	5: "InternalServerError",
	6: "CancelRequested",
}

var RetryStatus_value = map[string]int32{
	"InProgress":             0,
	"NonRetryableFailure":    1,
	"Timeout":                2,
	"MaximumAttemptsReached": 3,
	"RetryPolicyNotSet":      4,
	"InternalServerError":    5,
	"CancelRequested":        6,
}

func (RetryStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_874a7323d1d47736, []int{6}
}

func init() {
	proto.RegisterEnum("common.EncodingType", EncodingType_name, EncodingType_value)
	proto.RegisterEnum("common.WorkflowIdReusePolicy", WorkflowIdReusePolicy_name, WorkflowIdReusePolicy_value)
	proto.RegisterEnum("common.ParentClosePolicy", ParentClosePolicy_name, ParentClosePolicy_value)
	proto.RegisterEnum("common.IndexedValueType", IndexedValueType_name, IndexedValueType_value)
	proto.RegisterEnum("common.ContinueAsNewInitiator", ContinueAsNewInitiator_name, ContinueAsNewInitiator_value)
	proto.RegisterEnum("common.TimeoutType", TimeoutType_name, TimeoutType_value)
	proto.RegisterEnum("common.RetryStatus", RetryStatus_name, RetryStatus_value)
}

func init() { proto.RegisterFile("common/enum.proto", fileDescriptor_874a7323d1d47736) }

var fileDescriptor_874a7323d1d47736 = []byte{
	// 725 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xbf, 0x53, 0xdc, 0x46,
	0x14, 0xc7, 0xb5, 0xc7, 0x8f, 0x62, 0x49, 0xb1, 0xec, 0x24, 0x84, 0x40, 0x10, 0x03, 0x09, 0x49,
	0xb8, 0x04, 0x28, 0x48, 0x91, 0x32, 0x7b, 0xd2, 0x03, 0x16, 0x74, 0xbb, 0xca, 0x6a, 0xc5, 0x71,
	0x69, 0x76, 0x2e, 0x9c, 0xc2, 0x68, 0x7c, 0x27, 0x31, 0x87, 0xce, 0x98, 0xca, 0xae, 0x5d, 0xd9,
	0xfe, 0x2b, 0x5c, 0xf9, 0xef, 0xf0, 0xb8, 0xa2, 0xa4, 0x34, 0x47, 0xe3, 0x92, 0x3f, 0xc1, 0xa3,
	0x13, 0x78, 0xd0, 0xf8, 0xce, 0xe3, 0x4e, 0xda, 0xef, 0x67, 0xf7, 0xbd, 0xfd, 0xbe, 0xf7, 0x16,
	0xcf, 0x1e, 0xa7, 0xdd, 0x6e, 0x9a, 0x6c, 0x45, 0x49, 0xbf, 0xbb, 0x79, 0xda, 0x4b, 0xb3, 0x94,
	0x4e, 0x17, 0x4b, 0xd5, 0xbf, 0xf1, 0x37, 0x90, 0x1c, 0xa7, 0xed, 0x38, 0x39, 0xd1, 0x17, 0xa7,
	0x11, 0x9d, 0xc7, 0xdf, 0x82, 0x70, 0xa4, 0xcb, 0xc5, 0xae, 0xd1, 0x4d, 0x1f, 0x8c, 0xaf, 0xa4,
	0x96, 0xdb, 0xc4, 0xa2, 0x73, 0x98, 0x96, 0x95, 0xfd, 0x40, 0x0a, 0x82, 0xaa, 0x6f, 0x10, 0xfe,
	0xae, 0x91, 0xf6, 0x1e, 0xfd, 0xdf, 0x49, 0xcf, 0x79, 0x5b, 0x45, 0xfd, 0xb3, 0xc8, 0x4f, 0x3b,
	0xf1, 0xf1, 0x05, 0xfd, 0x03, 0xff, 0xd6, 0x90, 0xea, 0x60, 0xc7, 0x93, 0x0d, 0xc3, 0x5d, 0xa3,
	0x20, 0x0c, 0xc0, 0xf8, 0xd2, 0xe3, 0x4e, 0xd3, 0x30, 0x2f, 0x5f, 0x75, 0x43, 0xdf, 0xe3, 0x0e,
	0xd3, 0x40, 0x2c, 0xfa, 0x17, 0xfe, 0xf3, 0x6b, 0x69, 0xb3, 0xc3, 0xb8, 0x07, 0xae, 0x91, 0xc2,
	0x6b, 0x12, 0x44, 0x37, 0xf0, 0xfa, 0xd8, 0x9d, 0x0a, 0xf6, 0xc1, 0xd1, 0x0f, 0x02, 0x55, 0xaa,
	0x4f, 0xf1, 0xac, 0xdf, 0xea, 0x45, 0x49, 0xe6, 0x74, 0xd2, 0x4f, 0xb9, 0x2e, 0xe3, 0x45, 0x9f,
	0x29, 0x10, 0xda, 0x38, 0x9e, 0x7c, 0x10, 0xb8, 0xc6, 0x84, 0x2b, 0x05, 0xb1, 0xe8, 0x2f, 0x78,
	0x75, 0x14, 0xa0, 0xe0, 0x9f, 0x10, 0x02, 0x6d, 0x1c, 0x26, 0x1c, 0xf0, 0x08, 0xa2, 0x2b, 0x78,
	0x69, 0x14, 0xa7, 0x41, 0xd5, 0xb9, 0x28, 0x12, 0x78, 0x87, 0x30, 0xe1, 0x49, 0x3b, 0x7a, 0x12,
	0xb5, 0x0f, 0x5b, 0x9d, 0x7e, 0x34, 0x34, 0x7e, 0x09, 0xff, 0xc0, 0x85, 0x0b, 0x47, 0xe0, 0x9a,
	0x43, 0xe6, 0x85, 0x50, 0x78, 0x1c, 0x68, 0xc5, 0xc5, 0x2e, 0xb1, 0xa8, 0x8d, 0x17, 0x46, 0xc8,
	0x07, 0xd0, 0x6c, 0x48, 0xe5, 0x12, 0x44, 0x17, 0xf0, 0xdc, 0x08, 0x9d, 0x0b, 0x4d, 0x2a, 0x63,
	0x8e, 0x76, 0x65, 0x58, 0xf3, 0x80, 0x4c, 0xd0, 0x45, 0xfc, 0xfd, 0x08, 0xb9, 0x26, 0xa5, 0x47,
	0x26, 0x73, 0x5f, 0x46, 0xed, 0x65, 0x1a, 0x34, 0xaf, 0x03, 0x99, 0xaa, 0xbe, 0x44, 0x78, 0xce,
	0x49, 0x93, 0x2c, 0x4e, 0xfa, 0x11, 0x3b, 0x13, 0xd1, 0x39, 0x4f, 0xe2, 0x2c, 0x6e, 0x65, 0x69,
	0x8f, 0xae, 0xe1, 0x15, 0x47, 0x0a, 0xcd, 0x45, 0x08, 0x86, 0x05, 0x46, 0x40, 0xc3, 0x70, 0xc1,
	0x35, 0x67, 0x5a, 0x2a, 0xe3, 0x82, 0xc3, 0x5d, 0x50, 0xc4, 0xa2, 0x3f, 0xe1, 0xe5, 0xf1, 0x98,
	0x02, 0xad, 0xf2, 0x1a, 0xff, 0x8e, 0x7f, 0x1d, 0x0f, 0x39, 0x4a, 0x0a, 0x13, 0x38, 0x7b, 0xe0,
	0x86, 0x5e, 0x6e, 0xf0, 0x2b, 0x84, 0x67, 0x74, 0xdc, 0x8d, 0xd2, 0x7e, 0x36, 0xf4, 0x76, 0x19,
	0x2f, 0xe6, 0xd9, 0xca, 0x50, 0xdf, 0xbb, 0xca, 0x94, 0x36, 0x5a, 0x16, 0x25, 0x22, 0x16, 0x5d,
	0xc5, 0x76, 0x19, 0xb8, 0x3b, 0x2b, 0x67, 0x86, 0x30, 0x41, 0x5f, 0x64, 0x8a, 0x73, 0x2a, 0x79,
	0x15, 0x4a, 0xcc, 0x1e, 0x30, 0xa5, 0x6b, 0xc0, 0x34, 0x99, 0xa8, 0x3e, 0xaf, 0xe0, 0x19, 0x15,
	0x65, 0xbd, 0x8b, 0x20, 0x6b, 0x65, 0xfd, 0x33, 0xfa, 0x23, 0x9e, 0x1f, 0x5e, 0x2e, 0x0f, 0xa0,
	0xc3, 0xc0, 0x70, 0x91, 0xcf, 0xda, 0xae, 0x82, 0x20, 0x28, 0xda, 0xad, 0xa4, 0x0a, 0x29, 0x0a,
	0x2f, 0x58, 0xcd, 0x2b, 0xfa, 0x3f, 0x54, 0x40, 0x50, 0x3e, 0xaf, 0x25, 0xee, 0x2e, 0x3c, 0xa9,
	0xd0, 0x75, 0xbc, 0x56, 0x52, 0xea, 0xec, 0x88, 0xd7, 0xc3, 0xba, 0x61, 0x5a, 0x43, 0xdd, 0xd7,
	0x81, 0x51, 0xc0, 0xf2, 0x2b, 0x90, 0x89, 0xbc, 0x50, 0x25, 0xb4, 0xf8, 0xb9, 0xeb, 0x5c, 0x21,
	0xb5, 0x09, 0x40, 0x93, 0xc9, 0xcf, 0x72, 0xe2, 0x42, 0x83, 0x12, 0xcc, 0x33, 0x01, 0xa8, 0x43,
	0x50, 0x06, 0x94, 0x92, 0x8a, 0x4c, 0xe5, 0x23, 0x50, 0xe2, 0x8a, 0xd9, 0xb8, 0x1f, 0x15, 0x70,
	0xc9, 0x74, 0xed, 0xf1, 0xe5, 0xb5, 0x6d, 0x5d, 0x5d, 0xdb, 0xd6, 0xed, 0xb5, 0x8d, 0x9e, 0x0d,
	0x6c, 0xf4, 0x7a, 0x60, 0xa3, 0xb7, 0x03, 0x1b, 0x5d, 0x0e, 0x6c, 0xf4, 0x7e, 0x60, 0xa3, 0x0f,
	0x03, 0xdb, 0xba, 0x1d, 0xd8, 0xe8, 0xc5, 0x8d, 0x6d, 0x5d, 0xde, 0xd8, 0xd6, 0xd5, 0x8d, 0x6d,
	0xe1, 0xf9, 0x38, 0xdd, 0xcc, 0xa2, 0xee, 0x69, 0xda, 0x6b, 0x75, 0x8a, 0x77, 0x6c, 0xb3, 0x78,
	0xc6, 0x7c, 0xf4, 0xef, 0xcf, 0x27, 0x0f, 0xb4, 0x38, 0xdd, 0xba, 0xff, 0xde, 0x18, 0x72, 0x5b,
	0x05, 0xf7, 0xdf, 0xf4, 0xf0, 0x6f, 0xfb, 0x63, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf4, 0xee, 0x79,
	0x65, 0x12, 0x05, 0x00, 0x00,
}

func (x EncodingType) String() string {
	s, ok := EncodingType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x WorkflowIdReusePolicy) String() string {
	s, ok := WorkflowIdReusePolicy_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ParentClosePolicy) String() string {
	s, ok := ParentClosePolicy_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x IndexedValueType) String() string {
	s, ok := IndexedValueType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ContinueAsNewInitiator) String() string {
	s, ok := ContinueAsNewInitiator_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x TimeoutType) String() string {
	s, ok := TimeoutType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x RetryStatus) String() string {
	s, ok := RetryStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
